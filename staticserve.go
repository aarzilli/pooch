package main

var FILES map[string]string = map[string]string{
	"advanced.html": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkFkdmFuY2VkIE9wZXJhdGlvbnM8L3RpdGxlPgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDxmb3JtIG1ldGhvZD0iZ2V0IiBhY3Rpb249Ii9yZW50YWciPgogICAgICA8aDI+UmVuYW1lIFRhZzwvaDI+CiAgICAgIEZyb206IDxpbnB1dCBuYW1lPSdmcm9tJyB0eXBlPSd0ZXh0JyBzaXplPScyMCcvPjxicj4KICAgICAgVG86IDxpbnB1dCBuYW1lPSd0bycgdHlwZT0ndGV4dCcgc2l6ZT0nMjAnLz48YnI+CiAgICAgIDxpbnB1dCB0eXBlPSdzdWJtaXQnIHZhbHVlPSdyZW5hbWUnLz4KICAgIDwvZm9ybT4KICA8L2JvZHk+CjwvaHRtbD4K",
	"cal.css": "LyoKIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgR1BMdjMKIENvcHlyaWdodCAyMDEwLCBBbGVzc2FuZHJvIEFyemlsbGkKICovCgouYWx0MSwgLmZjLWFnZW5kYSAuYWx0MSwgLmZjLWV2ZW50LXRpbWUsIC5hbHQxIGEgewogICAgYmFja2dyb3VuZC1jb2xvcjogbWFyb29uOwogICAgYm9yZGVyLWNvbG9yOiBtYXJvb247Cn0KCi5hbHQyLCAuZmMtYWdlbmRhIC5hbHQyLCAuZmMtZXZlbnQtdGltZSwgLmFsdDIgYSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBuYXZ5OwogICAgYm9yZGVyLWNvbG9yOiBuYXZ5Owp9CgouYWx0MywgLmZjLWFnZW5kYSAuYWx0MywgLmZjLWV2ZW50LXRpbWUsIC5hbHQzIGEgewogICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47CiAgICBib3JkZXItY29sb3I6IGdyZWVuOwp9CgouYWx0NCwgLmZjLWFnZW5kYSAuYWx0NCwgLmZjLWV2ZW50LXRpbWUsIC5hbHQ0IGEgewogICAgYmFja2dyb3VuZC1jb2xvcjogZnVjaHNpYTsKICAgIGJvcmRlci1jb2xvcjogZnVjaHNpYTsKfQoKLmFsdDUsIC5mYy1hZ2VuZGEgLmFsdDUsIC5mYy1ldmVudC10aW1lLCAuYWx0NSBhIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHB1cnBsZTsKICAgIGJvcmRlci1jb2xvcjogcHVycGxlOwp9CgoucG9wdXAgewogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICBwYWRkaW5nOiA4cHg7CiAgICBib3JkZXI6IHRoaW4gc29saWQgYmxhY2s7Cn0K",
	"calendar.css": "LmNhbGVuZGFyLWJveCB7CglkaXNwbGF5Om5vbmU7CgliYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Cglib3JkZXI6MXB4IHNvbGlkICM0NDQ7Cglwb3NpdGlvbjphYnNvbHV0ZTsKCXdpZHRoOjI1MHB4OwoJcGFkZGluZzogMCA1cHg7Cn0KLmNhbGVuZGFyLWJveCBzZWxlY3QuY2FsZW5kYXItbW9udGggewoJd2lkdGg6OTBweDsKfQouY2FsZW5kYXItYm94IHNlbGVjdC5jYWxlbmRhci15ZWFyIHsKCXdpZHRoOjcwcHg7Cn0KLmNhbGVuZGFyLWJveCAuY2FsZW5kYXItY2FuY2VsIHsKCXdpZHRoOjEwMCU7Cn0KLmNhbGVuZGFyLWJveCB0YWJsZSB0ZCB7Cgl3aWR0aDoxNCU7Cn0KLmNhbGVuZGFyLWJveCAuY2FsZW5kYXItdGl0bGUgewoJdGV4dC1hbGlnbjpjZW50ZXI7Cn0KLmNhbGVuZGFyLWJveCBhIHsKCXRleHQtZGVjb3JhdGlvbjpub25lOwp9Ci5jYWxlbmRhci1ib3ggLnRvZGF5IGEgewoJcGFkZGluZzowIDVweDsKCW1hcmdpbi1sZWZ0Oi01cHg7CgliYWNrZ3JvdW5kLWNvbG9yOiNmZmU5YzY7Cn0gCi5jYWxlbmRhci1ib3ggLnNlbGVjdGVkIGEgewoJcGFkZGluZzowIDVweDsKCW1hcmdpbi1sZWZ0Oi01cHg7CgliYWNrZ3JvdW5kLWNvbG9yOiNjOWZmOGI7Cn0K",
	"calendar.js": "",
	"cint.js": "LyoKIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgR1BMdjMKIENvcHlyaWdodCAyMDEwLCBBbGVzc2FuZHJvIEFyemlsbGkKICovCgokKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAgICQoJyNjYWxlbmRhcicpLmZ1bGxDYWxlbmRhcih7CiAgICAgIGZpcnN0RGF5OiAxLCAvLyBzdGFydCB3aXRoIG1vbmRheQoJICBlZGl0YWJsZTogZmFsc2UsCiAgICAgIGV2ZW50czogIi9jYWxldmVudHM/cT0iK2VuY29kZVVSSUNvbXBvbmVudChxdWVyeSksCgkgIGhlYWRlcjogewoJbGVmdDogJ3ByZXYsbmV4dCB0b2RheScsCgkgICAgY2VudGVyOiAndGl0bGUnLAoJICAgIHJpZ2h0OiAnbW9udGgsYmFzaWNXZWVrJwoJfQogICAgICB9KQogICAgICB9KTsKCg==",
	"dlist.css": "LyoKIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgR1BMdjMKIENvcHlyaWdodCAyMDEwLCBBbGVzc2FuZHJvIEFyemlsbGkKICovCgoqIHsKICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwp9CgphIHsKICAgIGNvbG9yOiBjeWFuOwp9Cgpib2R5IHsKICAgIGJhY2tncm91bmQtY29sb3I6ICMyRDI4Mjg7CiAgICBjb2xvcjogI0VBRThFOTsKICAgIGZvbnQtc2l6ZTogOHB0Owp9CgoucG9wdXAgewogICAgYmFja2dyb3VuZC1jb2xvcjogIzJEMjgyODsKfQoKdGFibGUgewogICAgZm9udC1zaXplOiA4cHQ7Cn0KCi5wcmNoYW5nZSA+IHRkIHsKICAgIHBhZGRpbmctdG9wOiAxMHB4OwogICAgZm9udC1zaXplOiBsYXJnZTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouZW50cnkgewogICAgYmFja2dyb3VuZDogbm9uZSByZXBlYXQgc2Nyb2xsIDAgMCAjNTU1NTU1OwogICAgYm9yZGVyOiAxcHggc29saWQgIzQ0NDQ0NDsKfQoKLmVudHJ5ID4gdGQgewogICAgcGFkZGluZzogNHB4Owp9CgouZXRpdGxlIHsKICAgIHdpZHRoOiA2NSU7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoKLmV0aXRsZSA+IGEgewogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgY29sb3I6ICNFQUU4RTkKfQoKLnByaW9yaXR5YnV0dG9uIHsKICAgIHdpZHRoOiA2MHB4OwogICAgY29sb3I6IGJsYWNrOwogICAgZm9udC1zaXplOiB4eC1zbWFsbDsKfQoKLnByaW9yaXR5Y2xhc3NfTk9XIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuOwp9Ci5wcmlvcml0eWNsYXNzX0xBVEVSIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdzsKfQoucHJpb3JpdHljbGFzc19USU1FRCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7Cn0KLnByaW9yaXR5Y2xhc3NfRE9ORSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7Cn0KLnByaW9yaXR5Y2xhc3NfU1RJQ0tZIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTsKfQoucHJpb3JpdHljbGFzc19OT1RFUyB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7Cn0KCi5zY3JlcnJvciB7CiAgICBjb2xvcjogcmVkOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0=",
	"fullcalendar.css": "",
	"fullcalendar.js": "LyoqCiAqIEBwcmVzZXJ2ZQogKiBGdWxsQ2FsZW5kYXIgdjEuNC45CiAqIGh0dHA6Ly9hcnNoYXcuY29tL2Z1bGxjYWxlbmRhci8KICoKICogVXNlIGZ1bGxjYWxlbmRhci5jc3MgZm9yIGJhc2ljIHN0eWxpbmcuCiAqIEZvciBldmVudCBkcmFnICYgZHJvcCwgcmVxdWlyZXMgalF1ZXJ5IFVJIGRyYWdnYWJsZS4KICogRm9yIGV2ZW50IHJlc2l6aW5nLCByZXF1aXJlcyBqUXVlcnkgVUkgcmVzaXphYmxlLgogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTAgQWRhbSBTaGF3CiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzLCBsb2NhdGVkIGluCiAqIE1JVC1MSUNFTlNFLnR4dCBhbmQgR1BMLUxJQ0VOU0UudHh0IHJlc3BlY3RpdmVseS4KICoKICogRGF0ZTogRnJpIE5vdiAxOSAyMjo0NTo0NCAyMDEwIC0wODAwCiAqCiAqLwogCihmdW5jdGlvbigkLCB1bmRlZmluZWQpIHsKCgp2YXIgZGVmYXVsdHMgPSB7CgoJLy8gZGlzcGxheQoJZGVmYXVsdFZpZXc6ICdtb250aCcsCglhc3BlY3RSYXRpbzogMS4zNSwKCWhlYWRlcjogewoJCWxlZnQ6ICd0aXRsZScsCgkJY2VudGVyOiAnJywKCQlyaWdodDogJ3RvZGF5IHByZXYsbmV4dCcKCX0sCgl3ZWVrZW5kczogdHJ1ZSwKCQoJLy8gZWRpdGluZwoJLy9lZGl0YWJsZTogZmFsc2UsCgkvL2Rpc2FibGVEcmFnZ2luZzogZmFsc2UsCgkvL2Rpc2FibGVSZXNpemluZzogZmFsc2UsCgkKCWFsbERheURlZmF1bHQ6IHRydWUsCglpZ25vcmVUaW1lem9uZTogdHJ1ZSwKCQoJLy8gZXZlbnQgYWpheAoJbGF6eUZldGNoaW5nOiB0cnVlLAoJc3RhcnRQYXJhbTogJ3N0YXJ0JywKCWVuZFBhcmFtOiAnZW5kJywKCQoJLy8gdGltZSBmb3JtYXRzCgl0aXRsZUZvcm1hdDogewoJCW1vbnRoOiAnTU1NTSB5eXl5JywKCQl3ZWVrOiAiTU1NIGRbIHl5eXldeyAnJiM4MjEyOydbIE1NTV0gZCB5eXl5fSIsCgkJZGF5OiAnZGRkZCwgTU1NIGQsIHl5eXknCgl9LAoJY29sdW1uRm9ybWF0OiB7CgkJbW9udGg6ICdkZGQnLAoJCXdlZWs6ICdkZGQgTS9kJywKCQlkYXk6ICdkZGRkIE0vZCcKCX0sCgl0aW1lRm9ybWF0OiB7IC8vIGZvciBldmVudCBlbGVtZW50cwoJCScnOiAnaCg6bW0pdCcgLy8gZGVmYXVsdAoJfSwKCQoJLy8gbG9jYWxlCglpc1JUTDogZmFsc2UsCglmaXJzdERheTogMCwKCW1vbnRoTmFtZXM6IFsnSmFudWFyeScsJ0ZlYnJ1YXJ5JywnTWFyY2gnLCdBcHJpbCcsJ01heScsJ0p1bmUnLCdKdWx5JywnQXVndXN0JywnU2VwdGVtYmVyJywnT2N0b2JlcicsJ05vdmVtYmVyJywnRGVjZW1iZXInXSwKCW1vbnRoTmFtZXNTaG9ydDogWydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLCdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXSwKCWRheU5hbWVzOiBbJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J10sCglkYXlOYW1lc1Nob3J0OiBbJ1N1bicsJ01vbicsJ1R1ZScsJ1dlZCcsJ1RodScsJ0ZyaScsJ1NhdCddLAoJYnV0dG9uVGV4dDogewoJCXByZXY6ICcmbmJzcDsmIzk2Njg7Jm5ic3A7JywKCQluZXh0OiAnJm5ic3A7JiM5NjU4OyZuYnNwOycsCgkJcHJldlllYXI6ICcmbmJzcDsmbHQ7Jmx0OyZuYnNwOycsCgkJbmV4dFllYXI6ICcmbmJzcDsmZ3Q7Jmd0OyZuYnNwOycsCgkJdG9kYXk6ICd0b2RheScsCgkJbW9udGg6ICdtb250aCcsCgkJd2VlazogJ3dlZWsnLAoJCWRheTogJ2RheScKCX0sCgkKCS8vIGpxdWVyeS11aSB0aGVtaW5nCgl0aGVtZTogZmFsc2UsCglidXR0b25JY29uczogewoJCXByZXY6ICdjaXJjbGUtdHJpYW5nbGUtdycsCgkJbmV4dDogJ2NpcmNsZS10cmlhbmdsZS1lJwoJfSwKCQoJLy9zZWxlY3RhYmxlOiBmYWxzZSwKCXVuc2VsZWN0QXV0bzogdHJ1ZSwKCQoJZHJvcEFjY2VwdDogJyonCgkKfTsKCi8vIHJpZ2h0LXRvLWxlZnQgZGVmYXVsdHMKdmFyIHJ0bERlZmF1bHRzID0gewoJaGVhZGVyOiB7CgkJbGVmdDogJ25leHQscHJldiB0b2RheScsCgkJY2VudGVyOiAnJywKCQlyaWdodDogJ3RpdGxlJwoJfSwKCWJ1dHRvblRleHQ6IHsKCQlwcmV2OiAnJm5ic3A7JiM5NjU4OyZuYnNwOycsCgkJbmV4dDogJyZuYnNwOyYjOTY2ODsmbmJzcDsnLAoJCXByZXZZZWFyOiAnJm5ic3A7Jmd0OyZndDsmbmJzcDsnLAoJCW5leHRZZWFyOiAnJm5ic3A7Jmx0OyZsdDsmbmJzcDsnCgl9LAoJYnV0dG9uSWNvbnM6IHsKCQlwcmV2OiAnY2lyY2xlLXRyaWFuZ2xlLWUnLAoJCW5leHQ6ICdjaXJjbGUtdHJpYW5nbGUtdycKCX0KfTsKCgoKdmFyIGZjID0gJC5mdWxsQ2FsZW5kYXIgPSB7IHZlcnNpb246ICIxLjQuOSIgfTsKdmFyIGZjVmlld3MgPSBmYy52aWV3cyA9IHt9OwoKCiQuZm4uZnVsbENhbGVuZGFyID0gZnVuY3Rpb24ob3B0aW9ucykgewoKCgkvLyBtZXRob2QgY2FsbGluZwoJaWYgKHR5cGVvZiBvcHRpb25zID09ICdzdHJpbmcnKSB7CgkJdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwoJCXZhciByZXM7CgkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgY2FsZW5kYXIgPSAkLmRhdGEodGhpcywgJ2Z1bGxDYWxlbmRhcicpOwoJCQlpZiAoY2FsZW5kYXIgJiYgJC5pc0Z1bmN0aW9uKGNhbGVuZGFyW29wdGlvbnNdKSkgewoJCQkJdmFyIHIgPSBjYWxlbmRhcltvcHRpb25zXS5hcHBseShjYWxlbmRhciwgYXJncyk7CgkJCQlpZiAocmVzID09PSB1bmRlZmluZWQpIHsKCQkJCQlyZXMgPSByOwoJCQkJfQoJCQkJaWYgKG9wdGlvbnMgPT0gJ2Rlc3Ryb3knKSB7CgkJCQkJJC5yZW1vdmVEYXRhKHRoaXMsICdmdWxsQ2FsZW5kYXInKTsKCQkJCX0KCQkJfQoJCX0pOwoJCWlmIChyZXMgIT09IHVuZGVmaW5lZCkgewoJCQlyZXR1cm4gcmVzOwoJCX0KCQlyZXR1cm4gdGhpczsKCX0KCQoJCgkvLyB3b3VsZCBsaWtlIHRvIGhhdmUgdGhpcyBsb2dpYyBpbiBFdmVudE1hbmFnZXIsIGJ1dCBuZWVkcyB0byBoYXBwZW4gYmVmb3JlIG9wdGlvbnMgYXJlIHJlY3Vyc2l2ZWx5IGV4dGVuZGVkCgl2YXIgZXZlbnRTb3VyY2VzID0gb3B0aW9ucy5ldmVudFNvdXJjZXMgfHwgW107CglkZWxldGUgb3B0aW9ucy5ldmVudFNvdXJjZXM7CglpZiAob3B0aW9ucy5ldmVudHMpIHsKCQlldmVudFNvdXJjZXMucHVzaChvcHRpb25zLmV2ZW50cyk7CgkJZGVsZXRlIG9wdGlvbnMuZXZlbnRzOwoJfQoJCgoJb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LAoJCWRlZmF1bHRzLAoJCShvcHRpb25zLmlzUlRMIHx8IG9wdGlvbnMuaXNSVEw9PT11bmRlZmluZWQgJiYgZGVmYXVsdHMuaXNSVEwpID8gcnRsRGVmYXVsdHMgOiB7fSwKCQlvcHRpb25zCgkpOwoJCgkKCXRoaXMuZWFjaChmdW5jdGlvbihpLCBfZWxlbWVudCkgewoJCXZhciBlbGVtZW50ID0gJChfZWxlbWVudCk7CgkJdmFyIGNhbGVuZGFyID0gbmV3IENhbGVuZGFyKGVsZW1lbnQsIG9wdGlvbnMsIGV2ZW50U291cmNlcyk7CgkJZWxlbWVudC5kYXRhKCdmdWxsQ2FsZW5kYXInLCBjYWxlbmRhcik7IC8vIFRPRE86IGxvb2sgaW50byBtZW1vcnkgbGVhayBpbXBsaWNhdGlvbnMKCQljYWxlbmRhci5yZW5kZXIoKTsKCX0pOwoJCgkKCXJldHVybiB0aGlzOwoJCn07CgoKLy8gZnVuY3Rpb24gZm9yIGFkZGluZy9vdmVycmlkaW5nIGRlZmF1bHRzCmZ1bmN0aW9uIHNldERlZmF1bHRzKGQpIHsKCSQuZXh0ZW5kKHRydWUsIGRlZmF1bHRzLCBkKTsKfQoKCgogCmZ1bmN0aW9uIENhbGVuZGFyKGVsZW1lbnQsIG9wdGlvbnMsIGV2ZW50U291cmNlcykgewoJdmFyIHQgPSB0aGlzOwoJCgkKCS8vIGV4cG9ydHMKCXQub3B0aW9ucyA9IG9wdGlvbnM7Cgl0LnJlbmRlciA9IHJlbmRlcjsKCXQuZGVzdHJveSA9IGRlc3Ryb3k7Cgl0LnJlZmV0Y2hFdmVudHMgPSByZWZldGNoRXZlbnRzOwoJdC5yZXBvcnRFdmVudHMgPSByZXBvcnRFdmVudHM7Cgl0LnJlcG9ydEV2ZW50Q2hhbmdlID0gcmVwb3J0RXZlbnRDaGFuZ2U7Cgl0LmNoYW5nZVZpZXcgPSBjaGFuZ2VWaWV3OwoJdC5zZWxlY3QgPSBzZWxlY3Q7Cgl0LnVuc2VsZWN0ID0gdW5zZWxlY3Q7Cgl0LnByZXYgPSBwcmV2OwoJdC5uZXh0ID0gbmV4dDsKCXQucHJldlllYXIgPSBwcmV2WWVhcjsKCXQubmV4dFllYXIgPSBuZXh0WWVhcjsKCXQudG9kYXkgPSB0b2RheTsKCXQuZ290b0RhdGUgPSBnb3RvRGF0ZTsKCXQuaW5jcmVtZW50RGF0ZSA9IGluY3JlbWVudERhdGU7Cgl0LmZvcm1hdERhdGUgPSBmdW5jdGlvbihmb3JtYXQsIGRhdGUpIHsgcmV0dXJuIGZvcm1hdERhdGUoZm9ybWF0LCBkYXRlLCBvcHRpb25zKSB9OwoJdC5mb3JtYXREYXRlcyA9IGZ1bmN0aW9uKGZvcm1hdCwgZGF0ZTEsIGRhdGUyKSB7IHJldHVybiBmb3JtYXREYXRlcyhmb3JtYXQsIGRhdGUxLCBkYXRlMiwgb3B0aW9ucykgfTsKCXQuZ2V0RGF0ZSA9IGdldERhdGU7Cgl0LmdldFZpZXcgPSBnZXRWaWV3OwoJdC5vcHRpb24gPSBvcHRpb247Cgl0LnRyaWdnZXIgPSB0cmlnZ2VyOwoJCgkKCS8vIGltcG9ydHMKCUV2ZW50TWFuYWdlci5jYWxsKHQsIG9wdGlvbnMsIGV2ZW50U291cmNlcyk7Cgl2YXIgaXNGZXRjaE5lZWRlZCA9IHQuaXNGZXRjaE5lZWRlZDsKCXZhciBmZXRjaEV2ZW50cyA9IHQuZmV0Y2hFdmVudHM7CgkKCQoJLy8gbG9jYWxzCgl2YXIgX2VsZW1lbnQgPSBlbGVtZW50WzBdOwoJdmFyIGhlYWRlcjsKCXZhciBoZWFkZXJFbGVtZW50OwoJdmFyIGNvbnRlbnQ7Cgl2YXIgdG07IC8vIGZvciBtYWtpbmcgdGhlbWUgY2xhc3NlcwoJdmFyIGN1cnJlbnRWaWV3OwoJdmFyIHZpZXdJbnN0YW5jZXMgPSB7fTsKCXZhciBlbGVtZW50T3V0ZXJXaWR0aDsKCXZhciBzdWdnZXN0ZWRWaWV3SGVpZ2h0OwoJdmFyIGFic29sdXRlVmlld0VsZW1lbnQ7Cgl2YXIgcmVzaXplVUlEID0gMDsKCXZhciBpZ25vcmVXaW5kb3dSZXNpemUgPSAwOwoJdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwoJdmFyIGV2ZW50cyA9IFtdOwoJdmFyIF9kcmFnRWxlbWVudDsKCQoJCgkKCS8qIE1haW4gUmVuZGVyaW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJc2V0WU1EKGRhdGUsIG9wdGlvbnMueWVhciwgb3B0aW9ucy5tb250aCwgb3B0aW9ucy5kYXRlKTsKCQoJCglmdW5jdGlvbiByZW5kZXIoaW5jKSB7CgkJaWYgKCFjb250ZW50KSB7CgkJCWluaXRpYWxSZW5kZXIoKTsKCQl9ZWxzZXsKCQkJY2FsY1NpemUoKTsKCQkJbWFya1NpemVzRGlydHkoKTsKCQkJbWFya0V2ZW50c0RpcnR5KCk7CgkJCXJlbmRlclZpZXcoaW5jKTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gaW5pdGlhbFJlbmRlcigpIHsKCQl0bSA9IG9wdGlvbnMudGhlbWUgPyAndWknIDogJ2ZjJzsKCQllbGVtZW50LmFkZENsYXNzKCdmYycpOwoJCWlmIChvcHRpb25zLmlzUlRMKSB7CgkJCWVsZW1lbnQuYWRkQ2xhc3MoJ2ZjLXJ0bCcpOwoJCX0KCQlpZiAob3B0aW9ucy50aGVtZSkgewoJCQllbGVtZW50LmFkZENsYXNzKCd1aS13aWRnZXQnKTsKCQl9CgkJY29udGVudCA9ICQoIjxkaXYgY2xhc3M9J2ZjLWNvbnRlbnQgIiArIHRtICsgIi13aWRnZXQtY29udGVudCcgc3R5bGU9J3Bvc2l0aW9uOnJlbGF0aXZlJy8+IikKCQkJLnByZXBlbmRUbyhlbGVtZW50KTsKCQloZWFkZXIgPSBuZXcgSGVhZGVyKHQsIG9wdGlvbnMpOwoJCWhlYWRlckVsZW1lbnQgPSBoZWFkZXIucmVuZGVyKCk7CgkJaWYgKGhlYWRlckVsZW1lbnQpIHsKCQkJZWxlbWVudC5wcmVwZW5kKGhlYWRlckVsZW1lbnQpOwoJCX0KCQljaGFuZ2VWaWV3KG9wdGlvbnMuZGVmYXVsdFZpZXcpOwoJCSQod2luZG93KS5yZXNpemUod2luZG93UmVzaXplKTsKCQkvLyBuZWVkZWQgZm9yIElFIGluIGEgMHgwIGlmcmFtZSwgYi9jIHdoZW4gaXQgaXMgcmVzaXplZCwgbmV2ZXIgdHJpZ2dlcnMgYSB3aW5kb3dSZXNpemUKCQlpZiAoIWJvZHlWaXNpYmxlKCkpIHsKCQkJbGF0ZVJlbmRlcigpOwoJCX0KCX0KCQoJCgkvLyBjYWxsZWQgd2hlbiB3ZSBrbm93IHRoZSBjYWxlbmRhciBjb3VsZG4ndCBiZSByZW5kZXJlZCB3aGVuIGl0IHdhcyBpbml0aWFsaXplZCwKCS8vIGJ1dCB3ZSB0aGluayBpdCdzIHJlYWR5IG5vdwoJZnVuY3Rpb24gbGF0ZVJlbmRlcigpIHsKCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyBJRTcgbmVlZHMgdGhpcyBzbyBkaW1lbnNpb25zIGFyZSBjYWxjdWxhdGVkIGNvcnJlY3RseQoJCQlpZiAoIWN1cnJlbnRWaWV3LnN0YXJ0ICYmIGJvZHlWaXNpYmxlKCkpIHsgLy8gIWN1cnJlbnRWaWV3LnN0YXJ0IG1ha2VzIHN1cmUgdGhpcyBuZXZlciBoYXBwZW5zIG1vcmUgdGhhbiBvbmNlCgkJCQlyZW5kZXJWaWV3KCk7CgkJCX0KCQl9LDApOwoJfQoJCgkKCWZ1bmN0aW9uIGRlc3Ryb3koKSB7CgkJJCh3aW5kb3cpLnVuYmluZCgncmVzaXplJywgd2luZG93UmVzaXplKTsKCQloZWFkZXIuZGVzdHJveSgpOwoJCWNvbnRlbnQucmVtb3ZlKCk7CgkJZWxlbWVudC5yZW1vdmVDbGFzcygnZmMgZmMtcnRsIGZjLXVpLXdpZGdldCcpOwoJfQoJCgkKCQoJZnVuY3Rpb24gZWxlbWVudFZpc2libGUoKSB7CgkJcmV0dXJuIF9lbGVtZW50Lm9mZnNldFdpZHRoICE9PSAwOwoJfQoJCgkKCWZ1bmN0aW9uIGJvZHlWaXNpYmxlKCkgewoJCXJldHVybiAkKCdib2R5JylbMF0ub2Zmc2V0V2lkdGggIT09IDA7Cgl9CgkKCQoJCgkvKiBWaWV3IFJlbmRlcmluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIGNoYW5nZVZpZXcobmV3Vmlld05hbWUpIHsKCQlpZiAoIWN1cnJlbnRWaWV3IHx8IG5ld1ZpZXdOYW1lICE9IGN1cnJlbnRWaWV3Lm5hbWUpIHsKCQkJaWdub3JlV2luZG93UmVzaXplKys7IC8vIGJlY2F1c2Ugc2V0TWluSGVpZ2h0IG1pZ2h0IGNoYW5nZSB0aGUgaGVpZ2h0IGJlZm9yZSByZW5kZXIgKGFuZCBzdWJzZXF1ZW50bHkgc2V0U2l6ZSkgaXMgcmVhY2hlZAoKCQkJdW5zZWxlY3QoKTsKCQkJCgkJCXZhciBvbGRWaWV3ID0gY3VycmVudFZpZXc7CgkJCXZhciBuZXdWaWV3RWxlbWVudDsKCQkJCQoJCQlpZiAob2xkVmlldykgewoJCQkJKG9sZFZpZXcuYmVmb3JlSGlkZSB8fCBub29wKSgpOyAvLyBjYWxsZWQgYmVmb3JlIGNoYW5naW5nIG1pbi1oZWlnaHQuIGlmIGNhbGxlZCBhZnRlciwgc2Nyb2xsIHN0YXRlIGlzIHJlc2V0IChpbiBPcGVyYSkKCQkJCXNldE1pbkhlaWdodChjb250ZW50LCBjb250ZW50LmhlaWdodCgpKTsKCQkJCW9sZFZpZXcuZWxlbWVudC5oaWRlKCk7CgkJCX1lbHNlewoJCQkJc2V0TWluSGVpZ2h0KGNvbnRlbnQsIDEpOyAvLyBuZWVkcyB0byBiZSAxIChub3QgMCkgZm9yIElFNywgb3IgZWxzZSB2aWV3IGRpbWVuc2lvbnMgbWlzY2FsY3VsYXRlZAoJCQl9CgkJCWNvbnRlbnQuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTsKCQkJCgkJCWN1cnJlbnRWaWV3ID0gdmlld0luc3RhbmNlc1tuZXdWaWV3TmFtZV07CgkJCWlmIChjdXJyZW50VmlldykgewoJCQkJY3VycmVudFZpZXcuZWxlbWVudC5zaG93KCk7CgkJCX1lbHNlewoJCQkJY3VycmVudFZpZXcgPSB2aWV3SW5zdGFuY2VzW25ld1ZpZXdOYW1lXSA9IG5ldyBmY1ZpZXdzW25ld1ZpZXdOYW1lXSgKCQkJCQluZXdWaWV3RWxlbWVudCA9IGFic29sdXRlVmlld0VsZW1lbnQgPQoJCQkJCQkkKCI8ZGl2IGNsYXNzPSdmYy12aWV3IGZjLXZpZXctIiArIG5ld1ZpZXdOYW1lICsgIicgc3R5bGU9J3Bvc2l0aW9uOmFic29sdXRlJy8+IikKCQkJCQkJCS5hcHBlbmRUbyhjb250ZW50KSwKCQkJCQl0IC8vIHRoZSBjYWxlbmRhciBvYmplY3QKCQkJCSk7CgkJCX0KCQkJCgkJCWlmIChvbGRWaWV3KSB7CgkJCQloZWFkZXIuZGVhY3RpdmF0ZUJ1dHRvbihvbGRWaWV3Lm5hbWUpOwoJCQl9CgkJCWhlYWRlci5hY3RpdmF0ZUJ1dHRvbihuZXdWaWV3TmFtZSk7CgkJCQoJCQlyZW5kZXJWaWV3KCk7IC8vIGFmdGVyIGhlaWdodCBoYXMgYmVlbiBzZXQsIHdpbGwgbWFrZSBhYnNvbHV0ZVZpZXdFbGVtZW50J3MgcG9zaXRpb249cmVsYXRpdmUsIHRoZW4gc2V0IHRvIG51bGwKCQkJCgkJCWNvbnRlbnQuY3NzKCdvdmVyZmxvdycsICcnKTsKCQkJaWYgKG9sZFZpZXcpIHsKCQkJCXNldE1pbkhlaWdodChjb250ZW50LCAxKTsKCQkJfQoJCQkKCQkJaWYgKCFuZXdWaWV3RWxlbWVudCkgewoJCQkJKGN1cnJlbnRWaWV3LmFmdGVyU2hvdyB8fCBub29wKSgpOyAvLyBjYWxsZWQgYWZ0ZXIgc2V0dGluZyBtaW4taGVpZ2h0L292ZXJmbG93LCBzbyBpbiBmaW5hbCBzY3JvbGwgc3RhdGUgKGZvciBPcGVyYSkKCQkJfQoJCQkKCQkJaWdub3JlV2luZG93UmVzaXplLS07CgkJfQoJfQoJCgkKCQoJZnVuY3Rpb24gcmVuZGVyVmlldyhpbmMpIHsKCQlpZiAoZWxlbWVudFZpc2libGUoKSkgewoJCQlpZ25vcmVXaW5kb3dSZXNpemUrKzsgLy8gYmVjYXVzZSByZW5kZXJFdmVudHMgbWlnaHQgdGVtcG9yYXJpbHkgY2hhbmdlIHRoZSBoZWlnaHQgYmVmb3JlIHNldFNpemUgaXMgcmVhY2hlZAoKCQkJdW5zZWxlY3QoKTsKCQkJCgkJCWlmIChzdWdnZXN0ZWRWaWV3SGVpZ2h0ID09PSB1bmRlZmluZWQpIHsKCQkJCWNhbGNTaXplKCk7CgkJCX0KCQkJCgkJCXZhciBmb3JjZUV2ZW50UmVuZGVyID0gZmFsc2U7CgkJCWlmICghY3VycmVudFZpZXcuc3RhcnQgfHwgaW5jIHx8IGRhdGUgPCBjdXJyZW50Vmlldy5zdGFydCB8fCBkYXRlID49IGN1cnJlbnRWaWV3LmVuZCkgewoJCQkJLy8gdmlldyBtdXN0IHJlbmRlciBhbiBlbnRpcmUgbmV3IGRhdGUgcmFuZ2UgKGFuZCByZWZldGNoL3JlbmRlciBldmVudHMpCgkJCQljdXJyZW50Vmlldy5yZW5kZXIoZGF0ZSwgaW5jIHx8IDApOyAvLyByZXNwb25zaWJsZSBmb3IgY2xlYXJpbmcgZXZlbnRzCgkJCQlzZXRTaXplKHRydWUpOwoJCQkJZm9yY2VFdmVudFJlbmRlciA9IHRydWU7CgkJCX0KCQkJZWxzZSBpZiAoY3VycmVudFZpZXcuc2l6ZURpcnR5KSB7CgkJCQkvLyB2aWV3IG11c3QgcmVzaXplIChhbmQgcmVyZW5kZXIgZXZlbnRzKQoJCQkJY3VycmVudFZpZXcuY2xlYXJFdmVudHMoKTsKCQkJCXNldFNpemUoKTsKCQkJCWZvcmNlRXZlbnRSZW5kZXIgPSB0cnVlOwoJCQl9CgkJCWVsc2UgaWYgKGN1cnJlbnRWaWV3LmV2ZW50c0RpcnR5KSB7CgkJCQljdXJyZW50Vmlldy5jbGVhckV2ZW50cygpOwoJCQkJZm9yY2VFdmVudFJlbmRlciA9IHRydWU7CgkJCX0KCQkJY3VycmVudFZpZXcuc2l6ZURpcnR5ID0gZmFsc2U7CgkJCWN1cnJlbnRWaWV3LmV2ZW50c0RpcnR5ID0gZmFsc2U7CgkJCXVwZGF0ZUV2ZW50cyhmb3JjZUV2ZW50UmVuZGVyKTsKCQkJCgkJCWVsZW1lbnRPdXRlcldpZHRoID0gZWxlbWVudC5vdXRlcldpZHRoKCk7CgkJCQoJCQloZWFkZXIudXBkYXRlVGl0bGUoY3VycmVudFZpZXcudGl0bGUpOwoJCQl2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpOwoJCQlpZiAodG9kYXkgPj0gY3VycmVudFZpZXcuc3RhcnQgJiYgdG9kYXkgPCBjdXJyZW50Vmlldy5lbmQpIHsKCQkJCWhlYWRlci5kaXNhYmxlQnV0dG9uKCd0b2RheScpOwoJCQl9ZWxzZXsKCQkJCWhlYWRlci5lbmFibGVCdXR0b24oJ3RvZGF5Jyk7CgkJCX0KCQkJCgkJCWlnbm9yZVdpbmRvd1Jlc2l6ZS0tOwoJCQljdXJyZW50Vmlldy50cmlnZ2VyKCd2aWV3RGlzcGxheScsIF9lbGVtZW50KTsKCQl9Cgl9CgkKCQoJCgkvKiBSZXNpemluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7CgkJbWFya1NpemVzRGlydHkoKTsKCQlpZiAoZWxlbWVudFZpc2libGUoKSkgewoJCQljYWxjU2l6ZSgpOwoJCQlzZXRTaXplKCk7CgkJCXVuc2VsZWN0KCk7CgkJCWN1cnJlbnRWaWV3LmNsZWFyRXZlbnRzKCk7CgkJCWN1cnJlbnRWaWV3LnJlbmRlckV2ZW50cyhldmVudHMpOwoJCQljdXJyZW50Vmlldy5zaXplRGlydHkgPSBmYWxzZTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gbWFya1NpemVzRGlydHkoKSB7CgkJJC5lYWNoKHZpZXdJbnN0YW5jZXMsIGZ1bmN0aW9uKGksIGluc3QpIHsKCQkJaW5zdC5zaXplRGlydHkgPSB0cnVlOwoJCX0pOwoJfQoJCgkKCWZ1bmN0aW9uIGNhbGNTaXplKCkgewoJCWlmIChvcHRpb25zLmNvbnRlbnRIZWlnaHQpIHsKCQkJc3VnZ2VzdGVkVmlld0hlaWdodCA9IG9wdGlvbnMuY29udGVudEhlaWdodDsKCQl9CgkJZWxzZSBpZiAob3B0aW9ucy5oZWlnaHQpIHsKCQkJc3VnZ2VzdGVkVmlld0hlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IC0gKGhlYWRlckVsZW1lbnQgPyBoZWFkZXJFbGVtZW50LmhlaWdodCgpIDogMCkgLSB2c2lkZXMoY29udGVudFswXSk7CgkJfQoJCWVsc2UgewoJCQlzdWdnZXN0ZWRWaWV3SGVpZ2h0ID0gTWF0aC5yb3VuZChjb250ZW50LndpZHRoKCkgLyBNYXRoLm1heChvcHRpb25zLmFzcGVjdFJhdGlvLCAuNSkpOwoJCX0KCX0KCQoJCglmdW5jdGlvbiBzZXRTaXplKGRhdGVDaGFuZ2VkKSB7IC8vIHRvZG86IGRhdGVDaGFuZ2VkPwoJCWlnbm9yZVdpbmRvd1Jlc2l6ZSsrOwoJCWN1cnJlbnRWaWV3LnNldEhlaWdodChzdWdnZXN0ZWRWaWV3SGVpZ2h0LCBkYXRlQ2hhbmdlZCk7CgkJaWYgKGFic29sdXRlVmlld0VsZW1lbnQpIHsKCQkJYWJzb2x1dGVWaWV3RWxlbWVudC5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7CgkJCWFic29sdXRlVmlld0VsZW1lbnQgPSBudWxsOwoJCX0KCQljdXJyZW50Vmlldy5zZXRXaWR0aChjb250ZW50LndpZHRoKCksIGRhdGVDaGFuZ2VkKTsKCQlpZ25vcmVXaW5kb3dSZXNpemUtLTsKCX0KCQoJCglmdW5jdGlvbiB3aW5kb3dSZXNpemUoKSB7CgkJaWYgKCFpZ25vcmVXaW5kb3dSZXNpemUpIHsKCQkJaWYgKGN1cnJlbnRWaWV3LnN0YXJ0KSB7IC8vIHZpZXcgaGFzIGFscmVhZHkgYmVlbiByZW5kZXJlZAoJCQkJdmFyIHVpZCA9ICsrcmVzaXplVUlEOwoJCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8gYWRkIGEgZGVsYXkKCQkJCQlpZiAodWlkID09IHJlc2l6ZVVJRCAmJiAhaWdub3JlV2luZG93UmVzaXplICYmIGVsZW1lbnRWaXNpYmxlKCkpIHsKCQkJCQkJaWYgKGVsZW1lbnRPdXRlcldpZHRoICE9IChlbGVtZW50T3V0ZXJXaWR0aCA9IGVsZW1lbnQub3V0ZXJXaWR0aCgpKSkgewoJCQkJCQkJaWdub3JlV2luZG93UmVzaXplKys7IC8vIGluIGNhc2UgdGhlIHdpbmRvd1Jlc2l6ZSBjYWxsYmFjayBjaGFuZ2VzIHRoZSBoZWlnaHQKCQkJCQkJCXVwZGF0ZVNpemUoKTsKCQkJCQkJCWN1cnJlbnRWaWV3LnRyaWdnZXIoJ3dpbmRvd1Jlc2l6ZScsIF9lbGVtZW50KTsKCQkJCQkJCWlnbm9yZVdpbmRvd1Jlc2l6ZS0tOwoJCQkJCQl9CgkJCQkJfQoJCQkJfSwgMjAwKTsKCQkJfWVsc2V7CgkJCQkvLyBjYWxlbmRhciBtdXN0IGhhdmUgYmVlbiBpbml0aWFsaXplZCBpbiBhIDB4MCBpZnJhbWUgdGhhdCBoYXMganVzdCBiZWVuIHJlc2l6ZWQKCQkJCWxhdGVSZW5kZXIoKTsKCQkJfQoJCX0KCX0KCQoJCgkKCS8qIEV2ZW50IEZldGNoaW5nL1JlbmRlcmluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCS8vIGZldGNoZXMgZXZlbnRzIGlmIG5lY2Vzc2FyeSwgcmVyZW5kZXJzIGV2ZW50cyBpZiBuZWNlc3NhcnkgKG9yIGlmIGZvcmNlZCkKCWZ1bmN0aW9uIHVwZGF0ZUV2ZW50cyhmb3JjZVJlbmRlcikgewoJCWlmICghb3B0aW9ucy5sYXp5RmV0Y2hpbmcgfHwgaXNGZXRjaE5lZWRlZChjdXJyZW50Vmlldy52aXNTdGFydCwgY3VycmVudFZpZXcudmlzRW5kKSkgewoJCQlyZWZldGNoRXZlbnRzKCk7CgkJfQoJCWVsc2UgaWYgKGZvcmNlUmVuZGVyKSB7CgkJCXJlcmVuZGVyRXZlbnRzKCk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIHJlZmV0Y2hFdmVudHMoKSB7CgkJZmV0Y2hFdmVudHMoY3VycmVudFZpZXcudmlzU3RhcnQsIGN1cnJlbnRWaWV3LnZpc0VuZCk7IC8vIHdpbGwgY2FsbCByZXBvcnRFdmVudHMKCX0KCQoJCgkvLyBjYWxsZWQgd2hlbiBldmVudCBkYXRhIGFycml2ZXMKCWZ1bmN0aW9uIHJlcG9ydEV2ZW50cyhfZXZlbnRzKSB7CgkJZXZlbnRzID0gX2V2ZW50czsKCQlyZXJlbmRlckV2ZW50cygpOwoJfQoJCgkKCS8vIGNhbGxlZCB3aGVuIGEgc2luZ2xlIGV2ZW50J3MgZGF0YSBoYXMgYmVlbiBjaGFuZ2VkCglmdW5jdGlvbiByZXBvcnRFdmVudENoYW5nZShldmVudElEKSB7CgkJcmVyZW5kZXJFdmVudHMoZXZlbnRJRCk7Cgl9CgkKCQoJLy8gYXR0ZW1wdHMgdG8gcmVyZW5kZXJFdmVudHMKCWZ1bmN0aW9uIHJlcmVuZGVyRXZlbnRzKG1vZGlmaWVkRXZlbnRJRCkgewoJCW1hcmtFdmVudHNEaXJ0eSgpOwoJCWlmIChlbGVtZW50VmlzaWJsZSgpKSB7CgkJCWN1cnJlbnRWaWV3LmNsZWFyRXZlbnRzKCk7CgkJCWN1cnJlbnRWaWV3LnJlbmRlckV2ZW50cyhldmVudHMsIG1vZGlmaWVkRXZlbnRJRCk7CgkJCWN1cnJlbnRWaWV3LmV2ZW50c0RpcnR5ID0gZmFsc2U7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIG1hcmtFdmVudHNEaXJ0eSgpIHsKCQkkLmVhY2godmlld0luc3RhbmNlcywgZnVuY3Rpb24oaSwgaW5zdCkgewoJCQlpbnN0LmV2ZW50c0RpcnR5ID0gdHJ1ZTsKCQl9KTsKCX0KCQoKCgkvKiBTZWxlY3Rpb24KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoKCWZ1bmN0aW9uIHNlbGVjdChzdGFydCwgZW5kLCBhbGxEYXkpIHsKCQljdXJyZW50Vmlldy5zZWxlY3Qoc3RhcnQsIGVuZCwgYWxsRGF5PT09dW5kZWZpbmVkID8gdHJ1ZSA6IGFsbERheSk7Cgl9CgkKCglmdW5jdGlvbiB1bnNlbGVjdCgpIHsgLy8gc2FmZSB0byBiZSBjYWxsZWQgYmVmb3JlIHJlbmRlclZpZXcKCQlpZiAoY3VycmVudFZpZXcpIHsKCQkJY3VycmVudFZpZXcudW5zZWxlY3QoKTsKCQl9Cgl9CgkKCQoJCgkvKiBEYXRlCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gcHJldigpIHsKCQlyZW5kZXJWaWV3KC0xKTsKCX0KCQoJCglmdW5jdGlvbiBuZXh0KCkgewoJCXJlbmRlclZpZXcoMSk7Cgl9CgkKCQoJZnVuY3Rpb24gcHJldlllYXIoKSB7CgkJYWRkWWVhcnMoZGF0ZSwgLTEpOwoJCXJlbmRlclZpZXcoKTsKCX0KCQoJCglmdW5jdGlvbiBuZXh0WWVhcigpIHsKCQlhZGRZZWFycyhkYXRlLCAxKTsKCQlyZW5kZXJWaWV3KCk7Cgl9CgkKCQoJZnVuY3Rpb24gdG9kYXkoKSB7CgkJZGF0ZSA9IG5ldyBEYXRlKCk7CgkJcmVuZGVyVmlldygpOwoJfQoJCgkKCWZ1bmN0aW9uIGdvdG9EYXRlKHllYXIsIG1vbnRoLCBkYXRlT2ZNb250aCkgewoJCWlmICh5ZWFyIGluc3RhbmNlb2YgRGF0ZSkgewoJCQlkYXRlID0gY2xvbmVEYXRlKHllYXIpOyAvLyBwcm92aWRlZCAxIGFyZ3VtZW50LCBhIERhdGUKCQl9ZWxzZXsKCQkJc2V0WU1EKGRhdGUsIHllYXIsIG1vbnRoLCBkYXRlT2ZNb250aCk7CgkJfQoJCXJlbmRlclZpZXcoKTsKCX0KCQoJCglmdW5jdGlvbiBpbmNyZW1lbnREYXRlKHllYXJzLCBtb250aHMsIGRheXMpIHsKCQlpZiAoeWVhcnMgIT09IHVuZGVmaW5lZCkgewoJCQlhZGRZZWFycyhkYXRlLCB5ZWFycyk7CgkJfQoJCWlmIChtb250aHMgIT09IHVuZGVmaW5lZCkgewoJCQlhZGRNb250aHMoZGF0ZSwgbW9udGhzKTsKCQl9CgkJaWYgKGRheXMgIT09IHVuZGVmaW5lZCkgewoJCQlhZGREYXlzKGRhdGUsIGRheXMpOwoJCX0KCQlyZW5kZXJWaWV3KCk7Cgl9CgkKCQoJZnVuY3Rpb24gZ2V0RGF0ZSgpIHsKCQlyZXR1cm4gY2xvbmVEYXRlKGRhdGUpOwoJfQoJCgkKCQoJLyogTWlzYwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIGdldFZpZXcoKSB7CgkJcmV0dXJuIGN1cnJlbnRWaWV3OwoJfQoJCgkKCWZ1bmN0aW9uIG9wdGlvbihuYW1lLCB2YWx1ZSkgewoJCWlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CgkJCXJldHVybiBvcHRpb25zW25hbWVdOwoJCX0KCQlpZiAobmFtZSA9PSAnaGVpZ2h0JyB8fCBuYW1lID09ICdjb250ZW50SGVpZ2h0JyB8fCBuYW1lID09ICdhc3BlY3RSYXRpbycpIHsKCQkJb3B0aW9uc1tuYW1lXSA9IHZhbHVlOwoJCQl1cGRhdGVTaXplKCk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIHRyaWdnZXIobmFtZSwgdGhpc09iaikgewoJCWlmIChvcHRpb25zW25hbWVdKSB7CgkJCXJldHVybiBvcHRpb25zW25hbWVdLmFwcGx5KAoJCQkJdGhpc09iaiB8fCBfZWxlbWVudCwKCQkJCUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikKCQkJKTsKCQl9Cgl9CgkKCQoJCgkvKiBFeHRlcm5hbCBEcmFnZ2luZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJaWYgKG9wdGlvbnMuZHJvcHBhYmxlKSB7CgkJJChkb2N1bWVudCkKCQkJLmJpbmQoJ2RyYWdzdGFydCcsIGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJdmFyIF9lID0gZXYudGFyZ2V0OwoJCQkJdmFyIGUgPSAkKF9lKTsKCQkJCWlmICghZS5wYXJlbnRzKCcuZmMnKS5sZW5ndGgpIHsgLy8gbm90IGFscmVhZHkgaW5zaWRlIGEgY2FsZW5kYXIKCQkJCQl2YXIgYWNjZXB0ID0gb3B0aW9ucy5kcm9wQWNjZXB0OwoJCQkJCWlmICgkLmlzRnVuY3Rpb24oYWNjZXB0KSA/IGFjY2VwdC5jYWxsKF9lLCBlKSA6IGUuaXMoYWNjZXB0KSkgewoJCQkJCQlfZHJhZ0VsZW1lbnQgPSBfZTsKCQkJCQkJY3VycmVudFZpZXcuZHJhZ1N0YXJ0KF9kcmFnRWxlbWVudCwgZXYsIHVpKTsKCQkJCQl9CgkJCQl9CgkJCX0pCgkJCS5iaW5kKCdkcmFnc3RvcCcsIGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJaWYgKF9kcmFnRWxlbWVudCkgewoJCQkJCWN1cnJlbnRWaWV3LmRyYWdTdG9wKF9kcmFnRWxlbWVudCwgZXYsIHVpKTsKCQkJCQlfZHJhZ0VsZW1lbnQgPSBudWxsOwoJCQkJfQoJCQl9KTsKCX0KCQoKfQoKZnVuY3Rpb24gSGVhZGVyKGNhbGVuZGFyLCBvcHRpb25zKSB7Cgl2YXIgdCA9IHRoaXM7CgkKCQoJLy8gZXhwb3J0cwoJdC5yZW5kZXIgPSByZW5kZXI7Cgl0LmRlc3Ryb3kgPSBkZXN0cm95OwoJdC51cGRhdGVUaXRsZSA9IHVwZGF0ZVRpdGxlOwoJdC5hY3RpdmF0ZUJ1dHRvbiA9IGFjdGl2YXRlQnV0dG9uOwoJdC5kZWFjdGl2YXRlQnV0dG9uID0gZGVhY3RpdmF0ZUJ1dHRvbjsKCXQuZGlzYWJsZUJ1dHRvbiA9IGRpc2FibGVCdXR0b247Cgl0LmVuYWJsZUJ1dHRvbiA9IGVuYWJsZUJ1dHRvbjsKCQoJCgkvLyBsb2NhbHMKCXZhciBlbGVtZW50ID0gJChbXSk7Cgl2YXIgdG07CgkKCgoJZnVuY3Rpb24gcmVuZGVyKCkgewoJCXRtID0gb3B0aW9ucy50aGVtZSA/ICd1aScgOiAnZmMnOwoJCXZhciBzZWN0aW9ucyA9IG9wdGlvbnMuaGVhZGVyOwoJCWlmIChzZWN0aW9ucykgewoJCQllbGVtZW50ID0gJCgiPHRhYmxlIGNsYXNzPSdmYy1oZWFkZXInLz4iKQoJCQkJLmFwcGVuZCgkKCI8dHIvPiIpCgkJCQkJLmFwcGVuZCgkKCI8dGQgY2xhc3M9J2ZjLWhlYWRlci1sZWZ0Jy8+IikKCQkJCQkJLmFwcGVuZChyZW5kZXJTZWN0aW9uKHNlY3Rpb25zLmxlZnQpKSkKCQkJCQkuYXBwZW5kKCQoIjx0ZCBjbGFzcz0nZmMtaGVhZGVyLWNlbnRlcicvPiIpCgkJCQkJCS5hcHBlbmQocmVuZGVyU2VjdGlvbihzZWN0aW9ucy5jZW50ZXIpKSkKCQkJCQkuYXBwZW5kKCQoIjx0ZCBjbGFzcz0nZmMtaGVhZGVyLXJpZ2h0Jy8+IikKCQkJCQkJLmFwcGVuZChyZW5kZXJTZWN0aW9uKHNlY3Rpb25zLnJpZ2h0KSkpKTsKCQkJcmV0dXJuIGVsZW1lbnQ7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIGRlc3Ryb3koKSB7CgkJZWxlbWVudC5yZW1vdmUoKTsKCX0KCQoJCglmdW5jdGlvbiByZW5kZXJTZWN0aW9uKGJ1dHRvblN0cikgewoJCWlmIChidXR0b25TdHIpIHsKCQkJdmFyIHRyID0gJCgiPHRyLz4iKTsKCQkJJC5lYWNoKGJ1dHRvblN0ci5zcGxpdCgnICcpLCBmdW5jdGlvbihpKSB7CgkJCQlpZiAoaSA+IDApIHsKCQkJCQl0ci5hcHBlbmQoIjx0ZD48c3BhbiBjbGFzcz0nZmMtaGVhZGVyLXNwYWNlJy8+PC90ZD4iKTsKCQkJCX0KCQkJCXZhciBwcmV2QnV0dG9uOwoJCQkJJC5lYWNoKHRoaXMuc3BsaXQoJywnKSwgZnVuY3Rpb24oaiwgYnV0dG9uTmFtZSkgewoJCQkJCWlmIChidXR0b25OYW1lID09ICd0aXRsZScpIHsKCQkJCQkJdHIuYXBwZW5kKCI8dGQ+PGgyIGNsYXNzPSdmYy1oZWFkZXItdGl0bGUnPiZuYnNwOzwvaDI+PC90ZD4iKTsKCQkJCQkJaWYgKHByZXZCdXR0b24pIHsKCQkJCQkJCXByZXZCdXR0b24uYWRkQ2xhc3ModG0gKyAnLWNvcm5lci1yaWdodCcpOwoJCQkJCQl9CgkJCQkJCXByZXZCdXR0b24gPSBudWxsOwoJCQkJCX1lbHNlewoJCQkJCQl2YXIgYnV0dG9uQ2xpY2s7CgkJCQkJCWlmIChjYWxlbmRhcltidXR0b25OYW1lXSkgewoJCQkJCQkJYnV0dG9uQ2xpY2sgPSBjYWxlbmRhcltidXR0b25OYW1lXTsgLy8gY2FsZW5kYXIgbWV0aG9kCgkJCQkJCX0KCQkJCQkJZWxzZSBpZiAoZmNWaWV3c1tidXR0b25OYW1lXSkgewoJCQkJCQkJYnV0dG9uQ2xpY2sgPSBmdW5jdGlvbigpIHsKCQkJCQkJCQlidXR0b24ucmVtb3ZlQ2xhc3ModG0gKyAnLXN0YXRlLWhvdmVyJyk7IC8vIGZvcmdldCB3aHkKCQkJCQkJCQljYWxlbmRhci5jaGFuZ2VWaWV3KGJ1dHRvbk5hbWUpOwoJCQkJCQkJfTsKCQkJCQkJfQoJCQkJCQlpZiAoYnV0dG9uQ2xpY2spIHsKCQkJCQkJCWlmIChwcmV2QnV0dG9uKSB7CgkJCQkJCQkJcHJldkJ1dHRvbi5hZGRDbGFzcyh0bSArICctbm8tcmlnaHQnKTsKCQkJCQkJCX0KCQkJCQkJCXZhciBidXR0b247CgkJCQkJCQl2YXIgaWNvbiA9IG9wdGlvbnMudGhlbWUgPyBzbWFydFByb3BlcnR5KG9wdGlvbnMuYnV0dG9uSWNvbnMsIGJ1dHRvbk5hbWUpIDogbnVsbDsKCQkJCQkJCXZhciB0ZXh0ID0gc21hcnRQcm9wZXJ0eShvcHRpb25zLmJ1dHRvblRleHQsIGJ1dHRvbk5hbWUpOwoJCQkJCQkJaWYgKGljb24pIHsKCQkJCQkJCQlidXR0b24gPSAkKCI8ZGl2IGNsYXNzPSdmYy1idXR0b24tIiArIGJ1dHRvbk5hbWUgKyAiIHVpLXN0YXRlLWRlZmF1bHQnPiIgKwoJCQkJCQkJCQkiPGE+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi0iICsgaWNvbiArICInLz48L2E+PC9kaXY+Iik7CgkJCQkJCQl9CgkJCQkJCQllbHNlIGlmICh0ZXh0KSB7CgkJCQkJCQkJYnV0dG9uID0gJCgiPGRpdiBjbGFzcz0nZmMtYnV0dG9uLSIgKyBidXR0b25OYW1lICsgIiAiICsgdG0gKyAiLXN0YXRlLWRlZmF1bHQnPiIgKwoJCQkJCQkJCQkiPGE+PHNwYW4+IiArIHRleHQgKyAiPC9zcGFuPjwvYT48L2Rpdj4iKTsKCQkJCQkJCX0KCQkJCQkJCWlmIChidXR0b24pIHsKCQkJCQkJCQlidXR0b24KCQkJCQkJCQkJLmNsaWNrKGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkJaWYgKCFidXR0b24uaGFzQ2xhc3ModG0gKyAnLXN0YXRlLWRpc2FibGVkJykpIHsKCQkJCQkJCQkJCQlidXR0b25DbGljaygpOwoJCQkJCQkJCQkJfQoJCQkJCQkJCQl9KQoJCQkJCQkJCQkubW91c2Vkb3duKGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkJYnV0dG9uCgkJCQkJCQkJCQkJLm5vdCgnLicgKyB0bSArICctc3RhdGUtYWN0aXZlJykKCQkJCQkJCQkJCQkubm90KCcuJyArIHRtICsgJy1zdGF0ZS1kaXNhYmxlZCcpCgkJCQkJCQkJCQkJLmFkZENsYXNzKHRtICsgJy1zdGF0ZS1kb3duJyk7CgkJCQkJCQkJCX0pCgkJCQkJCQkJCS5tb3VzZXVwKGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkJYnV0dG9uLnJlbW92ZUNsYXNzKHRtICsgJy1zdGF0ZS1kb3duJyk7CgkJCQkJCQkJCX0pCgkJCQkJCQkJCS5ob3ZlcigKCQkJCQkJCQkJCWZ1bmN0aW9uKCkgewoJCQkJCQkJCQkJCWJ1dHRvbgoJCQkJCQkJCQkJCQkubm90KCcuJyArIHRtICsgJy1zdGF0ZS1hY3RpdmUnKQoJCQkJCQkJCQkJCQkubm90KCcuJyArIHRtICsgJy1zdGF0ZS1kaXNhYmxlZCcpCgkJCQkJCQkJCQkJCS5hZGRDbGFzcyh0bSArICctc3RhdGUtaG92ZXInKTsKCQkJCQkJCQkJCX0sCgkJCQkJCQkJCQlmdW5jdGlvbigpIHsKCQkJCQkJCQkJCQlidXR0b24KCQkJCQkJCQkJCQkJLnJlbW92ZUNsYXNzKHRtICsgJy1zdGF0ZS1ob3ZlcicpCgkJCQkJCQkJCQkJCS5yZW1vdmVDbGFzcyh0bSArICctc3RhdGUtZG93bicpOwoJCQkJCQkJCQkJfQoJCQkJCQkJCQkpCgkJCQkJCQkJCS5hcHBlbmRUbygkKCI8dGQvPiIpLmFwcGVuZFRvKHRyKSk7CgkJCQkJCQkJaWYgKHByZXZCdXR0b24pIHsKCQkJCQkJCQkJcHJldkJ1dHRvbi5hZGRDbGFzcyh0bSArICctbm8tcmlnaHQnKTsKCQkJCQkJCQl9ZWxzZXsKCQkJCQkJCQkJYnV0dG9uLmFkZENsYXNzKHRtICsgJy1jb3JuZXItbGVmdCcpOwoJCQkJCQkJCX0KCQkJCQkJCQlwcmV2QnV0dG9uID0gYnV0dG9uOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfSk7CgkJCQlpZiAocHJldkJ1dHRvbikgewoJCQkJCXByZXZCdXR0b24uYWRkQ2xhc3ModG0gKyAnLWNvcm5lci1yaWdodCcpOwoJCQkJfQoJCQl9KTsKCQkJcmV0dXJuICQoIjx0YWJsZS8+IikuYXBwZW5kKHRyKTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gdXBkYXRlVGl0bGUoaHRtbCkgewoJCWVsZW1lbnQuZmluZCgnaDIuZmMtaGVhZGVyLXRpdGxlJykKCQkJLmh0bWwoaHRtbCk7Cgl9CgkKCQoJZnVuY3Rpb24gYWN0aXZhdGVCdXR0b24oYnV0dG9uTmFtZSkgewoJCWVsZW1lbnQuZmluZCgnZGl2LmZjLWJ1dHRvbi0nICsgYnV0dG9uTmFtZSkKCQkJLmFkZENsYXNzKHRtICsgJy1zdGF0ZS1hY3RpdmUnKTsKCX0KCQoJCglmdW5jdGlvbiBkZWFjdGl2YXRlQnV0dG9uKGJ1dHRvbk5hbWUpIHsKCQllbGVtZW50LmZpbmQoJ2Rpdi5mYy1idXR0b24tJyArIGJ1dHRvbk5hbWUpCgkJCS5yZW1vdmVDbGFzcyh0bSArICctc3RhdGUtYWN0aXZlJyk7Cgl9CgkKCQoJZnVuY3Rpb24gZGlzYWJsZUJ1dHRvbihidXR0b25OYW1lKSB7CgkJZWxlbWVudC5maW5kKCdkaXYuZmMtYnV0dG9uLScgKyBidXR0b25OYW1lKQoJCQkuYWRkQ2xhc3ModG0gKyAnLXN0YXRlLWRpc2FibGVkJyk7Cgl9CgkKCQoJZnVuY3Rpb24gZW5hYmxlQnV0dG9uKGJ1dHRvbk5hbWUpIHsKCQllbGVtZW50LmZpbmQoJ2Rpdi5mYy1idXR0b24tJyArIGJ1dHRvbk5hbWUpCgkJCS5yZW1vdmVDbGFzcyh0bSArICctc3RhdGUtZGlzYWJsZWQnKTsKCX0KCgp9Cgp2YXIgZXZlbnRHVUlEID0gMTsKCmZ1bmN0aW9uIEV2ZW50TWFuYWdlcihvcHRpb25zLCBzb3VyY2VzKSB7Cgl2YXIgdCA9IHRoaXM7CgkKCQoJLy8gZXhwb3J0cwoJdC5pc0ZldGNoTmVlZGVkID0gaXNGZXRjaE5lZWRlZDsKCXQuZmV0Y2hFdmVudHMgPSBmZXRjaEV2ZW50czsKCXQuYWRkRXZlbnRTb3VyY2UgPSBhZGRFdmVudFNvdXJjZTsKCXQucmVtb3ZlRXZlbnRTb3VyY2UgPSByZW1vdmVFdmVudFNvdXJjZTsKCXQudXBkYXRlRXZlbnQgPSB1cGRhdGVFdmVudDsKCXQucmVuZGVyRXZlbnQgPSByZW5kZXJFdmVudDsKCXQucmVtb3ZlRXZlbnRzID0gcmVtb3ZlRXZlbnRzOwoJdC5jbGllbnRFdmVudHMgPSBjbGllbnRFdmVudHM7Cgl0Lm5vcm1hbGl6ZUV2ZW50ID0gbm9ybWFsaXplRXZlbnQ7CgkKCQoJLy8gaW1wb3J0cwoJdmFyIHRyaWdnZXIgPSB0LnRyaWdnZXI7Cgl2YXIgZ2V0VmlldyA9IHQuZ2V0VmlldzsKCXZhciByZXBvcnRFdmVudHMgPSB0LnJlcG9ydEV2ZW50czsKCQoJCgkvLyBsb2NhbHMKCXZhciByYW5nZVN0YXJ0LCByYW5nZUVuZDsKCXZhciBjdXJyZW50RmV0Y2hJRCA9IDA7Cgl2YXIgcGVuZGluZ1NvdXJjZUNudCA9IDA7Cgl2YXIgbG9hZGluZ0xldmVsID0gMDsKCXZhciBkeW5hbWljRXZlbnRTb3VyY2UgPSBbXTsKCXZhciBjYWNoZSA9IFtdOwoJCgkKCQoJLyogRmV0Y2hpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiBpc0ZldGNoTmVlZGVkKHN0YXJ0LCBlbmQpIHsKCQlyZXR1cm4gIXJhbmdlU3RhcnQgfHwgc3RhcnQgPCByYW5nZVN0YXJ0IHx8IGVuZCA+IHJhbmdlRW5kOwoJfQoJCgkKCWZ1bmN0aW9uIGZldGNoRXZlbnRzKHN0YXJ0LCBlbmQpIHsKCQlyYW5nZVN0YXJ0ID0gc3RhcnQ7CgkJcmFuZ2VFbmQgPSBlbmQ7CgkJY2FjaGUgPSBbXTsKCQl2YXIgZmV0Y2hJRCA9ICsrY3VycmVudEZldGNoSUQ7CgkJdmFyIGxlbiA9IHNvdXJjZXMubGVuZ3RoOwoJCXBlbmRpbmdTb3VyY2VDbnQgPSBsZW47CgkJZm9yICh2YXIgaT0wOyBpPGxlbjsgaSsrKSB7CgkJCWZldGNoRXZlbnRTb3VyY2Uoc291cmNlc1tpXSwgZmV0Y2hJRCk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIGZldGNoRXZlbnRTb3VyY2Uoc291cmNlLCBmZXRjaElEKSB7CgkJX2ZldGNoRXZlbnRTb3VyY2Uoc291cmNlLCBmdW5jdGlvbihldmVudHMpIHsKCQkJaWYgKGZldGNoSUQgPT0gY3VycmVudEZldGNoSUQpIHsKCQkJCWZvciAodmFyIGk9MDsgaTxldmVudHMubGVuZ3RoOyBpKyspIHsKCQkJCQlub3JtYWxpemVFdmVudChldmVudHNbaV0pOwoJCQkJCWV2ZW50c1tpXS5zb3VyY2UgPSBzb3VyY2U7CgkJCQl9CgkJCQljYWNoZSA9IGNhY2hlLmNvbmNhdChldmVudHMpOwoJCQkJcGVuZGluZ1NvdXJjZUNudC0tOwoJCQkJaWYgKCFwZW5kaW5nU291cmNlQ250KSB7CgkJCQkJcmVwb3J0RXZlbnRzKGNhY2hlKTsKCQkJCX0KCQkJfQoJCX0pOwoJfQoJCgkKCWZ1bmN0aW9uIF9mZXRjaEV2ZW50U291cmNlKHNvdXJjZSwgY2FsbGJhY2spIHsKCQlpZiAodHlwZW9mIHNvdXJjZSA9PSAnc3RyaW5nJykgewoJCQl2YXIgcGFyYW1zID0ge307CgkJCXBhcmFtc1tvcHRpb25zLnN0YXJ0UGFyYW1dID0gTWF0aC5yb3VuZChyYW5nZVN0YXJ0LmdldFRpbWUoKSAvIDEwMDApOwoJCQlwYXJhbXNbb3B0aW9ucy5lbmRQYXJhbV0gPSBNYXRoLnJvdW5kKHJhbmdlRW5kLmdldFRpbWUoKSAvIDEwMDApOwoJCQlpZiAob3B0aW9ucy5jYWNoZVBhcmFtKSB7CgkJCQlwYXJhbXNbb3B0aW9ucy5jYWNoZVBhcmFtXSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7IC8vIFRPRE86IGRlcHJlY2F0ZSBjYWNoZVBhcmFtCgkJCX0KCQkJcHVzaExvYWRpbmcoKTsKCQkJLy8gVE9ETzogcmVzcGVjdCBjYWNoZSBwYXJhbSBpbiBhamF4U2V0dXAKCQkJJC5hamF4KHsKCQkJCXVybDogc291cmNlLAoJCQkJZGF0YVR5cGU6ICdqc29uJywKCQkJCWRhdGE6IHBhcmFtcywKCQkJCWNhY2hlOiBvcHRpb25zLmNhY2hlUGFyYW0gfHwgZmFsc2UsIC8vIGRvbid0IGxldCBqcXVlcnkgcHJldmVudCBjYWNoaW5nIGlmIGNhY2hlUGFyYW0gaXMgYmVpbmcgdXNlZAoJCQkJc3VjY2VzczogZnVuY3Rpb24oZXZlbnRzKSB7CgkJCQkJcG9wTG9hZGluZygpOwoJCQkJCWNhbGxiYWNrKGV2ZW50cyk7CgkJCQl9CgkJCX0pOwoJCX0KCQllbHNlIGlmICgkLmlzRnVuY3Rpb24oc291cmNlKSkgewoJCQlwdXNoTG9hZGluZygpOwoJCQlzb3VyY2UoY2xvbmVEYXRlKHJhbmdlU3RhcnQpLCBjbG9uZURhdGUocmFuZ2VFbmQpLCBmdW5jdGlvbihldmVudHMpIHsKCQkJCXBvcExvYWRpbmcoKTsKCQkJCWNhbGxiYWNrKGV2ZW50cyk7CgkJCX0pOwoJCX0KCQllbHNlIHsKCQkJY2FsbGJhY2soc291cmNlKTsgLy8gc3JjIGlzIGFuIGFycmF5CgkJfQoJfQoJCgkKCQoJLyogU291cmNlcwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCXNvdXJjZXMucHVzaChkeW5hbWljRXZlbnRTb3VyY2UpOwoJCgoJZnVuY3Rpb24gYWRkRXZlbnRTb3VyY2Uoc291cmNlKSB7CgkJc291cmNlcy5wdXNoKHNvdXJjZSk7CgkJcGVuZGluZ1NvdXJjZUNudCsrOwoJCWZldGNoRXZlbnRTb3VyY2Uoc291cmNlLCBjdXJyZW50RmV0Y2hJRCk7IC8vIHdpbGwgZXZlbnR1YWxseSBjYWxsIHJlcG9ydEV2ZW50cwoJfQoJCgoJZnVuY3Rpb24gcmVtb3ZlRXZlbnRTb3VyY2Uoc291cmNlKSB7CgkJc291cmNlcyA9ICQuZ3JlcChzb3VyY2VzLCBmdW5jdGlvbihzcmMpIHsKCQkJcmV0dXJuIHNyYyAhPSBzb3VyY2U7CgkJfSk7CgkJLy8gcmVtb3ZlIGFsbCBjbGllbnQgZXZlbnRzIGZyb20gdGhhdCBzb3VyY2UKCQljYWNoZSA9ICQuZ3JlcChjYWNoZSwgZnVuY3Rpb24oZSkgewoJCQlyZXR1cm4gZS5zb3VyY2UgIT0gc291cmNlOwoJCX0pOwoJCXJlcG9ydEV2ZW50cyhjYWNoZSk7Cgl9CgkKCQoJCgkvKiBNYW5pcHVsYXRpb24KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiB1cGRhdGVFdmVudChldmVudCkgeyAvLyB1cGRhdGUgYW4gZXhpc3RpbmcgZXZlbnQKCQl2YXIgaSwgbGVuID0gY2FjaGUubGVuZ3RoLCBlLAoJCQlkZWZhdWx0RXZlbnRFbmQgPSBnZXRWaWV3KCkuZGVmYXVsdEV2ZW50RW5kLCAvLyBnZXRWaWV3Pz8/CgkJCXN0YXJ0RGVsdGEgPSBldmVudC5zdGFydCAtIGV2ZW50Ll9zdGFydCwKCQkJZW5kRGVsdGEgPSBldmVudC5lbmQgPwoJCQkJKGV2ZW50LmVuZCAtIChldmVudC5fZW5kIHx8IGRlZmF1bHRFdmVudEVuZChldmVudCkpKSAvLyBldmVudC5fZW5kIHdvdWxkIGJlIG51bGwgaWYgZXZlbnQuZW5kCgkJCQk6IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FzIG51bGwgYW5kIGV2ZW50IHdhcyBqdXN0IHJlc2l6ZWQKCQlmb3IgKGk9MDsgaTxsZW47IGkrKykgewoJCQllID0gY2FjaGVbaV07CgkJCWlmIChlLl9pZCA9PSBldmVudC5faWQgJiYgZSAhPSBldmVudCkgewoJCQkJZS5zdGFydCA9IG5ldyBEYXRlKCtlLnN0YXJ0ICsgc3RhcnREZWx0YSk7CgkJCQlpZiAoZXZlbnQuZW5kKSB7CgkJCQkJaWYgKGUuZW5kKSB7CgkJCQkJCWUuZW5kID0gbmV3IERhdGUoK2UuZW5kICsgZW5kRGVsdGEpOwoJCQkJCX1lbHNlewoJCQkJCQllLmVuZCA9IG5ldyBEYXRlKCtkZWZhdWx0RXZlbnRFbmQoZSkgKyBlbmREZWx0YSk7CgkJCQkJfQoJCQkJfWVsc2V7CgkJCQkJZS5lbmQgPSBudWxsOwoJCQkJfQoJCQkJZS50aXRsZSA9IGV2ZW50LnRpdGxlOwoJCQkJZS51cmwgPSBldmVudC51cmw7CgkJCQllLmFsbERheSA9IGV2ZW50LmFsbERheTsKCQkJCWUuY2xhc3NOYW1lID0gZXZlbnQuY2xhc3NOYW1lOwoJCQkJZS5lZGl0YWJsZSA9IGV2ZW50LmVkaXRhYmxlOwoJCQkJbm9ybWFsaXplRXZlbnQoZSk7CgkJCX0KCQl9CgkJbm9ybWFsaXplRXZlbnQoZXZlbnQpOwoJCXJlcG9ydEV2ZW50cyhjYWNoZSk7Cgl9CgkKCQoJZnVuY3Rpb24gcmVuZGVyRXZlbnQoZXZlbnQsIHN0aWNrKSB7CgkJbm9ybWFsaXplRXZlbnQoZXZlbnQpOwoJCWlmICghZXZlbnQuc291cmNlKSB7CgkJCWlmIChzdGljaykgewoJCQkJZHluYW1pY0V2ZW50U291cmNlLnB1c2goZXZlbnQpOwoJCQkJZXZlbnQuc291cmNlID0gZHluYW1pY0V2ZW50U291cmNlOwoJCQl9CgkJCWNhY2hlLnB1c2goZXZlbnQpOwoJCX0KCQlyZXBvcnRFdmVudHMoY2FjaGUpOwoJfQoJCgkKCWZ1bmN0aW9uIHJlbW92ZUV2ZW50cyhmaWx0ZXIpIHsKCQlpZiAoIWZpbHRlcikgeyAvLyByZW1vdmUgYWxsCgkJCWNhY2hlID0gW107CgkJCS8vIGNsZWFyIGFsbCBhcnJheSBzb3VyY2VzCgkJCWZvciAodmFyIGk9MDsgaTxzb3VyY2VzLmxlbmd0aDsgaSsrKSB7CgkJCQlpZiAodHlwZW9mIHNvdXJjZXNbaV0gPT0gJ29iamVjdCcpIHsKCQkJCQlzb3VyY2VzW2ldID0gW107CgkJCQl9CgkJCX0KCQl9ZWxzZXsKCQkJaWYgKCEkLmlzRnVuY3Rpb24oZmlsdGVyKSkgeyAvLyBhbiBldmVudCBJRAoJCQkJdmFyIGlkID0gZmlsdGVyICsgJyc7CgkJCQlmaWx0ZXIgPSBmdW5jdGlvbihlKSB7CgkJCQkJcmV0dXJuIGUuX2lkID09IGlkOwoJCQkJfTsKCQkJfQoJCQljYWNoZSA9ICQuZ3JlcChjYWNoZSwgZmlsdGVyLCB0cnVlKTsKCQkJLy8gcmVtb3ZlIGV2ZW50cyBmcm9tIGFycmF5IHNvdXJjZXMKCQkJZm9yICh2YXIgaT0wOyBpPHNvdXJjZXMubGVuZ3RoOyBpKyspIHsKCQkJCWlmICh0eXBlb2Ygc291cmNlc1tpXSA9PSAnb2JqZWN0JykgewoJCQkJCXNvdXJjZXNbaV0gPSAkLmdyZXAoc291cmNlc1tpXSwgZmlsdGVyLCB0cnVlKTsKCQkJCX0KCQkJfQoJCX0KCQlyZXBvcnRFdmVudHMoY2FjaGUpOwoJfQoJCgkKCWZ1bmN0aW9uIGNsaWVudEV2ZW50cyhmaWx0ZXIpIHsKCQlpZiAoJC5pc0Z1bmN0aW9uKGZpbHRlcikpIHsKCQkJcmV0dXJuICQuZ3JlcChjYWNoZSwgZmlsdGVyKTsKCQl9CgkJZWxzZSBpZiAoZmlsdGVyKSB7IC8vIGFuIGV2ZW50IElECgkJCWZpbHRlciArPSAnJzsKCQkJcmV0dXJuICQuZ3JlcChjYWNoZSwgZnVuY3Rpb24oZSkgewoJCQkJcmV0dXJuIGUuX2lkID09IGZpbHRlcjsKCQkJfSk7CgkJfQoJCXJldHVybiBjYWNoZTsgLy8gZWxzZSwgcmV0dXJuIGFsbAoJfQoJCgkKCQoJLyogTG9hZGluZyBTdGF0ZQoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIHB1c2hMb2FkaW5nKCkgewoJCWlmICghbG9hZGluZ0xldmVsKyspIHsKCQkJdHJpZ2dlcignbG9hZGluZycsIG51bGwsIHRydWUpOwoJCX0KCX0KCQoJCglmdW5jdGlvbiBwb3BMb2FkaW5nKCkgewoJCWlmICghLS1sb2FkaW5nTGV2ZWwpIHsKCQkJdHJpZ2dlcignbG9hZGluZycsIG51bGwsIGZhbHNlKTsKCQl9Cgl9CgkKCQoJCgkvKiBFdmVudCBOb3JtYWxpemF0aW9uCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gbm9ybWFsaXplRXZlbnQoZXZlbnQpIHsKCQlldmVudC5faWQgPSBldmVudC5faWQgfHwgKGV2ZW50LmlkID09PSB1bmRlZmluZWQgPyAnX2ZjJyArIGV2ZW50R1VJRCsrIDogZXZlbnQuaWQgKyAnJyk7CgkJaWYgKGV2ZW50LmRhdGUpIHsKCQkJaWYgKCFldmVudC5zdGFydCkgewoJCQkJZXZlbnQuc3RhcnQgPSBldmVudC5kYXRlOwoJCQl9CgkJCWRlbGV0ZSBldmVudC5kYXRlOwoJCX0KCQlldmVudC5fc3RhcnQgPSBjbG9uZURhdGUoZXZlbnQuc3RhcnQgPSBwYXJzZURhdGUoZXZlbnQuc3RhcnQsIG9wdGlvbnMuaWdub3JlVGltZXpvbmUpKTsKCQlldmVudC5lbmQgPSBwYXJzZURhdGUoZXZlbnQuZW5kLCBvcHRpb25zLmlnbm9yZVRpbWV6b25lKTsKCQlpZiAoZXZlbnQuZW5kICYmIGV2ZW50LmVuZCA8PSBldmVudC5zdGFydCkgewoJCQlldmVudC5lbmQgPSBudWxsOwoJCX0KCQlldmVudC5fZW5kID0gZXZlbnQuZW5kID8gY2xvbmVEYXRlKGV2ZW50LmVuZCkgOiBudWxsOwoJCWlmIChldmVudC5hbGxEYXkgPT09IHVuZGVmaW5lZCkgewoJCQlldmVudC5hbGxEYXkgPSBvcHRpb25zLmFsbERheURlZmF1bHQ7CgkJfQoJCWlmIChldmVudC5jbGFzc05hbWUpIHsKCQkJaWYgKHR5cGVvZiBldmVudC5jbGFzc05hbWUgPT0gJ3N0cmluZycpIHsKCQkJCWV2ZW50LmNsYXNzTmFtZSA9IGV2ZW50LmNsYXNzTmFtZS5zcGxpdCgvXHMrLyk7CgkJCX0KCQl9ZWxzZXsKCQkJZXZlbnQuY2xhc3NOYW1lID0gW107CgkJfQoJCS8vIFRPRE86IGlmIHRoZXJlIGlzIG5vIHN0YXJ0IGRhdGUsIHJldHVybiBmYWxzZSB0byBpbmRpY2F0ZSBhbiBpbnZhbGlkIGV2ZW50Cgl9CgoKfQoKZmNWaWV3cy5tb250aCA9IE1vbnRoVmlldzsKCmZ1bmN0aW9uIE1vbnRoVmlldyhlbGVtZW50LCBjYWxlbmRhcikgewoJdmFyIHQgPSB0aGlzOwoJCgkKCS8vIGV4cG9ydHMKCXQucmVuZGVyID0gcmVuZGVyOwoJCgkKCS8vIGltcG9ydHMKCUJhc2ljVmlldy5jYWxsKHQsIGVsZW1lbnQsIGNhbGVuZGFyLCAnbW9udGgnKTsKCXZhciBvcHQgPSB0Lm9wdDsKCXZhciByZW5kZXJCYXNpYyA9IHQucmVuZGVyQmFzaWM7Cgl2YXIgZm9ybWF0RGF0ZSA9IGNhbGVuZGFyLmZvcm1hdERhdGU7CgkKCQoJCglmdW5jdGlvbiByZW5kZXIoZGF0ZSwgZGVsdGEpIHsKCQlpZiAoZGVsdGEpIHsKCQkJYWRkTW9udGhzKGRhdGUsIGRlbHRhKTsKCQkJZGF0ZS5zZXREYXRlKDEpOwoJCX0KCQl2YXIgc3RhcnQgPSBjbG9uZURhdGUoZGF0ZSwgdHJ1ZSk7CgkJc3RhcnQuc2V0RGF0ZSgxKTsKCQl2YXIgZW5kID0gYWRkTW9udGhzKGNsb25lRGF0ZShzdGFydCksIDEpOwoJCXZhciB2aXNTdGFydCA9IGNsb25lRGF0ZShzdGFydCk7CgkJdmFyIHZpc0VuZCA9IGNsb25lRGF0ZShlbmQpOwoJCXZhciBmaXJzdERheSA9IG9wdCgnZmlyc3REYXknKTsKCQl2YXIgbndlID0gb3B0KCd3ZWVrZW5kcycpID8gMCA6IDE7CgkJaWYgKG53ZSkgewoJCQlza2lwV2Vla2VuZCh2aXNTdGFydCk7CgkJCXNraXBXZWVrZW5kKHZpc0VuZCwgLTEsIHRydWUpOwoJCX0KCQlhZGREYXlzKHZpc1N0YXJ0LCAtKCh2aXNTdGFydC5nZXREYXkoKSAtIE1hdGgubWF4KGZpcnN0RGF5LCBud2UpICsgNykgJSA3KSk7CgkJYWRkRGF5cyh2aXNFbmQsICg3IC0gdmlzRW5kLmdldERheSgpICsgTWF0aC5tYXgoZmlyc3REYXksIG53ZSkpICUgNyk7CgkJdmFyIHJvd0NudCA9IE1hdGgucm91bmQoKHZpc0VuZCAtIHZpc1N0YXJ0KSAvIChEQVlfTVMgKiA3KSk7CgkJaWYgKG9wdCgnd2Vla01vZGUnKSA9PSAnZml4ZWQnKSB7CgkJCWFkZERheXModmlzRW5kLCAoNiAtIHJvd0NudCkgKiA3KTsKCQkJcm93Q250ID0gNjsKCQl9CgkJdC50aXRsZSA9IGZvcm1hdERhdGUoc3RhcnQsIG9wdCgndGl0bGVGb3JtYXQnKSk7CgkJdC5zdGFydCA9IHN0YXJ0OwoJCXQuZW5kID0gZW5kOwoJCXQudmlzU3RhcnQgPSB2aXNTdGFydDsKCQl0LnZpc0VuZCA9IHZpc0VuZDsKCQlyZW5kZXJCYXNpYyhyb3dDbnQsIG53ZSA/IDUgOiA3LCB0cnVlKTsKCX0KCQoJCn0KCmZjVmlld3MuYmFzaWNXZWVrID0gQmFzaWNXZWVrVmlldzsKCmZ1bmN0aW9uIEJhc2ljV2Vla1ZpZXcoZWxlbWVudCwgY2FsZW5kYXIpIHsKCXZhciB0ID0gdGhpczsKCQoJCgkvLyBleHBvcnRzCgl0LnJlbmRlciA9IHJlbmRlcjsKCQoJCgkvLyBpbXBvcnRzCglCYXNpY1ZpZXcuY2FsbCh0LCBlbGVtZW50LCBjYWxlbmRhciwgJ2Jhc2ljV2VlaycpOwoJdmFyIG9wdCA9IHQub3B0OwoJdmFyIHJlbmRlckJhc2ljID0gdC5yZW5kZXJCYXNpYzsKCXZhciBmb3JtYXREYXRlcyA9IGNhbGVuZGFyLmZvcm1hdERhdGVzOwoJCgkKCQoJZnVuY3Rpb24gcmVuZGVyKGRhdGUsIGRlbHRhKSB7CgkJaWYgKGRlbHRhKSB7CgkJCWFkZERheXMoZGF0ZSwgZGVsdGEgKiA3KTsKCQl9CgkJdmFyIHN0YXJ0ID0gYWRkRGF5cyhjbG9uZURhdGUoZGF0ZSksIC0oKGRhdGUuZ2V0RGF5KCkgLSBvcHQoJ2ZpcnN0RGF5JykgKyA3KSAlIDcpKTsKCQl2YXIgZW5kID0gYWRkRGF5cyhjbG9uZURhdGUoc3RhcnQpLCA3KTsKCQl2YXIgdmlzU3RhcnQgPSBjbG9uZURhdGUoc3RhcnQpOwoJCXZhciB2aXNFbmQgPSBjbG9uZURhdGUoZW5kKTsKCQl2YXIgd2Vla2VuZHMgPSBvcHQoJ3dlZWtlbmRzJyk7CgkJaWYgKCF3ZWVrZW5kcykgewoJCQlza2lwV2Vla2VuZCh2aXNTdGFydCk7CgkJCXNraXBXZWVrZW5kKHZpc0VuZCwgLTEsIHRydWUpOwoJCX0KCQl0LnRpdGxlID0gZm9ybWF0RGF0ZXMoCgkJCXZpc1N0YXJ0LAoJCQlhZGREYXlzKGNsb25lRGF0ZSh2aXNFbmQpLCAtMSksCgkJCW9wdCgndGl0bGVGb3JtYXQnKQoJCSk7CgkJdC5zdGFydCA9IHN0YXJ0OwoJCXQuZW5kID0gZW5kOwoJCXQudmlzU3RhcnQgPSB2aXNTdGFydDsKCQl0LnZpc0VuZCA9IHZpc0VuZDsKCQlyZW5kZXJCYXNpYygxLCB3ZWVrZW5kcyA/IDcgOiA1LCBmYWxzZSk7Cgl9CgkKCQp9CgpmY1ZpZXdzLmJhc2ljRGF5ID0gQmFzaWNEYXlWaWV3OwoKLy9UT0RPOiB3aGVuIGNhbGVuZGFyJ3MgZGF0ZSBzdGFydHMgb3V0IG9uIGEgd2Vla2VuZCwgc2hvdWxkbid0IGhhcHBlbgoKCmZ1bmN0aW9uIEJhc2ljRGF5VmlldyhlbGVtZW50LCBjYWxlbmRhcikgewoJdmFyIHQgPSB0aGlzOwoJCgkKCS8vIGV4cG9ydHMKCXQucmVuZGVyID0gcmVuZGVyOwoJCgkKCS8vIGltcG9ydHMKCUJhc2ljVmlldy5jYWxsKHQsIGVsZW1lbnQsIGNhbGVuZGFyLCAnYmFzaWNEYXknKTsKCXZhciBvcHQgPSB0Lm9wdDsKCXZhciByZW5kZXJCYXNpYyA9IHQucmVuZGVyQmFzaWM7Cgl2YXIgZm9ybWF0RGF0ZSA9IGNhbGVuZGFyLmZvcm1hdERhdGU7CgkKCQoJCglmdW5jdGlvbiByZW5kZXIoZGF0ZSwgZGVsdGEpIHsKCQlpZiAoZGVsdGEpIHsKCQkJYWRkRGF5cyhkYXRlLCBkZWx0YSk7CgkJCWlmICghb3B0KCd3ZWVrZW5kcycpKSB7CgkJCQlza2lwV2Vla2VuZChkYXRlLCBkZWx0YSA8IDAgPyAtMSA6IDEpOwoJCQl9CgkJfQoJCXQudGl0bGUgPSBmb3JtYXREYXRlKGRhdGUsIG9wdCgndGl0bGVGb3JtYXQnKSk7CgkJdC5zdGFydCA9IHQudmlzU3RhcnQgPSBjbG9uZURhdGUoZGF0ZSwgdHJ1ZSk7CgkJdC5lbmQgPSB0LnZpc0VuZCA9IGFkZERheXMoY2xvbmVEYXRlKHQuc3RhcnQpLCAxKTsKCQlyZW5kZXJCYXNpYygxLCAxLCBmYWxzZSk7Cgl9CgkKCQp9Cgp2YXIgdGRIZWlnaHRCdWc7CgpzZXREZWZhdWx0cyh7Cgl3ZWVrTW9kZTogJ2ZpeGVkJwp9KTsKCgpmdW5jdGlvbiBCYXNpY1ZpZXcoZWxlbWVudCwgY2FsZW5kYXIsIHZpZXdOYW1lKSB7Cgl2YXIgdCA9IHRoaXM7CgkKCQoJLy8gZXhwb3J0cwoJdC5yZW5kZXJCYXNpYyA9IHJlbmRlckJhc2ljOwoJdC5zZXRIZWlnaHQgPSBzZXRIZWlnaHQ7Cgl0LnNldFdpZHRoID0gc2V0V2lkdGg7Cgl0LnJlbmRlckRheU92ZXJsYXkgPSByZW5kZXJEYXlPdmVybGF5OwoJdC5kZWZhdWx0U2VsZWN0aW9uRW5kID0gZGVmYXVsdFNlbGVjdGlvbkVuZDsKCXQucmVuZGVyU2VsZWN0aW9uID0gcmVuZGVyU2VsZWN0aW9uOwoJdC5jbGVhclNlbGVjdGlvbiA9IGNsZWFyU2VsZWN0aW9uOwoJdC5kcmFnU3RhcnQgPSBkcmFnU3RhcnQ7Cgl0LmRyYWdTdG9wID0gZHJhZ1N0b3A7Cgl0LmRlZmF1bHRFdmVudEVuZCA9IGRlZmF1bHRFdmVudEVuZDsKCXQuZ2V0SG92ZXJMaXN0ZW5lciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG92ZXJMaXN0ZW5lciB9OwoJdC5jb2xDb250ZW50TGVmdCA9IGNvbENvbnRlbnRMZWZ0OwoJdC5jb2xDb250ZW50UmlnaHQgPSBjb2xDb250ZW50UmlnaHQ7Cgl0LmRheU9mV2Vla0NvbCA9IGRheU9mV2Vla0NvbDsKCXQuZGF0ZUNlbGwgPSBkYXRlQ2VsbDsKCXQuY2VsbERhdGUgPSBjZWxsRGF0ZTsKCXQuY2VsbElzQWxsRGF5ID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlIH07Cgl0LmFsbERheVRSID0gYWxsRGF5VFI7Cgl0LmFsbERheUJvdW5kcyA9IGFsbERheUJvdW5kczsKCXQuZ2V0Um93Q250ID0gZnVuY3Rpb24oKSB7IHJldHVybiByb3dDbnQgfTsKCXQuZ2V0Q29sQ250ID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb2xDbnQgfTsKCXQuZ2V0Q29sV2lkdGggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbFdpZHRoIH07Cgl0LmdldERheVNlZ21lbnRDb250YWluZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGRheVNlZ21lbnRDb250YWluZXIgfTsKCQoJCgkvLyBpbXBvcnRzCglWaWV3LmNhbGwodCwgZWxlbWVudCwgY2FsZW5kYXIsIHZpZXdOYW1lKTsKCU92ZXJsYXlNYW5hZ2VyLmNhbGwodCk7CglTZWxlY3Rpb25NYW5hZ2VyLmNhbGwodCk7CglCYXNpY0V2ZW50UmVuZGVyZXIuY2FsbCh0KTsKCXZhciBvcHQgPSB0Lm9wdDsKCXZhciB0cmlnZ2VyID0gdC50cmlnZ2VyOwoJdmFyIGNsZWFyRXZlbnRzID0gdC5jbGVhckV2ZW50czsKCXZhciByZW5kZXJPdmVybGF5ID0gdC5yZW5kZXJPdmVybGF5OwoJdmFyIGNsZWFyT3ZlcmxheXMgPSB0LmNsZWFyT3ZlcmxheXM7Cgl2YXIgZGF5U2VsZWN0aW9uTW91c2Vkb3duID0gdC5kYXlTZWxlY3Rpb25Nb3VzZWRvd247Cgl2YXIgZm9ybWF0RGF0ZSA9IGNhbGVuZGFyLmZvcm1hdERhdGU7CgkKCQoJLy8gbG9jYWxzCgl2YXIgcnRsLCBkaXMsIGRpdDsKCXZhciBmaXJzdERheTsKCXZhciBud2U7Cgl2YXIgcm93Q250LCBjb2xDbnQ7Cgl2YXIgY29sV2lkdGg7Cgl2YXIgdmlld1dpZHRoLCB2aWV3SGVpZ2h0OwoJdmFyIHRoZWFkLCB0Ym9keTsKCXZhciBkYXlTZWdtZW50Q29udGFpbmVyOwoJdmFyIGNvb3JkaW5hdGVHcmlkOwoJdmFyIGhvdmVyTGlzdGVuZXI7Cgl2YXIgY29sQ29udGVudFBvc2l0aW9uczsKCQoJCgkKCS8qIFJlbmRlcmluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglkaXNhYmxlVGV4dFNlbGVjdGlvbihlbGVtZW50LmFkZENsYXNzKCdmYy1ncmlkJykpOwoJCgkKCWZ1bmN0aW9uIHJlbmRlckJhc2ljKHIsIGMsIHNob3dOdW1iZXJzKSB7CgkKCQlyb3dDbnQgPSByOwoJCWNvbENudCA9IGM7CgkJcnRsID0gb3B0KCdpc1JUTCcpOwoJCWlmIChydGwpIHsKCQkJZGlzID0gLTE7CgkJCWRpdCA9IGNvbENudCAtIDE7CgkJfWVsc2V7CgkJCWRpcyA9IDE7CgkJCWRpdCA9IDA7CgkJfQoJCWZpcnN0RGF5ID0gb3B0KCdmaXJzdERheScpOwoJCW53ZSA9IG9wdCgnd2Vla2VuZHMnKSA/IDAgOiAxOwoJCQoJCXZhciB0bSA9IG9wdCgndGhlbWUnKSA/ICd1aScgOiAnZmMnOwoJCXZhciBjb2xGb3JtYXQgPSBvcHQoJ2NvbHVtbkZvcm1hdCcpOwoJCXZhciBtb250aCA9IHQuc3RhcnQuZ2V0TW9udGgoKTsKCQl2YXIgdG9kYXkgPSBjbGVhclRpbWUobmV3IERhdGUoKSk7CgkJdmFyIHMsIGksIGosIGQgPSBjbG9uZURhdGUodC52aXNTdGFydCk7CgkJCgkJaWYgKCF0Ym9keSkgeyAvLyBmaXJzdCB0aW1lLCBidWlsZCBhbGwgY2VsbHMgZnJvbSBzY3JhdGNoCgkJCgkJCXZhciB0YWJsZSA9ICQoIjx0YWJsZS8+IikuYXBwZW5kVG8oZWxlbWVudCk7CgkJCQoJCQlzID0gIjx0aGVhZD48dHI+IjsKCQkJZm9yIChpPTA7IGk8Y29sQ250OyBpKyspIHsKCQkJCXMgKz0gIjx0aCBjbGFzcz0nZmMtIiArCgkJCQkJZGF5SURzW2QuZ2V0RGF5KCldICsgJyAnICsgLy8gbmVlZHMgdG8gYmUgZmlyc3QKCQkJCQl0bSArICctc3RhdGUtZGVmYXVsdCcgKwoJCQkJCShpPT1kaXQgPyAnIGZjLWxlZnRtb3N0JyA6ICcnKSArCgkJCQkJIic+IiArIGZvcm1hdERhdGUoZCwgY29sRm9ybWF0KSArICI8L3RoPiI7CgkJCQlhZGREYXlzKGQsIDEpOwoJCQkJaWYgKG53ZSkgewoJCQkJCXNraXBXZWVrZW5kKGQpOwoJCQkJfQoJCQl9CgkJCXRoZWFkID0gJChzICsgIjwvdHI+PC90aGVhZD4iKS5hcHBlbmRUbyh0YWJsZSk7CgkJCQoJCQlzID0gIjx0Ym9keT4iOwoJCQlkID0gY2xvbmVEYXRlKHQudmlzU3RhcnQpOwoJCQlmb3IgKGk9MDsgaTxyb3dDbnQ7IGkrKykgewoJCQkJcyArPSAiPHRyIGNsYXNzPSdmYy13ZWVrIiArIGkgKyAiJz4iOwoJCQkJZm9yIChqPTA7IGo8Y29sQ250OyBqKyspIHsKCQkJCQlzICs9ICI8dGQgY2xhc3M9J2ZjLSIgKwoJCQkJCQlkYXlJRHNbZC5nZXREYXkoKV0gKyAnICcgKyAvLyBuZWVkcyB0byBiZSBmaXJzdAoJCQkJCQl0bSArICctc3RhdGUtZGVmYXVsdCBmYy1kYXknICsgKGkqY29sQ250K2opICsKCQkJCQkJKGo9PWRpdCA/ICcgZmMtbGVmdG1vc3QnIDogJycpICsKCQkJCQkJKHJvd0NudD4xICYmIGQuZ2V0TW9udGgoKSAhPSBtb250aCA/ICcgZmMtb3RoZXItbW9udGgnIDogJycpICsKCQkJCQkJKCtkID09ICt0b2RheSA/CgkJCQkJCScgZmMtdG9kYXkgJyt0bSsnLXN0YXRlLWhpZ2hsaWdodCcgOgoJCQkJCQknIGZjLW5vdC10b2RheScpICsgIic+IiArCgkJCQkJCShzaG93TnVtYmVycyA/ICI8ZGl2IGNsYXNzPSdmYy1kYXktbnVtYmVyJz4iICsgZC5nZXREYXRlKCkgKyAiPC9kaXY+IiA6ICcnKSArCgkJCQkJCSI8ZGl2IGNsYXNzPSdmYy1kYXktY29udGVudCc+PGRpdiBzdHlsZT0ncG9zaXRpb246cmVsYXRpdmUnPiZuYnNwOzwvZGl2PjwvZGl2PjwvdGQ+IjsKCQkJCQlhZGREYXlzKGQsIDEpOwoJCQkJCWlmIChud2UpIHsKCQkJCQkJc2tpcFdlZWtlbmQoZCk7CgkJCQkJfQoJCQkJfQoJCQkJcyArPSAiPC90cj4iOwoJCQl9CgkJCXRib2R5ID0gJChzICsgIjwvdGJvZHk+IikuYXBwZW5kVG8odGFibGUpOwoJCQlkYXlCaW5kKHRib2R5LmZpbmQoJ3RkJykpOwoJCQkKCQkJZGF5U2VnbWVudENvbnRhaW5lciA9ICQoIjxkaXYgc3R5bGU9J3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6ODt0b3A6MDtsZWZ0OjAnLz4iKS5hcHBlbmRUbyhlbGVtZW50KTsKCQkKCQl9ZWxzZXsgLy8gTk9UIGZpcnN0IHRpbWUsIHJldXNlIGFzIG1hbnkgY2VsbHMgYXMgcG9zc2libGUKCQkKCQkJY2xlYXJFdmVudHMoKTsKCQkKCQkJdmFyIHByZXZSb3dDbnQgPSB0Ym9keS5maW5kKCd0cicpLmxlbmd0aDsKCQkJaWYgKHJvd0NudCA8IHByZXZSb3dDbnQpIHsKCQkJCXRib2R5LmZpbmQoJ3RyOmd0KCcgKyAocm93Q250LTEpICsgJyknKS5yZW1vdmUoKTsgLy8gcmVtb3ZlIGV4dHJhIHJvd3MKCQkJfQoJCQllbHNlIGlmIChyb3dDbnQgPiBwcmV2Um93Q250KSB7IC8vIG5lZWRzIHRvIGNyZWF0ZSBuZXcgcm93cy4uLgoJCQkJcyA9ICcnOwoJCQkJZm9yIChpPXByZXZSb3dDbnQ7IGk8cm93Q250OyBpKyspIHsKCQkJCQlzICs9ICI8dHIgY2xhc3M9J2ZjLXdlZWsiICsgaSArICInPiI7CgkJCQkJZm9yIChqPTA7IGo8Y29sQ250OyBqKyspIHsKCQkJCQkJcyArPSAiPHRkIGNsYXNzPSdmYy0iICsKCQkJCQkJCWRheUlEc1tkLmdldERheSgpXSArICcgJyArIC8vIG5lZWRzIHRvIGJlIGZpcnN0CgkJCQkJCQl0bSArICctc3RhdGUtZGVmYXVsdCBmYy1uZXcgZmMtZGF5JyArIChpKmNvbENudCtqKSArCgkJCQkJCQkoaj09ZGl0ID8gJyBmYy1sZWZ0bW9zdCcgOiAnJykgKyAiJz4iICsKCQkJCQkJCShzaG93TnVtYmVycyA/ICI8ZGl2IGNsYXNzPSdmYy1kYXktbnVtYmVyJz48L2Rpdj4iIDogJycpICsKCQkJCQkJCSI8ZGl2IGNsYXNzPSdmYy1kYXktY29udGVudCc+PGRpdiBzdHlsZT0ncG9zaXRpb246cmVsYXRpdmUnPiZuYnNwOzwvZGl2PjwvZGl2PiIgKwoJCQkJCQkJIjwvdGQ+IjsKCQkJCQkJYWRkRGF5cyhkLCAxKTsKCQkJCQkJaWYgKG53ZSkgewoJCQkJCQkJc2tpcFdlZWtlbmQoZCk7CgkJCQkJCX0KCQkJCQl9CgkJCQkJcyArPSAiPC90cj4iOwoJCQkJfQoJCQkJdGJvZHkuYXBwZW5kKHMpOwoJCQl9CgkJCWRheUJpbmQodGJvZHkuZmluZCgndGQuZmMtbmV3JykucmVtb3ZlQ2xhc3MoJ2ZjLW5ldycpKTsKCQkJCgkJCS8vIHJlLWxhYmVsIGFuZCByZS1jbGFzcyBleGlzdGluZyBjZWxscwoJCQlkID0gY2xvbmVEYXRlKHQudmlzU3RhcnQpOwoJCQl0Ym9keS5maW5kKCd0ZCcpLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgdGQgPSAkKHRoaXMpOwoJCQkJaWYgKHJvd0NudCA+IDEpIHsKCQkJCQlpZiAoZC5nZXRNb250aCgpID09IG1vbnRoKSB7CgkJCQkJCXRkLnJlbW92ZUNsYXNzKCdmYy1vdGhlci1tb250aCcpOwoJCQkJCX1lbHNlewoJCQkJCQl0ZC5hZGRDbGFzcygnZmMtb3RoZXItbW9udGgnKTsKCQkJCQl9CgkJCQl9CgkJCQlpZiAoK2QgPT0gK3RvZGF5KSB7CgkJCQkJdGQucmVtb3ZlQ2xhc3MoJ2ZjLW5vdC10b2RheScpCgkJCQkJCS5hZGRDbGFzcygnZmMtdG9kYXknKQoJCQkJCQkuYWRkQ2xhc3ModG0gKyAnLXN0YXRlLWhpZ2hsaWdodCcpOwoJCQkJfWVsc2V7CgkJCQkJdGQuYWRkQ2xhc3MoJ2ZjLW5vdC10b2RheScpCgkJCQkJCS5yZW1vdmVDbGFzcygnZmMtdG9kYXknKQoJCQkJCQkucmVtb3ZlQ2xhc3ModG0gKyAnLXN0YXRlLWhpZ2hsaWdodCcpOwoJCQkJfQoJCQkJdGQuZmluZCgnZGl2LmZjLWRheS1udW1iZXInKS50ZXh0KGQuZ2V0RGF0ZSgpKTsKCQkJCWFkZERheXMoZCwgMSk7CgkJCQlpZiAobndlKSB7CgkJCQkJc2tpcFdlZWtlbmQoZCk7CgkJCQl9CgkJCX0pOwoJCQkKCQkJaWYgKHJvd0NudCA9PSAxKSB7IC8vIG1vcmUgY2hhbmdlcyBsaWtlbHkgKHdlZWsgb3IgZGF5IHZpZXcpCgkJCQoJCQkJLy8gcmVkbyBjb2x1bW4gaGVhZGVyIHRleHQgYW5kIGNsYXNzCgkJCQlkID0gY2xvbmVEYXRlKHQudmlzU3RhcnQpOwoJCQkJdGhlYWQuZmluZCgndGgnKS5lYWNoKGZ1bmN0aW9uKGksIHRoKSB7CgkJCQkJJCh0aCkudGV4dChmb3JtYXREYXRlKGQsIGNvbEZvcm1hdCkpOwoJCQkJCXRoLmNsYXNzTmFtZSA9IHRoLmNsYXNzTmFtZS5yZXBsYWNlKC9eZmMtXHcrKD89ICkvLCAnZmMtJyArIGRheUlEc1tkLmdldERheSgpXSk7CgkJCQkJYWRkRGF5cyhkLCAxKTsKCQkJCQlpZiAobndlKSB7CgkJCQkJCXNraXBXZWVrZW5kKGQpOwoJCQkJCX0KCQkJCX0pOwoJCQkJCgkJCQkvLyByZWRvIGNlbGwgZGF5LW9mLXdlZWtzCgkJCQlkID0gY2xvbmVEYXRlKHQudmlzU3RhcnQpOwoJCQkJdGJvZHkuZmluZCgndGQnKS5lYWNoKGZ1bmN0aW9uKGksIHRkKSB7CgkJCQkJdGQuY2xhc3NOYW1lID0gdGQuY2xhc3NOYW1lLnJlcGxhY2UoL15mYy1cdysoPz0gKS8sICdmYy0nICsgZGF5SURzW2QuZ2V0RGF5KCldKTsKCQkJCQlhZGREYXlzKGQsIDEpOwoJCQkJCWlmIChud2UpIHsKCQkJCQkJc2tpcFdlZWtlbmQoZCk7CgkJCQkJfQoJCQkJfSk7CgkJCQkKCQkJfQoJCQoJCX0KCQkKCX0KCQoJCglmdW5jdGlvbiBzZXRIZWlnaHQoaGVpZ2h0KSB7CgkJdmlld0hlaWdodCA9IGhlaWdodDsKCQl2YXIgbGVmdFREcyA9IHRib2R5LmZpbmQoJ3RyIHRkOmZpcnN0LWNoaWxkJyksCgkJCXRib2R5SGVpZ2h0ID0gdmlld0hlaWdodCAtIHRoZWFkLmhlaWdodCgpLAoJCQlyb3dIZWlnaHQxLCByb3dIZWlnaHQyOwoJCWlmIChvcHQoJ3dlZWtNb2RlJykgPT0gJ3ZhcmlhYmxlJykgewoJCQlyb3dIZWlnaHQxID0gcm93SGVpZ2h0MiA9IE1hdGguZmxvb3IodGJvZHlIZWlnaHQgLyAocm93Q250PT0xID8gMiA6IDYpKTsKCQl9ZWxzZXsKCQkJcm93SGVpZ2h0MSA9IE1hdGguZmxvb3IodGJvZHlIZWlnaHQgLyByb3dDbnQpOwoJCQlyb3dIZWlnaHQyID0gdGJvZHlIZWlnaHQgLSByb3dIZWlnaHQxKihyb3dDbnQtMSk7CgkJfQoJCWlmICh0ZEhlaWdodEJ1ZyA9PT0gdW5kZWZpbmVkKSB7CgkJCS8vIGJ1ZyBpbiBmaXJlZm94IHdoZXJlIGNlbGwgaGVpZ2h0IGluY2x1ZGVzIHBhZGRpbmcKCQkJdmFyIHRyID0gdGJvZHkuZmluZCgndHI6Zmlyc3QnKSwKCQkJCXRkID0gdHIuZmluZCgndGQ6Zmlyc3QnKTsKCQkJdGQuaGVpZ2h0KHJvd0hlaWdodDEpOwoJCQl0ZEhlaWdodEJ1ZyA9IHJvd0hlaWdodDEgIT0gdGQuaGVpZ2h0KCk7CgkJfQoJCWlmICh0ZEhlaWdodEJ1ZykgewoJCQlsZWZ0VERzLnNsaWNlKDAsIC0xKS5oZWlnaHQocm93SGVpZ2h0MSk7CgkJCWxlZnRURHMuc2xpY2UoLTEpLmhlaWdodChyb3dIZWlnaHQyKTsKCQl9ZWxzZXsKCQkJc2V0T3V0ZXJIZWlnaHQobGVmdFREcy5zbGljZSgwLCAtMSksIHJvd0hlaWdodDEpOwoJCQlzZXRPdXRlckhlaWdodChsZWZ0VERzLnNsaWNlKC0xKSwgcm93SGVpZ2h0Mik7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIHNldFdpZHRoKHdpZHRoKSB7CgkJdmlld1dpZHRoID0gd2lkdGg7CgkJY29sQ29udGVudFBvc2l0aW9ucy5jbGVhcigpOwoJCWNvbFdpZHRoID0gTWF0aC5mbG9vcih2aWV3V2lkdGggLyBjb2xDbnQpOwoJCXNldE91dGVyV2lkdGgodGhlYWQuZmluZCgndGgnKS5zbGljZSgwLCAtMSksIGNvbFdpZHRoKTsKCX0KCQoJCgkKCS8qIERheSBjbGlja2luZyBhbmQgYmluZGluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIGRheUJpbmQoZGF5cykgewoJCWRheXMuY2xpY2soZGF5Q2xpY2spCgkJCS5tb3VzZWRvd24oZGF5U2VsZWN0aW9uTW91c2Vkb3duKTsKCX0KCQoJCglmdW5jdGlvbiBkYXlDbGljayhldikgewoJCWlmICghb3B0KCdzZWxlY3RhYmxlJykpIHsgLy8gU2VsZWN0aW9uTWFuYWdlciB3aWxsIHdvcnJ5IGFib3V0IGRheUNsaWNrCgkJCXZhciBuID0gcGFyc2VJbnQodGhpcy5jbGFzc05hbWUubWF0Y2goL2ZjXC1kYXkoXGQrKS8pWzFdKSwKCQkJCWRhdGUgPSBhZGREYXlzKAoJCQkJCWNsb25lRGF0ZSh0LnZpc1N0YXJ0KSwKCQkJCQlNYXRoLmZsb29yKG4vY29sQ250KSAqIDcgKyBuICUgY29sQ250CgkJCQkpOwoJCQkvLyBUT0RPOiB3aGF0IGFib3V0IHdlZWtlbmRzIGluIG1pZGRsZSBvZiB3ZWVrPwoJCQl0cmlnZ2VyKCdkYXlDbGljaycsIHRoaXMsIGRhdGUsIHRydWUsIGV2KTsKCQl9Cgl9CgkKCQoJCgkvKiBTZW1pLXRyYW5zcGFyZW50IE92ZXJsYXkgSGVscGVycwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiByZW5kZXJEYXlPdmVybGF5KG92ZXJsYXlTdGFydCwgb3ZlcmxheUVuZCwgcmVmcmVzaENvb3JkaW5hdGVHcmlkKSB7IC8vIG92ZXJsYXlFbmQgaXMgZXhjbHVzaXZlCgkJaWYgKHJlZnJlc2hDb29yZGluYXRlR3JpZCkgewoJCQljb29yZGluYXRlR3JpZC5idWlsZCgpOwoJCX0KCQl2YXIgcm93U3RhcnQgPSBjbG9uZURhdGUodC52aXNTdGFydCk7CgkJdmFyIHJvd0VuZCA9IGFkZERheXMoY2xvbmVEYXRlKHJvd1N0YXJ0KSwgY29sQ250KTsKCQlmb3IgKHZhciBpPTA7IGk8cm93Q250OyBpKyspIHsKCQkJdmFyIHN0cmV0Y2hTdGFydCA9IG5ldyBEYXRlKE1hdGgubWF4KHJvd1N0YXJ0LCBvdmVybGF5U3RhcnQpKTsKCQkJdmFyIHN0cmV0Y2hFbmQgPSBuZXcgRGF0ZShNYXRoLm1pbihyb3dFbmQsIG92ZXJsYXlFbmQpKTsKCQkJaWYgKHN0cmV0Y2hTdGFydCA8IHN0cmV0Y2hFbmQpIHsKCQkJCXZhciBjb2xTdGFydCwgY29sRW5kOwoJCQkJaWYgKHJ0bCkgewoJCQkJCWNvbFN0YXJ0ID0gZGF5RGlmZihzdHJldGNoRW5kLCByb3dTdGFydCkqZGlzK2RpdCsxOwoJCQkJCWNvbEVuZCA9IGRheURpZmYoc3RyZXRjaFN0YXJ0LCByb3dTdGFydCkqZGlzK2RpdCsxOwoJCQkJfWVsc2V7CgkJCQkJY29sU3RhcnQgPSBkYXlEaWZmKHN0cmV0Y2hTdGFydCwgcm93U3RhcnQpOwoJCQkJCWNvbEVuZCA9IGRheURpZmYoc3RyZXRjaEVuZCwgcm93U3RhcnQpOwoJCQkJfQoJCQkJZGF5QmluZCgKCQkJCQlyZW5kZXJDZWxsT3ZlcmxheShpLCBjb2xTdGFydCwgaSwgY29sRW5kLTEpCgkJCQkpOwoJCQl9CgkJCWFkZERheXMocm93U3RhcnQsIDcpOwoJCQlhZGREYXlzKHJvd0VuZCwgNyk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIHJlbmRlckNlbGxPdmVybGF5KHJvdzAsIGNvbDAsIHJvdzEsIGNvbDEpIHsgLy8gcm93MSxjb2wxIGlzIGluY2x1c2l2ZQoJCXZhciByZWN0ID0gY29vcmRpbmF0ZUdyaWQucmVjdChyb3cwLCBjb2wwLCByb3cxLCBjb2wxLCBlbGVtZW50KTsKCQlyZXR1cm4gcmVuZGVyT3ZlcmxheShyZWN0LCBlbGVtZW50KTsKCX0KCQoJCgkKCS8qIFNlbGVjdGlvbgoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIGRlZmF1bHRTZWxlY3Rpb25FbmQoc3RhcnREYXRlLCBhbGxEYXkpIHsKCQlyZXR1cm4gY2xvbmVEYXRlKHN0YXJ0RGF0ZSk7Cgl9CgkKCQoJZnVuY3Rpb24gcmVuZGVyU2VsZWN0aW9uKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgYWxsRGF5KSB7CgkJcmVuZGVyRGF5T3ZlcmxheShzdGFydERhdGUsIGFkZERheXMoY2xvbmVEYXRlKGVuZERhdGUpLCAxKSwgdHJ1ZSk7IC8vIHJlYnVpbGQgZXZlcnkgdGltZT8/PwoJfQoJCgkKCWZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkgewoJCWNsZWFyT3ZlcmxheXMoKTsKCX0KCQoJCgkKCS8qIEV4dGVybmFsIERyYWdnaW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gZHJhZ1N0YXJ0KF9kcmFnRWxlbWVudCwgZXYsIHVpKSB7CgkJaG92ZXJMaXN0ZW5lci5zdGFydChmdW5jdGlvbihjZWxsKSB7CgkJCWNsZWFyT3ZlcmxheXMoKTsKCQkJaWYgKGNlbGwpIHsKCQkJCXJlbmRlckNlbGxPdmVybGF5KGNlbGwucm93LCBjZWxsLmNvbCwgY2VsbC5yb3csIGNlbGwuY29sKTsKCQkJfQoJCX0sIGV2KTsKCX0KCQoJCglmdW5jdGlvbiBkcmFnU3RvcChfZHJhZ0VsZW1lbnQsIGV2LCB1aSkgewoJCXZhciBjZWxsID0gaG92ZXJMaXN0ZW5lci5zdG9wKCk7CgkJY2xlYXJPdmVybGF5cygpOwoJCWlmIChjZWxsKSB7CgkJCXZhciBkID0gY2VsbERhdGUoY2VsbCk7CgkJCXRyaWdnZXIoJ2Ryb3AnLCBfZHJhZ0VsZW1lbnQsIGQsIHRydWUsIGV2LCB1aSk7CgkJfQoJfQoJCgkKCQoJLyogVXRpbGl0aWVzCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gZGVmYXVsdEV2ZW50RW5kKGV2ZW50KSB7CgkJcmV0dXJuIGNsb25lRGF0ZShldmVudC5zdGFydCk7Cgl9CgkKCQoJY29vcmRpbmF0ZUdyaWQgPSBuZXcgQ29vcmRpbmF0ZUdyaWQoZnVuY3Rpb24ocm93cywgY29scykgewoJCXZhciBlLCBuLCBwOwoJCXZhciB0ZHMgPSB0Ym9keS5maW5kKCd0cjpmaXJzdCB0ZCcpOwoJCWlmIChydGwpIHsKCQkJdGRzID0gJCh0ZHMuZ2V0KCkucmV2ZXJzZSgpKTsKCQl9CgkJdGRzLmVhY2goZnVuY3Rpb24oaSwgX2UpIHsKCQkJZSA9ICQoX2UpOwoJCQluID0gZS5vZmZzZXQoKS5sZWZ0OwoJCQlpZiAoaSkgewoJCQkJcFsxXSA9IG47CgkJCX0KCQkJcCA9IFtuXTsKCQkJY29sc1tpXSA9IHA7CgkJfSk7CgkJcFsxXSA9IG4gKyBlLm91dGVyV2lkdGgoKTsKCQl0Ym9keS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oaSwgX2UpIHsKCQkJZSA9ICQoX2UpOwoJCQluID0gZS5vZmZzZXQoKS50b3A7CgkJCWlmIChpKSB7CgkJCQlwWzFdID0gbjsKCQkJfQoJCQlwID0gW25dOwoJCQlyb3dzW2ldID0gcDsKCQl9KTsKCQlwWzFdID0gbiArIGUub3V0ZXJIZWlnaHQoKTsKCX0pOwoJCgkKCWhvdmVyTGlzdGVuZXIgPSBuZXcgSG92ZXJMaXN0ZW5lcihjb29yZGluYXRlR3JpZCk7CgkKCQoJY29sQ29udGVudFBvc2l0aW9ucyA9IG5ldyBIb3Jpem9udGFsUG9zaXRpb25DYWNoZShmdW5jdGlvbihjb2wpIHsKCQlyZXR1cm4gdGJvZHkuZmluZCgndGQ6ZXEoJyArIGNvbCArICcpIGRpdiBkaXYnKTsKCX0pOwoJCgkKCWZ1bmN0aW9uIGNvbENvbnRlbnRMZWZ0KGNvbCkgewoJCXJldHVybiBjb2xDb250ZW50UG9zaXRpb25zLmxlZnQoY29sKTsKCX0KCQoJCglmdW5jdGlvbiBjb2xDb250ZW50UmlnaHQoY29sKSB7CgkJcmV0dXJuIGNvbENvbnRlbnRQb3NpdGlvbnMucmlnaHQoY29sKTsKCX0KCQoJCglmdW5jdGlvbiBkYXlPZldlZWtDb2woZGF5T2ZXZWVrKSB7CgkJcmV0dXJuIChkYXlPZldlZWsgLSBNYXRoLm1heChmaXJzdERheSwgbndlKSArIGNvbENudCkgJSBjb2xDbnQ7Cgl9CgkKCQoJZnVuY3Rpb24gZGF0ZUNlbGwoZGF0ZSkgewoJCXJldHVybiB7CgkJCXJvdzogTWF0aC5mbG9vcihkYXlEaWZmKGRhdGUsIHQudmlzU3RhcnQpIC8gNyksCgkJCWNvbDogZGF5T2ZXZWVrQ29sKGRhdGUuZ2V0RGF5KCkpKmRpcyArIGRpdAoJCX07Cgl9CgkKCQoJZnVuY3Rpb24gY2VsbERhdGUoY2VsbCkgewoJCXJldHVybiBhZGREYXlzKGNsb25lRGF0ZSh0LnZpc1N0YXJ0KSwgY2VsbC5yb3cqNyArIGNlbGwuY29sKmRpcytkaXQpOwoJCS8vIFRPRE86IHdoYXQgYWJvdXQgd2Vla2VuZHMgaW4gbWlkZGxlIG9mIHdlZWs/Cgl9CgkKCQoJZnVuY3Rpb24gYWxsRGF5VFIoaSkgewoJCXJldHVybiB0Ym9keS5maW5kKCd0cjplcSgnK2krJyknKTsKCX0KCQoJCglmdW5jdGlvbiBhbGxEYXlCb3VuZHMoaSkgewoJCXJldHVybiB7CgkJCWxlZnQ6IDAsCgkJCXJpZ2h0OiB2aWV3V2lkdGgKCQl9OwoJfQoJCgkKfQoKZnVuY3Rpb24gQmFzaWNFdmVudFJlbmRlcmVyKCkgewoJdmFyIHQgPSB0aGlzOwoJCgkKCS8vIGV4cG9ydHMKCXQucmVuZGVyRXZlbnRzID0gcmVuZGVyRXZlbnRzOwoJdC5jb21waWxlRGF5U2VncyA9IGNvbXBpbGVTZWdzOyAvLyBmb3IgRGF5RXZlbnRSZW5kZXJlcgoJdC5jbGVhckV2ZW50cyA9IGNsZWFyRXZlbnRzOwoJdC5iaW5kRGF5U2VnID0gYmluZERheVNlZzsKCQoJCgkvLyBpbXBvcnRzCglEYXlFdmVudFJlbmRlcmVyLmNhbGwodCk7Cgl2YXIgb3B0ID0gdC5vcHQ7Cgl2YXIgdHJpZ2dlciA9IHQudHJpZ2dlcjsKCXZhciByZXBvcnRFdmVudHMgPSB0LnJlcG9ydEV2ZW50czsKCXZhciByZXBvcnRFdmVudENsZWFyID0gdC5yZXBvcnRFdmVudENsZWFyOwoJdmFyIGV2ZW50RWxlbWVudEhhbmRsZXJzID0gdC5ldmVudEVsZW1lbnRIYW5kbGVyczsKCXZhciBzaG93RXZlbnRzID0gdC5zaG93RXZlbnRzOwoJdmFyIGhpZGVFdmVudHMgPSB0LmhpZGVFdmVudHM7Cgl2YXIgZXZlbnREcm9wID0gdC5ldmVudERyb3A7Cgl2YXIgZ2V0RGF5U2VnbWVudENvbnRhaW5lciA9IHQuZ2V0RGF5U2VnbWVudENvbnRhaW5lcjsKCXZhciBnZXRIb3Zlckxpc3RlbmVyID0gdC5nZXRIb3Zlckxpc3RlbmVyOwoJdmFyIHJlbmRlckRheU92ZXJsYXkgPSB0LnJlbmRlckRheU92ZXJsYXk7Cgl2YXIgY2xlYXJPdmVybGF5cyA9IHQuY2xlYXJPdmVybGF5czsKCXZhciBnZXRSb3dDbnQgPSB0LmdldFJvd0NudDsKCXZhciBnZXRDb2xDbnQgPSB0LmdldENvbENudDsKCXZhciByZW5kZXJEYXlTZWdzID0gdC5yZW5kZXJEYXlTZWdzOwoJdmFyIHJlc2l6YWJsZURheUV2ZW50ID0gdC5yZXNpemFibGVEYXlFdmVudDsKCQoJCgkKCS8qIFJlbmRlcmluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWZ1bmN0aW9uIHJlbmRlckV2ZW50cyhldmVudHMsIG1vZGlmaWVkRXZlbnRJZCkgewoJCXJlcG9ydEV2ZW50cyhldmVudHMpOwoJCXJlbmRlckRheVNlZ3MoY29tcGlsZVNlZ3MoZXZlbnRzKSwgbW9kaWZpZWRFdmVudElkKTsKCX0KCQoJCglmdW5jdGlvbiBjbGVhckV2ZW50cygpIHsKCQlyZXBvcnRFdmVudENsZWFyKCk7CgkJZ2V0RGF5U2VnbWVudENvbnRhaW5lcigpLmVtcHR5KCk7Cgl9CgkKCQoJZnVuY3Rpb24gY29tcGlsZVNlZ3MoZXZlbnRzKSB7CgkJdmFyIHJvd0NudCA9IGdldFJvd0NudCgpLAoJCQljb2xDbnQgPSBnZXRDb2xDbnQoKSwKCQkJZDEgPSBjbG9uZURhdGUodC52aXNTdGFydCksCgkJCWQyID0gYWRkRGF5cyhjbG9uZURhdGUoZDEpLCBjb2xDbnQpLAoJCQl2aXNFdmVudHNFbmRzID0gJC5tYXAoZXZlbnRzLCBleGNsRW5kRGF5KSwKCQkJaSwgcm93LAoJCQlqLCBsZXZlbCwKCQkJaywgc2VnLAoJCQlzZWdzPVtdOwoJCWZvciAoaT0wOyBpPHJvd0NudDsgaSsrKSB7CgkJCXJvdyA9IHN0YWNrU2VncyhzbGljZVNlZ3MoZXZlbnRzLCB2aXNFdmVudHNFbmRzLCBkMSwgZDIpKTsKCQkJZm9yIChqPTA7IGo8cm93Lmxlbmd0aDsgaisrKSB7CgkJCQlsZXZlbCA9IHJvd1tqXTsKCQkJCWZvciAoaz0wOyBrPGxldmVsLmxlbmd0aDsgaysrKSB7CgkJCQkJc2VnID0gbGV2ZWxba107CgkJCQkJc2VnLnJvdyA9IGk7CgkJCQkJc2VnLmxldmVsID0gajsgLy8gbm90IG5lZWRlZCBhbnltb3JlCgkJCQkJc2Vncy5wdXNoKHNlZyk7CgkJCQl9CgkJCX0KCQkJYWRkRGF5cyhkMSwgNyk7CgkJCWFkZERheXMoZDIsIDcpOwoJCX0KCQlyZXR1cm4gc2VnczsKCX0KCQoJCglmdW5jdGlvbiBiaW5kRGF5U2VnKGV2ZW50LCBldmVudEVsZW1lbnQsIHNlZykgewoJCWV2ZW50RWxlbWVudEhhbmRsZXJzKGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCWlmIChldmVudC5lZGl0YWJsZSB8fCBldmVudC5lZGl0YWJsZSA9PT0gdW5kZWZpbmVkICYmIG9wdCgnZWRpdGFibGUnKSkgewoJCQlkcmFnZ2FibGVEYXlFdmVudChldmVudCwgZXZlbnRFbGVtZW50KTsKCQkJaWYgKHNlZy5pc0VuZCkgewoJCQkJcmVzaXphYmxlRGF5RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgc2VnKTsKCQkJfQoJCX0KCX0KCQoJCgkKCS8qIERyYWdnaW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiBkcmFnZ2FibGVEYXlFdmVudChldmVudCwgZXZlbnRFbGVtZW50KSB7CgkJaWYgKCFvcHQoJ2Rpc2FibGVEcmFnZ2luZycpICYmIGV2ZW50RWxlbWVudC5kcmFnZ2FibGUpIHsKCQkJdmFyIGhvdmVyTGlzdGVuZXIgPSBnZXRIb3Zlckxpc3RlbmVyKCk7CgkJCXZhciBkYXlEZWx0YTsKCQkJZXZlbnRFbGVtZW50LmRyYWdnYWJsZSh7CgkJCQl6SW5kZXg6IDksCgkJCQlkZWxheTogNTAsCgkJCQlvcGFjaXR5OiBvcHQoJ2RyYWdPcGFjaXR5JyksCgkJCQlyZXZlcnREdXJhdGlvbjogb3B0KCdkcmFnUmV2ZXJ0RHVyYXRpb24nKSwKCQkJCXN0YXJ0OiBmdW5jdGlvbihldiwgdWkpIHsKCQkJCQl0cmlnZ2VyKCdldmVudERyYWdTdGFydCcsIGV2ZW50RWxlbWVudCwgZXZlbnQsIGV2LCB1aSk7CgkJCQkJaGlkZUV2ZW50cyhldmVudCwgZXZlbnRFbGVtZW50KTsKCQkJCQlob3Zlckxpc3RlbmVyLnN0YXJ0KGZ1bmN0aW9uKGNlbGwsIG9yaWdDZWxsLCByb3dEZWx0YSwgY29sRGVsdGEpIHsKCQkJCQkJZXZlbnRFbGVtZW50LmRyYWdnYWJsZSgnb3B0aW9uJywgJ3JldmVydCcsICFjZWxsIHx8ICFyb3dEZWx0YSAmJiAhY29sRGVsdGEpOwoJCQkJCQljbGVhck92ZXJsYXlzKCk7CgkJCQkJCWlmIChjZWxsKSB7CgkJCQkJCQlkYXlEZWx0YSA9IHJvd0RlbHRhKjcgKyBjb2xEZWx0YSAqIChvcHQoJ2lzUlRMJykgPyAtMSA6IDEpOwoJCQkJCQkJcmVuZGVyRGF5T3ZlcmxheSgKCQkJCQkJCQlhZGREYXlzKGNsb25lRGF0ZShldmVudC5zdGFydCksIGRheURlbHRhKSwKCQkJCQkJCQlhZGREYXlzKGV4Y2xFbmREYXkoZXZlbnQpLCBkYXlEZWx0YSkKCQkJCQkJCSk7CgkJCQkJCX1lbHNlewoJCQkJCQkJZGF5RGVsdGEgPSAwOwoJCQkJCQl9CgkJCQkJfSwgZXYsICdkcmFnJyk7CgkJCQl9LAoJCQkJc3RvcDogZnVuY3Rpb24oZXYsIHVpKSB7CgkJCQkJaG92ZXJMaXN0ZW5lci5zdG9wKCk7CgkJCQkJY2xlYXJPdmVybGF5cygpOwoJCQkJCXRyaWdnZXIoJ2V2ZW50RHJhZ1N0b3AnLCBldmVudEVsZW1lbnQsIGV2ZW50LCBldiwgdWkpOwoJCQkJCWlmIChkYXlEZWx0YSkgewoJCQkJCQlldmVudEVsZW1lbnQuZmluZCgnYScpLnJlbW92ZUF0dHIoJ2hyZWYnKTsgLy8gcHJldmVudHMgc2FmYXJpIGZyb20gdmlzaXRpbmcgdGhlIGxpbmsKCQkJCQkJZXZlbnREcm9wKHRoaXMsIGV2ZW50LCBkYXlEZWx0YSwgMCwgZXZlbnQuYWxsRGF5LCBldiwgdWkpOwoJCQkJCX1lbHNlewoJCQkJCQlpZiAoJC5icm93c2VyLm1zaWUpIHsKCQkJCQkJCWV2ZW50RWxlbWVudC5jc3MoJ2ZpbHRlcicsICcnKTsgLy8gY2xlYXIgSUUgb3BhY2l0eSBzaWRlLWVmZmVjdHMKCQkJCQkJfQoJCQkJCQlzaG93RXZlbnRzKGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQkJCX0KCQkJCX0KCQkJfSk7CgkJfQoJfQoKCn0KCmZjVmlld3MuYWdlbmRhV2VlayA9IEFnZW5kYVdlZWtWaWV3OwoKZnVuY3Rpb24gQWdlbmRhV2Vla1ZpZXcoZWxlbWVudCwgY2FsZW5kYXIpIHsKCXZhciB0ID0gdGhpczsKCQoJCgkvLyBleHBvcnRzCgl0LnJlbmRlciA9IHJlbmRlcjsKCQoJCgkvLyBpbXBvcnRzCglBZ2VuZGFWaWV3LmNhbGwodCwgZWxlbWVudCwgY2FsZW5kYXIsICdhZ2VuZGFXZWVrJyk7Cgl2YXIgb3B0ID0gdC5vcHQ7Cgl2YXIgcmVuZGVyQWdlbmRhID0gdC5yZW5kZXJBZ2VuZGE7Cgl2YXIgZm9ybWF0RGF0ZXMgPSBjYWxlbmRhci5mb3JtYXREYXRlczsKCQoJCgkKCWZ1bmN0aW9uIHJlbmRlcihkYXRlLCBkZWx0YSkgewoJCWlmIChkZWx0YSkgewoJCQlhZGREYXlzKGRhdGUsIGRlbHRhICogNyk7CgkJfQoJCXZhciBzdGFydCA9IGFkZERheXMoY2xvbmVEYXRlKGRhdGUpLCAtKChkYXRlLmdldERheSgpIC0gb3B0KCdmaXJzdERheScpICsgNykgJSA3KSk7CgkJdmFyIGVuZCA9IGFkZERheXMoY2xvbmVEYXRlKHN0YXJ0KSwgNyk7CgkJdmFyIHZpc1N0YXJ0ID0gY2xvbmVEYXRlKHN0YXJ0KTsKCQl2YXIgdmlzRW5kID0gY2xvbmVEYXRlKGVuZCk7CgkJdmFyIHdlZWtlbmRzID0gb3B0KCd3ZWVrZW5kcycpOwoJCWlmICghd2Vla2VuZHMpIHsKCQkJc2tpcFdlZWtlbmQodmlzU3RhcnQpOwoJCQlza2lwV2Vla2VuZCh2aXNFbmQsIC0xLCB0cnVlKTsKCQl9CgkJdC50aXRsZSA9IGZvcm1hdERhdGVzKAoJCQl2aXNTdGFydCwKCQkJYWRkRGF5cyhjbG9uZURhdGUodmlzRW5kKSwgLTEpLAoJCQlvcHQoJ3RpdGxlRm9ybWF0JykKCQkpOwoJCXQuc3RhcnQgPSBzdGFydDsKCQl0LmVuZCA9IGVuZDsKCQl0LnZpc1N0YXJ0ID0gdmlzU3RhcnQ7CgkJdC52aXNFbmQgPSB2aXNFbmQ7CgkJcmVuZGVyQWdlbmRhKHdlZWtlbmRzID8gNyA6IDUpOwoJfQoJCgp9CgpmY1ZpZXdzLmFnZW5kYURheSA9IEFnZW5kYURheVZpZXc7CgpmdW5jdGlvbiBBZ2VuZGFEYXlWaWV3KGVsZW1lbnQsIGNhbGVuZGFyKSB7Cgl2YXIgdCA9IHRoaXM7CgkKCQoJLy8gZXhwb3J0cwoJdC5yZW5kZXIgPSByZW5kZXI7CgkKCQoJLy8gaW1wb3J0cwoJQWdlbmRhVmlldy5jYWxsKHQsIGVsZW1lbnQsIGNhbGVuZGFyLCAnYWdlbmRhRGF5Jyk7Cgl2YXIgb3B0ID0gdC5vcHQ7Cgl2YXIgcmVuZGVyQWdlbmRhID0gdC5yZW5kZXJBZ2VuZGE7Cgl2YXIgZm9ybWF0RGF0ZSA9IGNhbGVuZGFyLmZvcm1hdERhdGU7CgkKCQoJCglmdW5jdGlvbiByZW5kZXIoZGF0ZSwgZGVsdGEpIHsKCQlpZiAoZGVsdGEpIHsKCQkJYWRkRGF5cyhkYXRlLCBkZWx0YSk7CgkJCWlmICghb3B0KCd3ZWVrZW5kcycpKSB7CgkJCQlza2lwV2Vla2VuZChkYXRlLCBkZWx0YSA8IDAgPyAtMSA6IDEpOwoJCQl9CgkJfQoJCXZhciBzdGFydCA9IGNsb25lRGF0ZShkYXRlLCB0cnVlKTsKCQl2YXIgZW5kID0gYWRkRGF5cyhjbG9uZURhdGUoc3RhcnQpLCAxKTsKCQl0LnRpdGxlID0gZm9ybWF0RGF0ZShkYXRlLCBvcHQoJ3RpdGxlRm9ybWF0JykpOwoJCXQuc3RhcnQgPSB0LnZpc1N0YXJ0ID0gc3RhcnQ7CgkJdC5lbmQgPSB0LnZpc0VuZCA9IGVuZDsKCQlyZW5kZXJBZ2VuZGEoMSk7Cgl9CgkKCn0KCnNldERlZmF1bHRzKHsKCWFsbERheVNsb3Q6IHRydWUsCglhbGxEYXlUZXh0OiAnYWxsLWRheScsCglmaXJzdEhvdXI6IDYsCglzbG90TWludXRlczogMzAsCglkZWZhdWx0RXZlbnRNaW51dGVzOiAxMjAsCglheGlzRm9ybWF0OiAnaCg6bW0pdHQnLAoJdGltZUZvcm1hdDogewoJCWFnZW5kYTogJ2g6bW17IC0gaDptbX0nCgl9LAoJZHJhZ09wYWNpdHk6IHsKCQlhZ2VuZGE6IC41Cgl9LAoJbWluVGltZTogMCwKCW1heFRpbWU6IDI0Cn0pOwoKCmZ1bmN0aW9uIEFnZW5kYVZpZXcoZWxlbWVudCwgY2FsZW5kYXIsIHZpZXdOYW1lKSB7Cgl2YXIgdCA9IHRoaXM7CgkKCQoJLy8gZXhwb3J0cwoJdC5yZW5kZXJBZ2VuZGEgPSByZW5kZXJBZ2VuZGE7Cgl0LnNldFdpZHRoID0gc2V0V2lkdGg7Cgl0LnNldEhlaWdodCA9IHNldEhlaWdodDsKCXQuYmVmb3JlSGlkZSA9IGJlZm9yZUhpZGU7Cgl0LmFmdGVyU2hvdyA9IGFmdGVyU2hvdzsKCXQuZGVmYXVsdEV2ZW50RW5kID0gZGVmYXVsdEV2ZW50RW5kOwoJdC50aW1lUG9zaXRpb24gPSB0aW1lUG9zaXRpb247Cgl0LmRheU9mV2Vla0NvbCA9IGRheU9mV2Vla0NvbDsKCXQuZGF0ZUNlbGwgPSBkYXRlQ2VsbDsKCXQuY2VsbERhdGUgPSBjZWxsRGF0ZTsKCXQuY2VsbElzQWxsRGF5ID0gY2VsbElzQWxsRGF5OwoJdC5hbGxEYXlUUiA9IGFsbERheVRSOwoJdC5hbGxEYXlCb3VuZHMgPSBhbGxEYXlCb3VuZHM7Cgl0LmdldEhvdmVyTGlzdGVuZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdmVyTGlzdGVuZXIgfTsKCXQuY29sQ29udGVudExlZnQgPSBjb2xDb250ZW50TGVmdDsKCXQuY29sQ29udGVudFJpZ2h0ID0gY29sQ29udGVudFJpZ2h0OwoJdC5nZXREYXlTZWdtZW50Q29udGFpbmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiBkYXlTZWdtZW50Q29udGFpbmVyIH07Cgl0LmdldFNsb3RTZWdtZW50Q29udGFpbmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiBzbG90U2VnbWVudENvbnRhaW5lciB9OwoJdC5nZXRNaW5NaW51dGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG1pbk1pbnV0ZSB9OwoJdC5nZXRNYXhNaW51dGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG1heE1pbnV0ZSB9OwoJdC5nZXRCb2R5Q29udGVudCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYm9keUNvbnRlbnQgfTsKCXQuZ2V0Um93Q250ID0gZnVuY3Rpb24oKSB7IHJldHVybiAxIH07Cgl0LmdldENvbENudCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29sQ250IH07Cgl0LmdldENvbFdpZHRoID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb2xXaWR0aCB9OwoJdC5nZXRTbG90SGVpZ2h0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBzbG90SGVpZ2h0IH07Cgl0LmRlZmF1bHRTZWxlY3Rpb25FbmQgPSBkZWZhdWx0U2VsZWN0aW9uRW5kOwoJdC5yZW5kZXJEYXlPdmVybGF5ID0gcmVuZGVyRGF5T3ZlcmxheTsKCXQucmVuZGVyU2VsZWN0aW9uID0gcmVuZGVyU2VsZWN0aW9uOwoJdC5jbGVhclNlbGVjdGlvbiA9IGNsZWFyU2VsZWN0aW9uOwoJdC5kcmFnU3RhcnQgPSBkcmFnU3RhcnQ7Cgl0LmRyYWdTdG9wID0gZHJhZ1N0b3A7CgkKCQoJLy8gaW1wb3J0cwoJVmlldy5jYWxsKHQsIGVsZW1lbnQsIGNhbGVuZGFyLCB2aWV3TmFtZSk7CglPdmVybGF5TWFuYWdlci5jYWxsKHQpOwoJU2VsZWN0aW9uTWFuYWdlci5jYWxsKHQpOwoJQWdlbmRhRXZlbnRSZW5kZXJlci5jYWxsKHQpOwoJdmFyIG9wdCA9IHQub3B0OwoJdmFyIHRyaWdnZXIgPSB0LnRyaWdnZXI7Cgl2YXIgY2xlYXJFdmVudHMgPSB0LmNsZWFyRXZlbnRzOwoJdmFyIHJlbmRlck92ZXJsYXkgPSB0LnJlbmRlck92ZXJsYXk7Cgl2YXIgY2xlYXJPdmVybGF5cyA9IHQuY2xlYXJPdmVybGF5czsKCXZhciByZXBvcnRTZWxlY3Rpb24gPSB0LnJlcG9ydFNlbGVjdGlvbjsKCXZhciB1bnNlbGVjdCA9IHQudW5zZWxlY3Q7Cgl2YXIgZGF5U2VsZWN0aW9uTW91c2Vkb3duID0gdC5kYXlTZWxlY3Rpb25Nb3VzZWRvd247Cgl2YXIgc2xvdFNlZ0h0bWwgPSB0LnNsb3RTZWdIdG1sOwoJdmFyIGZvcm1hdERhdGUgPSBjYWxlbmRhci5mb3JtYXREYXRlOwoJCgkKCS8vIGxvY2FscwoJdmFyIGhlYWQsIGJvZHksIGJvZHlDb250ZW50LCBib2R5VGFibGUsIGJnOwoJdmFyIGNvbENudDsKCXZhciBzbG90Q250PTA7IC8vIHNwYW5uaW5nIGFsbCB0aGUgd2F5IGFjcm9zcwoJdmFyIGF4aXNXaWR0aCwgY29sV2lkdGgsIHNsb3RIZWlnaHQ7Cgl2YXIgdmlld1dpZHRoLCB2aWV3SGVpZ2h0OwoJdmFyIHNhdmVkU2Nyb2xsVG9wOwoJdmFyIHRtLCBmaXJzdERheTsKCXZhciBud2U7ICAgICAgICAgICAgLy8gbm8gd2Vla2VuZHMgKGludCkKCXZhciBydGwsIGRpcywgZGl0OyAgLy8gZGF5IGluZGV4IHNpZ24gLyB0cmFuc2xhdGUKCXZhciBtaW5NaW51dGUsIG1heE1pbnV0ZTsKCXZhciBjb29yZGluYXRlR3JpZDsKCXZhciBob3Zlckxpc3RlbmVyOwoJdmFyIGNvbENvbnRlbnRQb3NpdGlvbnM7Cgl2YXIgc2xvdFRvcENhY2hlID0ge307Cgl2YXIgc2VsZWN0aW9uSGVscGVyOwoJdmFyIGRheVNlZ21lbnRDb250YWluZXI7Cgl2YXIgc2xvdFNlZ21lbnRDb250YWluZXI7CgkKCgkKCS8qIFJlbmRlcmluZwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWRpc2FibGVUZXh0U2VsZWN0aW9uKGVsZW1lbnQuYWRkQ2xhc3MoJ2ZjLWFnZW5kYScpKTsKCQoJCglmdW5jdGlvbiByZW5kZXJBZ2VuZGEoYykgewoJCgkJY29sQ250ID0gYzsKCQkKCQkvLyB1cGRhdGUgb3B0aW9uLWRlcml2ZWQgdmFyaWFibGVzCgkJdG0gPSBvcHQoJ3RoZW1lJykgPyAndWknIDogJ2ZjJzsKCQlud2UgPSBvcHQoJ3dlZWtlbmRzJykgPyAwIDogMTsKCQlmaXJzdERheSA9IG9wdCgnZmlyc3REYXknKTsKCQlpZiAocnRsID0gb3B0KCdpc1JUTCcpKSB7CgkJCWRpcyA9IC0xOwoJCQlkaXQgPSBjb2xDbnQgLSAxOwoJCX1lbHNlewoJCQlkaXMgPSAxOwoJCQlkaXQgPSAwOwoJCX0KCQltaW5NaW51dGUgPSBwYXJzZVRpbWUob3B0KCdtaW5UaW1lJykpOwoJCW1heE1pbnV0ZSA9IHBhcnNlVGltZShvcHQoJ21heFRpbWUnKSk7CgkJCgkJdmFyIGQwID0gcnRsID8gYWRkRGF5cyhjbG9uZURhdGUodC52aXNFbmQpLCAtMSkgOiBjbG9uZURhdGUodC52aXNTdGFydCksCgkJCWQgPSBjbG9uZURhdGUoZDApLAoJCQl0b2RheSA9IGNsZWFyVGltZShuZXcgRGF0ZSgpKSwKCQkJY29sRm9ybWF0ID0gb3B0KCdjb2x1bW5Gb3JtYXQnKTsKCQkKCQlpZiAoIWhlYWQpIHsgLy8gZmlyc3QgdGltZSByZW5kZXJpbmcsIGJ1aWxkIGZyb20gc2NyYXRjaAoJCQoJCQl2YXIgaSwKCQkJCW1pbnV0ZXMsCgkJCQlzbG90Tm9ybWFsID0gb3B0KCdzbG90TWludXRlcycpICUgMTUgPT0gMCwgLy8uLi4KCQkJCgkJCS8vIGhlYWQKCQkJcyA9ICI8ZGl2IGNsYXNzPSdmYy1hZ2VuZGEtaGVhZCcgc3R5bGU9J3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6NCc+IiArCgkJCQkiPHRhYmxlIHN0eWxlPSd3aWR0aDoxMDAlJz4iICsKCQkJCSI8dHIgY2xhc3M9J2ZjLWZpcnN0IiArIChvcHQoJ2FsbERheVNsb3QnKSA/ICcnIDogJyBmYy1sYXN0JykgKyAiJz4iICsKCQkJCSI8dGggY2xhc3M9J2ZjLWxlZnRtb3N0ICIgKwoJCQkJCXRtICsgIi1zdGF0ZS1kZWZhdWx0Jz4mbmJzcDs8L3RoPiI7CgkJCWZvciAoaT0wOyBpPGNvbENudDsgaSsrKSB7CgkJCQlzICs9ICI8dGggY2xhc3M9J2ZjLSIgKwoJCQkJCWRheUlEc1tkLmdldERheSgpXSArICcgJyArIC8vIG5lZWRzIHRvIGJlIGZpcnN0CgkJCQkJdG0gKyAnLXN0YXRlLWRlZmF1bHQnICsKCQkJCQkiJz4iICsgZm9ybWF0RGF0ZShkLCBjb2xGb3JtYXQpICsgIjwvdGg+IjsKCQkJCWFkZERheXMoZCwgZGlzKTsKCQkJCWlmIChud2UpIHsKCQkJCQlza2lwV2Vla2VuZChkLCBkaXMpOwoJCQkJfQoJCQl9CgkJCXMgKz0gIjx0aCBjbGFzcz0nIiArIHRtICsgIi1zdGF0ZS1kZWZhdWx0Jz4mbmJzcDs8L3RoPjwvdHI+IjsKCQkJaWYgKG9wdCgnYWxsRGF5U2xvdCcpKSB7CgkJCQlzICs9ICI8dHIgY2xhc3M9J2ZjLWFsbC1kYXknPiIgKwoJCQkJCQkiPHRoIGNsYXNzPSdmYy1heGlzIGZjLWxlZnRtb3N0ICIgKyB0bSArICItc3RhdGUtZGVmYXVsdCc+IiArIG9wdCgnYWxsRGF5VGV4dCcpICsgIjwvdGg+IiArCgkJCQkJCSI8dGQgY29sc3Bhbj0nIiArIGNvbENudCArICInIGNsYXNzPSciICsgdG0gKyAiLXN0YXRlLWRlZmF1bHQnPiIgKwoJCQkJCQkJIjxkaXYgY2xhc3M9J2ZjLWRheS1jb250ZW50Jz48ZGl2IHN0eWxlPSdwb3NpdGlvbjpyZWxhdGl2ZSc+Jm5ic3A7PC9kaXY+PC9kaXY+PC90ZD4iICsKCQkJCQkJIjx0aCBjbGFzcz0nIiArIHRtICsgIi1zdGF0ZS1kZWZhdWx0Jz4mbmJzcDs8L3RoPiIgKwoJCQkJCSI8L3RyPjx0ciBjbGFzcz0nZmMtZGl2aWRlciBmYy1sYXN0Jz48dGggY29sc3Bhbj0nIiArIChjb2xDbnQrMikgKyAiJyBjbGFzcz0nIiArCgkJCQkJCXRtICsgIi1zdGF0ZS1kZWZhdWx0IGZjLWxlZnRtb3N0Jz48ZGl2Lz48L3RoPjwvdHI+IjsKCQkJfQoJCQlzKz0gIjwvdGFibGU+PC9kaXY+IjsKCQkJaGVhZCA9ICQocykuYXBwZW5kVG8oZWxlbWVudCk7CgkJCWRheUJpbmQoaGVhZC5maW5kKCd0ZCcpKTsKCQkJCgkJCS8vIGFsbC1kYXkgZXZlbnQgY29udGFpbmVyCgkJCWRheVNlZ21lbnRDb250YWluZXIgPSAkKCI8ZGl2IHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Ojg7dG9wOjA7bGVmdDowJy8+IikuYXBwZW5kVG8oaGVhZCk7CgkJCQoJCQkvLyBib2R5CgkJCWQgPSB6ZXJvRGF0ZSgpOwoJCQl2YXIgbWF4ZCA9IGFkZE1pbnV0ZXMoY2xvbmVEYXRlKGQpLCBtYXhNaW51dGUpOwoJCQlhZGRNaW51dGVzKGQsIG1pbk1pbnV0ZSk7CgkJCXMgPSAiPHRhYmxlPiI7CgkJCWZvciAoaT0wOyBkIDwgbWF4ZDsgaSsrKSB7CgkJCQltaW51dGVzID0gZC5nZXRNaW51dGVzKCk7CgkJCQlzICs9ICI8dHIgY2xhc3M9JyIgKwoJCQkJCSghaSA/ICdmYy1maXJzdCcgOiAoIW1pbnV0ZXMgPyAnJyA6ICdmYy1taW5vcicpKSArCgkJCQkJIic+PHRoIGNsYXNzPSdmYy1heGlzIGZjLWxlZnRtb3N0ICIgKyB0bSArICItc3RhdGUtZGVmYXVsdCc+IiArCgkJCQkJKCghc2xvdE5vcm1hbCB8fCAhbWludXRlcykgPyBmb3JtYXREYXRlKGQsIG9wdCgnYXhpc0Zvcm1hdCcpKSA6ICcmbmJzcDsnKSArIAoJCQkJCSI8L3RoPjx0ZCBjbGFzcz0nZmMtc2xvdCIgKyBpICsgJyAnICsKCQkJCQkJdG0gKyAiLXN0YXRlLWRlZmF1bHQnPjxkaXYgc3R5bGU9J3Bvc2l0aW9uOnJlbGF0aXZlJz4mbmJzcDs8L2Rpdj48L3RkPjwvdHI+IjsKCQkJCWFkZE1pbnV0ZXMoZCwgb3B0KCdzbG90TWludXRlcycpKTsKCQkJCXNsb3RDbnQrKzsKCQkJfQoJCQlzICs9ICI8L3RhYmxlPiI7CgkJCWJvZHkgPSAkKCI8ZGl2IGNsYXNzPSdmYy1hZ2VuZGEtYm9keScgc3R5bGU9J3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MjtvdmVyZmxvdzphdXRvJy8+IikKCQkJCS5hcHBlbmQoYm9keUNvbnRlbnQgPSAkKCI8ZGl2IHN0eWxlPSdwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW4nPiIpCgkJCQkJLmFwcGVuZChib2R5VGFibGUgPSAkKHMpKSkKCQkJCS5hcHBlbmRUbyhlbGVtZW50KTsKCQkJc2xvdEJpbmQoYm9keS5maW5kKCd0ZCcpKTsKCQkJCgkJCS8vIHNsb3QgZXZlbnQgY29udGFpbmVyCgkJCXNsb3RTZWdtZW50Q29udGFpbmVyID0gJCgiPGRpdiBzdHlsZT0ncG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDo4O3RvcDowO2xlZnQ6MCcvPiIpLmFwcGVuZFRvKGJvZHlDb250ZW50KTsKCQkJCgkJCS8vIGJhY2tncm91bmQgc3RyaXBlcwoJCQlkID0gY2xvbmVEYXRlKGQwKTsKCQkJcyA9ICI8ZGl2IGNsYXNzPSdmYy1hZ2VuZGEtYmcnIHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEnPiIgKwoJCQkJIjx0YWJsZSBzdHlsZT0nd2lkdGg6MTAwJTtoZWlnaHQ6MTAwJSc+PHRyIGNsYXNzPSdmYy1maXJzdCc+IjsKCQkJZm9yIChpPTA7IGk8Y29sQ250OyBpKyspIHsKCQkJCXMgKz0gIjx0ZCBjbGFzcz0nZmMtIiArCgkJCQkJZGF5SURzW2QuZ2V0RGF5KCldICsgJyAnICsgLy8gbmVlZHMgdG8gYmUgZmlyc3QKCQkJCQl0bSArICctc3RhdGUtZGVmYXVsdCAnICsKCQkJCQkoIWkgPyAnZmMtbGVmdG1vc3QgJyA6ICcnKSArCgkJCQkJKCtkID09ICt0b2RheSA/IHRtICsgJy1zdGF0ZS1oaWdobGlnaHQgZmMtdG9kYXknIDogJ2ZjLW5vdC10b2RheScpICsKCQkJCQkiJz48ZGl2IGNsYXNzPSdmYy1kYXktY29udGVudCc+PGRpdj4mbmJzcDs8L2Rpdj48L2Rpdj48L3RkPiI7CgkJCQlhZGREYXlzKGQsIGRpcyk7CgkJCQlpZiAobndlKSB7CgkJCQkJc2tpcFdlZWtlbmQoZCwgZGlzKTsKCQkJCX0KCQkJfQoJCQlzICs9ICI8L3RyPjwvdGFibGU+PC9kaXY+IjsKCQkJYmcgPSAkKHMpLmFwcGVuZFRvKGVsZW1lbnQpOwoJCQkKCQl9ZWxzZXsgLy8gc2tlbGV0b24gYWxyZWFkeSBidWlsdCwganVzdCBtb2RpZnkgaXQKCQkKCQkJY2xlYXJFdmVudHMoKTsKCQkJCgkJCS8vIHJlZG8gY29sdW1uIGhlYWRlciB0ZXh0IGFuZCBjbGFzcwoJCQloZWFkLmZpbmQoJ3RyOmZpcnN0IHRoJykuc2xpY2UoMSwgLTEpLmVhY2goZnVuY3Rpb24oaSwgdGgpIHsKCQkJCSQodGgpLnRleHQoZm9ybWF0RGF0ZShkLCBjb2xGb3JtYXQpKTsKCQkJCXRoLmNsYXNzTmFtZSA9IHRoLmNsYXNzTmFtZS5yZXBsYWNlKC9eZmMtXHcrKD89ICkvLCAnZmMtJyArIGRheUlEc1tkLmdldERheSgpXSk7CgkJCQlhZGREYXlzKGQsIGRpcyk7CgkJCQlpZiAobndlKSB7CgkJCQkJc2tpcFdlZWtlbmQoZCwgZGlzKTsKCQkJCX0KCQkJfSk7CgkJCQoJCQkvLyBjaGFuZ2UgY2xhc3NlcyBvZiBiYWNrZ3JvdW5kIHN0cmlwZXMKCQkJZCA9IGNsb25lRGF0ZShkMCk7CgkJCWJnLmZpbmQoJ3RkJykuZWFjaChmdW5jdGlvbihpLCB0ZCkgewoJCQkJdGQuY2xhc3NOYW1lID0gdGQuY2xhc3NOYW1lLnJlcGxhY2UoL15mYy1cdysoPz0gKS8sICdmYy0nICsgZGF5SURzW2QuZ2V0RGF5KCldKTsKCQkJCWlmICgrZCA9PSArdG9kYXkpIHsKCQkJCQkkKHRkKQoJCQkJCQkucmVtb3ZlQ2xhc3MoJ2ZjLW5vdC10b2RheScpCgkJCQkJCS5hZGRDbGFzcygnZmMtdG9kYXknKQoJCQkJCQkuYWRkQ2xhc3ModG0gKyAnLXN0YXRlLWhpZ2hsaWdodCcpOwoJCQkJfWVsc2V7CgkJCQkJJCh0ZCkKCQkJCQkJLmFkZENsYXNzKCdmYy1ub3QtdG9kYXknKQoJCQkJCQkucmVtb3ZlQ2xhc3MoJ2ZjLXRvZGF5JykKCQkJCQkJLnJlbW92ZUNsYXNzKHRtICsgJy1zdGF0ZS1oaWdobGlnaHQnKTsKCQkJCX0KCQkJCWFkZERheXMoZCwgZGlzKTsKCQkJCWlmIChud2UpIHsKCQkJCQlza2lwV2Vla2VuZChkLCBkaXMpOwoJCQkJfQoJCQl9KTsKCQkKCQl9CgkJCgl9CgkKCQoJCglmdW5jdGlvbiBzZXRIZWlnaHQoaGVpZ2h0LCBkYXRlQ2hhbmdlZCkgewoJCgkJaWYgKGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7CgkJCWhlaWdodCA9IHZpZXdIZWlnaHQ7CgkJfQoJCQoJCXZpZXdIZWlnaHQgPSBoZWlnaHQ7CgkJc2xvdFRvcENhY2hlID0ge307CgkJCgkJdmFyIGJvZHlIZWlnaHQgPSBoZWlnaHQgLSBoZWFkLmhlaWdodCgpOwoJCWJvZHlIZWlnaHQgPSBNYXRoLm1pbihib2R5SGVpZ2h0LCBib2R5VGFibGUuaGVpZ2h0KCkpOyAvLyBzaHJpbmsgdG8gZml0IHRhYmxlCgkJYm9keS5oZWlnaHQoYm9keUhlaWdodCk7CgkJCgkJc2xvdEhlaWdodCA9IGJvZHkuZmluZCgndHI6Zmlyc3QgZGl2JykuaGVpZ2h0KCkgKyAxOwoJCQoJCWlmIChkYXRlQ2hhbmdlZCkgewoJCQlyZXNldFNjcm9sbCgpOwoJCX0KCX0KCQoJCgkKCWZ1bmN0aW9uIHNldFdpZHRoKHdpZHRoKSB7CgkJdmlld1dpZHRoID0gd2lkdGg7CgkJY29sQ29udGVudFBvc2l0aW9ucy5jbGVhcigpOwoJCQoJCWJvZHkud2lkdGgod2lkdGgpLmNzcygnb3ZlcmZsb3cnLCAnYXV0bycpOwoJCWJvZHlUYWJsZS53aWR0aCgnJyk7CgkJCgkJdmFyIHRvcFREcyA9IGhlYWQuZmluZCgndHI6Zmlyc3QgdGgnKSwKCQkJYWxsRGF5TGFzdFRIID0gaGVhZC5maW5kKCd0ci5mYy1hbGwtZGF5IHRoOmxhc3QnKSwKCQkJc3RyaXBlVERzID0gYmcuZmluZCgndGQnKSwKCQkJY2xpZW50V2lkdGggPSBib2R5WzBdLmNsaWVudFdpZHRoOwoJCQkKCQlib2R5VGFibGUud2lkdGgoY2xpZW50V2lkdGgpOwoJCWNsaWVudFdpZHRoID0gYm9keVswXS5jbGllbnRXaWR0aDsgLy8gaW4gaWU2LCBzb21ldGltZXMgcHJldmlvdXMgY2xpZW50V2lkdGggd2FzIHdyb25nbHkgcmVwb3J0ZWQKCQlib2R5VGFibGUud2lkdGgoY2xpZW50V2lkdGgpOwoJCQoJCS8vIHRpbWUtYXhpcyB3aWR0aAoJCWF4aXNXaWR0aCA9IDA7CgkJc2V0T3V0ZXJXaWR0aCgKCQkJaGVhZC5maW5kKCd0cjpsdCgyKSB0aDpmaXJzdCcpLmFkZChib2R5LmZpbmQoJ3RyOmZpcnN0IHRoJykpCgkJCQkud2lkdGgoMSkKCQkJCS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJCWF4aXNXaWR0aCA9IE1hdGgubWF4KGF4aXNXaWR0aCwgJCh0aGlzKS5vdXRlcldpZHRoKCkpOwoJCQkJfSksCgkJCWF4aXNXaWR0aAoJCSk7CgkJCgkJLy8gY29sdW1uIHdpZHRoLCBleGNlcHQgZm9yIGxhc3QgY29sdW1uCgkJY29sV2lkdGggPSBNYXRoLmZsb29yKChjbGllbnRXaWR0aCAtIGF4aXNXaWR0aCkgLyBjb2xDbnQpOwoJCXNldE91dGVyV2lkdGgoc3RyaXBlVERzLnNsaWNlKDAsIC0xKSwgY29sV2lkdGgpOwoJCXNldE91dGVyV2lkdGgodG9wVERzLnNsaWNlKDEsIC0yKSwgY29sV2lkdGgpOwoJCQoJCS8vIGNvbHVtbiB3aWR0aCBmb3IgbGFzdCBjb2x1bW4KCQlpZiAod2lkdGggIT0gY2xpZW50V2lkdGgpIHsgLy8gaGFzIHNjcm9sbGJhcgoJCQlzZXRPdXRlcldpZHRoKHRvcFREcy5zbGljZSgtMiwgLTEpLCBjbGllbnRXaWR0aCAtIGF4aXNXaWR0aCAtIGNvbFdpZHRoKihjb2xDbnQtMSkpOwoJCQl0b3BURHMuc2xpY2UoLTEpLnNob3coKTsKCQkJYWxsRGF5TGFzdFRILnNob3coKTsKCQl9ZWxzZXsKCQkJYm9keS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpOwoJCQl0b3BURHMuc2xpY2UoLTIsIC0xKS53aWR0aCgnJyk7CgkJCXRvcFREcy5zbGljZSgtMSkuaGlkZSgpOwoJCQlhbGxEYXlMYXN0VEguaGlkZSgpOwoJCX0KCQkKCQliZy5jc3MoewoJCQl0b3A6IGhlYWQuZmluZCgndHInKS5oZWlnaHQoKSwKCQkJbGVmdDogYXhpc1dpZHRoLAoJCQl3aWR0aDogY2xpZW50V2lkdGggLSBheGlzV2lkdGgsCgkJCWhlaWdodDogdmlld0hlaWdodAoJCX0pOwoJfQoJCgkKCWZ1bmN0aW9uIHJlc2V0U2Nyb2xsKCkgewoJCXZhciBkMCA9IHplcm9EYXRlKCksCgkJCXNjcm9sbERhdGUgPSBjbG9uZURhdGUoZDApOwoJCXNjcm9sbERhdGUuc2V0SG91cnMob3B0KCdmaXJzdEhvdXInKSk7CgkJdmFyIHRvcCA9IHRpbWVQb3NpdGlvbihkMCwgc2Nyb2xsRGF0ZSkgKyAxLCAvLyArMSBmb3IgdGhlIGJvcmRlcgoJCQlzY3JvbGwgPSBmdW5jdGlvbigpIHsKCQkJCWJvZHkuc2Nyb2xsVG9wKHRvcCk7CgkJCX07CgkJc2Nyb2xsKCk7CgkJc2V0VGltZW91dChzY3JvbGwsIDApOyAvLyBvdmVycmlkZXMgYW55IHByZXZpb3VzIHNjcm9sbCBzdGF0ZSBtYWRlIGJ5IHRoZSBicm93c2VyCgl9CgkKCQoJZnVuY3Rpb24gYmVmb3JlSGlkZSgpIHsKCQlzYXZlZFNjcm9sbFRvcCA9IGJvZHkuc2Nyb2xsVG9wKCk7Cgl9CgkKCQoJZnVuY3Rpb24gYWZ0ZXJTaG93KCkgewoJCWJvZHkuc2Nyb2xsVG9wKHNhdmVkU2Nyb2xsVG9wKTsKCX0KCQoJCgkKCS8qIFNsb3QvRGF5IGNsaWNraW5nIGFuZCBiaW5kaW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCglmdW5jdGlvbiBkYXlCaW5kKHRkcykgewoJCXRkcy5jbGljayhzbG90Q2xpY2spCgkJCS5tb3VzZWRvd24oZGF5U2VsZWN0aW9uTW91c2Vkb3duKTsKCX0KCgoJZnVuY3Rpb24gc2xvdEJpbmQodGRzKSB7CgkJdGRzLmNsaWNrKHNsb3RDbGljaykKCQkJLm1vdXNlZG93bihzbG90U2VsZWN0aW9uTW91c2Vkb3duKTsKCX0KCQoJCglmdW5jdGlvbiBzbG90Q2xpY2soZXYpIHsKCQlpZiAoIW9wdCgnc2VsZWN0YWJsZScpKSB7IC8vIFNlbGVjdGlvbk1hbmFnZXIgd2lsbCB3b3JyeSBhYm91dCBkYXlDbGljawoJCQl2YXIgY29sID0gTWF0aC5taW4oY29sQ250LTEsIE1hdGguZmxvb3IoKGV2LnBhZ2VYIC0gYmcub2Zmc2V0KCkubGVmdCkgLyBjb2xXaWR0aCkpLAoJCQkJZGF0ZSA9IGFkZERheXMoY2xvbmVEYXRlKHQudmlzU3RhcnQpLCBjb2wqZGlzK2RpdCksCgkJCQlyb3dNYXRjaCA9IHRoaXMuY2xhc3NOYW1lLm1hdGNoKC9mYy1zbG90KFxkKykvKTsKCQkJaWYgKHJvd01hdGNoKSB7CgkJCQl2YXIgbWlucyA9IHBhcnNlSW50KHJvd01hdGNoWzFdKSAqIG9wdCgnc2xvdE1pbnV0ZXMnKSwKCQkJCQlob3VycyA9IE1hdGguZmxvb3IobWlucy82MCk7CgkJCQlkYXRlLnNldEhvdXJzKGhvdXJzKTsKCQkJCWRhdGUuc2V0TWludXRlcyhtaW5zJTYwICsgbWluTWludXRlKTsKCQkJCXRyaWdnZXIoJ2RheUNsaWNrJywgdGhpcywgZGF0ZSwgZmFsc2UsIGV2KTsKCQkJfWVsc2V7CgkJCQl0cmlnZ2VyKCdkYXlDbGljaycsIHRoaXMsIGRhdGUsIHRydWUsIGV2KTsKCQkJfQoJCX0KCX0KCQoJCgkKCS8qIFNlbWktdHJhbnNwYXJlbnQgT3ZlcmxheSBIZWxwZXJzCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCglmdW5jdGlvbiByZW5kZXJEYXlPdmVybGF5KHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgcmVmcmVzaENvb3JkaW5hdGVHcmlkKSB7IC8vIGVuZERhdGUgaXMgZXhjbHVzaXZlCgkJaWYgKHJlZnJlc2hDb29yZGluYXRlR3JpZCkgewoJCQljb29yZGluYXRlR3JpZC5idWlsZCgpOwoJCX0KCQl2YXIgdmlzU3RhcnQgPSBjbG9uZURhdGUodC52aXNTdGFydCk7CgkJdmFyIHN0YXJ0Q29sLCBlbmRDb2w7CgkJaWYgKHJ0bCkgewoJCQlzdGFydENvbCA9IGRheURpZmYoZW5kRGF0ZSwgdmlzU3RhcnQpKmRpcytkaXQrMTsKCQkJZW5kQ29sID0gZGF5RGlmZihzdGFydERhdGUsIHZpc1N0YXJ0KSpkaXMrZGl0KzE7CgkJfWVsc2V7CgkJCXN0YXJ0Q29sID0gZGF5RGlmZihzdGFydERhdGUsIHZpc1N0YXJ0KTsKCQkJZW5kQ29sID0gZGF5RGlmZihlbmREYXRlLCB2aXNTdGFydCk7CgkJfQoJCXN0YXJ0Q29sID0gTWF0aC5tYXgoMCwgc3RhcnRDb2wpOwoJCWVuZENvbCA9IE1hdGgubWluKGNvbENudCwgZW5kQ29sKTsKCQlpZiAoc3RhcnRDb2wgPCBlbmRDb2wpIHsKCQkJZGF5QmluZCgKCQkJCXJlbmRlckNlbGxPdmVybGF5KDAsIHN0YXJ0Q29sLCAwLCBlbmRDb2wtMSkKCQkJKTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gcmVuZGVyQ2VsbE92ZXJsYXkoY29sMCwgcm93MCwgY29sMSwgcm93MSkgewoJCXZhciByZWN0ID0gY29vcmRpbmF0ZUdyaWQucmVjdChjb2wwLCByb3cwLCBjb2wxLCByb3cxLCBoZWFkKTsKCQlyZXR1cm4gcmVuZGVyT3ZlcmxheShyZWN0LCBoZWFkKTsKCX0KCQoKCWZ1bmN0aW9uIHJlbmRlclNsb3RPdmVybGF5KG92ZXJsYXlTdGFydCwgb3ZlcmxheUVuZCkgewoJCXZhciBkYXlTdGFydCA9IGNsb25lRGF0ZSh0LnZpc1N0YXJ0KTsKCQl2YXIgZGF5RW5kID0gYWRkRGF5cyhjbG9uZURhdGUoZGF5U3RhcnQpLCAxKTsKCQlmb3IgKHZhciBpPTA7IGk8Y29sQ250OyBpKyspIHsKCQkJdmFyIHN0cmV0Y2hTdGFydCA9IG5ldyBEYXRlKE1hdGgubWF4KGRheVN0YXJ0LCBvdmVybGF5U3RhcnQpKTsKCQkJdmFyIHN0cmV0Y2hFbmQgPSBuZXcgRGF0ZShNYXRoLm1pbihkYXlFbmQsIG92ZXJsYXlFbmQpKTsKCQkJaWYgKHN0cmV0Y2hTdGFydCA8IHN0cmV0Y2hFbmQpIHsKCQkJCXZhciBjb2wgPSBpKmRpcytkaXQ7CgkJCQl2YXIgcmVjdCA9IGNvb3JkaW5hdGVHcmlkLnJlY3QoMCwgY29sLCAwLCBjb2wsIGJvZHlDb250ZW50KTsgLy8gb25seSB1c2UgaXQgZm9yIGhvcml6b250YWwgY29vcmRzCgkJCQl2YXIgdG9wID0gdGltZVBvc2l0aW9uKGRheVN0YXJ0LCBzdHJldGNoU3RhcnQpOwoJCQkJdmFyIGJvdHRvbSA9IHRpbWVQb3NpdGlvbihkYXlTdGFydCwgc3RyZXRjaEVuZCk7CgkJCQlyZWN0LnRvcCA9IHRvcDsKCQkJCXJlY3QuaGVpZ2h0ID0gYm90dG9tIC0gdG9wOwoJCQkJc2xvdEJpbmQoCgkJCQkJcmVuZGVyT3ZlcmxheShyZWN0LCBib2R5Q29udGVudCkKCQkJCSk7CgkJCX0KCQkJYWRkRGF5cyhkYXlTdGFydCwgMSk7CgkJCWFkZERheXMoZGF5RW5kLCAxKTsKCQl9Cgl9CgkKCQoJCgkvKiBDb29yZGluYXRlIFV0aWxpdGllcwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCWNvb3JkaW5hdGVHcmlkID0gbmV3IENvb3JkaW5hdGVHcmlkKGZ1bmN0aW9uKHJvd3MsIGNvbHMpIHsKCQl2YXIgZSwgbiwgcDsKCQliZy5maW5kKCd0ZCcpLmVhY2goZnVuY3Rpb24oaSwgX2UpIHsKCQkJZSA9ICQoX2UpOwoJCQluID0gZS5vZmZzZXQoKS5sZWZ0OwoJCQlpZiAoaSkgewoJCQkJcFsxXSA9IG47CgkJCX0KCQkJcCA9IFtuXTsKCQkJY29sc1tpXSA9IHA7CgkJfSk7CgkJcFsxXSA9IG4gKyBlLm91dGVyV2lkdGgoKTsKCQlpZiAob3B0KCdhbGxEYXlTbG90JykpIHsKCQkJZSA9IGhlYWQuZmluZCgndGQnKTsKCQkJbiA9IGUub2Zmc2V0KCkudG9wOwoJCQlyb3dzWzBdID0gW24sIG4rZS5vdXRlckhlaWdodCgpXTsKCQl9CgkJdmFyIGJvZHlDb250ZW50VG9wID0gYm9keUNvbnRlbnQub2Zmc2V0KCkudG9wOwoJCXZhciBib2R5VG9wID0gYm9keS5vZmZzZXQoKS50b3A7CgkJdmFyIGJvZHlCb3R0b20gPSBib2R5VG9wICsgYm9keS5vdXRlckhlaWdodCgpOwoJCWZ1bmN0aW9uIGNvbnN0cmFpbihuKSB7CgkJCXJldHVybiBNYXRoLm1heChib2R5VG9wLCBNYXRoLm1pbihib2R5Qm90dG9tLCBuKSk7CgkJfQoJCWZvciAodmFyIGk9MDsgaTxzbG90Q250OyBpKyspIHsKCQkJcm93cy5wdXNoKFsKCQkJCWNvbnN0cmFpbihib2R5Q29udGVudFRvcCArIHNsb3RIZWlnaHQqaSksCgkJCQljb25zdHJhaW4oYm9keUNvbnRlbnRUb3AgKyBzbG90SGVpZ2h0KihpKzEpKQoJCQldKTsKCQl9Cgl9KTsKCQoJCglob3Zlckxpc3RlbmVyID0gbmV3IEhvdmVyTGlzdGVuZXIoY29vcmRpbmF0ZUdyaWQpOwoJCgkKCWNvbENvbnRlbnRQb3NpdGlvbnMgPSBuZXcgSG9yaXpvbnRhbFBvc2l0aW9uQ2FjaGUoZnVuY3Rpb24oY29sKSB7CgkJcmV0dXJuIGJnLmZpbmQoJ3RkOmVxKCcgKyBjb2wgKyAnKSBkaXYgZGl2Jyk7Cgl9KTsKCQoJCglmdW5jdGlvbiBjb2xDb250ZW50TGVmdChjb2wpIHsKCQlyZXR1cm4gYXhpc1dpZHRoICsgY29sQ29udGVudFBvc2l0aW9ucy5sZWZ0KGNvbCk7Cgl9CgkKCQoJZnVuY3Rpb24gY29sQ29udGVudFJpZ2h0KGNvbCkgewoJCXJldHVybiBheGlzV2lkdGggKyBjb2xDb250ZW50UG9zaXRpb25zLnJpZ2h0KGNvbCk7Cgl9CgkKCQoJZnVuY3Rpb24gZGF5T2ZXZWVrQ29sKGRheU9mV2VlaykgewoJCXJldHVybiAoKGRheU9mV2VlayAtIE1hdGgubWF4KGZpcnN0RGF5LCBud2UpICsgY29sQ250KSAlIGNvbENudCkqZGlzK2RpdDsKCX0KCQoJCglmdW5jdGlvbiBkYXRlQ2VsbChkYXRlKSB7CgkJcmV0dXJuIHsKCQkJcm93OiBNYXRoLmZsb29yKGRheURpZmYoZGF0ZSwgdC52aXNTdGFydCkgLyA3KSwKCQkJY29sOiBkYXlPZldlZWtDb2woZGF0ZS5nZXREYXkoKSkKCQl9OwoJfQoJCgkKCS8vIGdldCB0aGUgWSBjb29yZGluYXRlIG9mIHRoZSBnaXZlbiB0aW1lIG9uIHRoZSBnaXZlbiBkYXkgKGJvdGggRGF0ZSBvYmplY3RzKQoJZnVuY3Rpb24gdGltZVBvc2l0aW9uKGRheSwgdGltZSkgeyAvLyBib3RoIGRhdGUgb2JqZWN0cy4gZGF5IGhvbGRzIDAwOjAwIG9mIGN1cnJlbnQgZGF5CgkJZGF5ID0gY2xvbmVEYXRlKGRheSwgdHJ1ZSk7CgkJaWYgKHRpbWUgPCBhZGRNaW51dGVzKGNsb25lRGF0ZShkYXkpLCBtaW5NaW51dGUpKSB7CgkJCXJldHVybiAwOwoJCX0KCQlpZiAodGltZSA+PSBhZGRNaW51dGVzKGNsb25lRGF0ZShkYXkpLCBtYXhNaW51dGUpKSB7CgkJCXJldHVybiBib2R5Q29udGVudC5oZWlnaHQoKTsKCQl9CgkJdmFyIHNsb3RNaW51dGVzID0gb3B0KCdzbG90TWludXRlcycpLAoJCQltaW51dGVzID0gdGltZS5nZXRIb3VycygpKjYwICsgdGltZS5nZXRNaW51dGVzKCkgLSBtaW5NaW51dGUsCgkJCXNsb3RJID0gTWF0aC5mbG9vcihtaW51dGVzIC8gc2xvdE1pbnV0ZXMpLAoJCQlzbG90VG9wID0gc2xvdFRvcENhY2hlW3Nsb3RJXTsKCQlpZiAoc2xvdFRvcCA9PT0gdW5kZWZpbmVkKSB7CgkJCXNsb3RUb3AgPSBzbG90VG9wQ2FjaGVbc2xvdEldID0gYm9keS5maW5kKCd0cjplcSgnICsgc2xvdEkgKyAnKSB0ZCBkaXYnKVswXS5vZmZzZXRUb3A7CgkJfQoJCXJldHVybiBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKAoJCQlzbG90VG9wIC0gMSArIHNsb3RIZWlnaHQgKiAoKG1pbnV0ZXMgJSBzbG90TWludXRlcykgLyBzbG90TWludXRlcykKCQkpKTsKCX0KCQoJCglmdW5jdGlvbiBjZWxsRGF0ZShjZWxsKSB7CgkJdmFyIGQgPSBhZGREYXlzKGNsb25lRGF0ZSh0LnZpc1N0YXJ0KSwgY2VsbC5jb2wqZGlzK2RpdCk7CgkJdmFyIHNsb3RJbmRleCA9IGNlbGwucm93OwoJCWlmIChvcHQoJ2FsbERheVNsb3QnKSkgewoJCQlzbG90SW5kZXgtLTsKCQl9CgkJaWYgKHNsb3RJbmRleCA+PSAwKSB7CgkJCWFkZE1pbnV0ZXMoZCwgbWluTWludXRlICsgc2xvdEluZGV4Km9wdCgnc2xvdE1pbnV0ZXMnKSk7CgkJfQoJCXJldHVybiBkOwoJfQoJCgkKCWZ1bmN0aW9uIGNlbGxJc0FsbERheShjZWxsKSB7CgkJcmV0dXJuIG9wdCgnYWxsRGF5U2xvdCcpICYmICFjZWxsLnJvdzsKCX0KCQoJCglmdW5jdGlvbiBhbGxEYXlCb3VuZHMoKSB7CgkJcmV0dXJuIHsKCQkJbGVmdDogYXhpc1dpZHRoLAoJCQlyaWdodDogdmlld1dpZHRoCgkJfQoJfQoJCgkKCWZ1bmN0aW9uIGFsbERheVRSKGluZGV4KSB7CgkJcmV0dXJuIGhlYWQuZmluZCgndHIuZmMtYWxsLWRheScpOwoJfQoJCgkKCWZ1bmN0aW9uIGRlZmF1bHRFdmVudEVuZChldmVudCkgewoJCXZhciBzdGFydCA9IGNsb25lRGF0ZShldmVudC5zdGFydCk7CgkJaWYgKGV2ZW50LmFsbERheSkgewoJCQlyZXR1cm4gc3RhcnQ7CgkJfQoJCXJldHVybiBhZGRNaW51dGVzKHN0YXJ0LCBvcHQoJ2RlZmF1bHRFdmVudE1pbnV0ZXMnKSk7Cgl9CgkKCQoJCgkvKiBTZWxlY3Rpb24KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gZGVmYXVsdFNlbGVjdGlvbkVuZChzdGFydERhdGUsIGFsbERheSkgewoJCWlmIChhbGxEYXkpIHsKCQkJcmV0dXJuIGNsb25lRGF0ZShzdGFydERhdGUpOwoJCX0KCQlyZXR1cm4gYWRkTWludXRlcyhjbG9uZURhdGUoc3RhcnREYXRlKSwgb3B0KCdzbG90TWludXRlcycpKTsKCX0KCQoJCglmdW5jdGlvbiByZW5kZXJTZWxlY3Rpb24oc3RhcnREYXRlLCBlbmREYXRlLCBhbGxEYXkpIHsKCQlpZiAoYWxsRGF5KSB7CgkJCWlmIChvcHQoJ2FsbERheVNsb3QnKSkgewoJCQkJcmVuZGVyRGF5T3ZlcmxheShzdGFydERhdGUsIGFkZERheXMoY2xvbmVEYXRlKGVuZERhdGUpLCAxKSwgdHJ1ZSk7CgkJCX0KCQl9ZWxzZXsKCQkJcmVuZGVyU2xvdFNlbGVjdGlvbihzdGFydERhdGUsIGVuZERhdGUpOwoJCX0KCX0KCQoJCglmdW5jdGlvbiByZW5kZXJTbG90U2VsZWN0aW9uKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkgewoJCXZhciBoZWxwZXJPcHRpb24gPSBvcHQoJ3NlbGVjdEhlbHBlcicpOwoJCWNvb3JkaW5hdGVHcmlkLmJ1aWxkKCk7CgkJaWYgKGhlbHBlck9wdGlvbikgewoJCQl2YXIgY29sID0gZGF5RGlmZihzdGFydERhdGUsIHQudmlzU3RhcnQpICogZGlzICsgZGl0OwoJCQlpZiAoY29sID49IDAgJiYgY29sIDwgY29sQ250KSB7IC8vIG9ubHkgd29ya3Mgd2hlbiB0aW1lcyBhcmUgb24gc2FtZSBkYXkKCQkJCXZhciByZWN0ID0gY29vcmRpbmF0ZUdyaWQucmVjdCgwLCBjb2wsIDAsIGNvbCwgYm9keUNvbnRlbnQpOyAvLyBvbmx5IGZvciBob3Jpem9udGFsIGNvb3JkcwoJCQkJdmFyIHRvcCA9IHRpbWVQb3NpdGlvbihzdGFydERhdGUsIHN0YXJ0RGF0ZSk7CgkJCQl2YXIgYm90dG9tID0gdGltZVBvc2l0aW9uKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7CgkJCQlpZiAoYm90dG9tID4gdG9wKSB7IC8vIHByb3RlY3QgYWdhaW5zdCBzZWxlY3Rpb25zIHRoYXQgYXJlIGVudGlyZWx5IGJlZm9yZSBvciBhZnRlciB2aXNpYmxlIHJhbmdlCgkJCQkJcmVjdC50b3AgPSB0b3A7CgkJCQkJcmVjdC5oZWlnaHQgPSBib3R0b20gLSB0b3A7CgkJCQkJcmVjdC5sZWZ0ICs9IDI7CgkJCQkJcmVjdC53aWR0aCAtPSA1OwoJCQkJCWlmICgkLmlzRnVuY3Rpb24oaGVscGVyT3B0aW9uKSkgewoJCQkJCQl2YXIgaGVscGVyUmVzID0gaGVscGVyT3B0aW9uKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7CgkJCQkJCWlmIChoZWxwZXJSZXMpIHsKCQkJCQkJCXJlY3QucG9zaXRpb24gPSAnYWJzb2x1dGUnOwoJCQkJCQkJcmVjdC56SW5kZXggPSA4OwoJCQkJCQkJc2VsZWN0aW9uSGVscGVyID0gJChoZWxwZXJSZXMpCgkJCQkJCQkJLmNzcyhyZWN0KQoJCQkJCQkJCS5hcHBlbmRUbyhib2R5Q29udGVudCk7CgkJCQkJCX0KCQkJCQl9ZWxzZXsKCQkJCQkJc2VsZWN0aW9uSGVscGVyID0gJChzbG90U2VnSHRtbCgKCQkJCQkJCXsKCQkJCQkJCQl0aXRsZTogJycsCgkJCQkJCQkJc3RhcnQ6IHN0YXJ0RGF0ZSwKCQkJCQkJCQllbmQ6IGVuZERhdGUsCgkJCQkJCQkJY2xhc3NOYW1lOiBbXSwKCQkJCQkJCQllZGl0YWJsZTogZmFsc2UKCQkJCQkJCX0sCgkJCQkJCQlyZWN0LAoJCQkJCQkJJ2ZjLWV2ZW50IGZjLWV2ZW50LXZlcnQgZmMtY29ybmVyLXRvcCBmYy1jb3JuZXItYm90dG9tICcKCQkJCQkJKSk7CgkJCQkJCWlmICgkLmJyb3dzZXIubXNpZSkgewoJCQkJCQkJc2VsZWN0aW9uSGVscGVyLmZpbmQoJ3NwYW4uZmMtZXZlbnQtYmcnKS5oaWRlKCk7IC8vIG5lc3RlZCBvcGFjaXRpZXMgbWVzcyB1cCBpbiBJRSwganVzdCBoaWRlCgkJCQkJCX0KCQkJCQkJc2VsZWN0aW9uSGVscGVyLmNzcygnb3BhY2l0eScsIG9wdCgnZHJhZ09wYWNpdHknKSk7CgkJCQkJfQoJCQkJCWlmIChzZWxlY3Rpb25IZWxwZXIpIHsKCQkJCQkJc2xvdEJpbmQoc2VsZWN0aW9uSGVscGVyKTsKCQkJCQkJYm9keUNvbnRlbnQuYXBwZW5kKHNlbGVjdGlvbkhlbHBlcik7CgkJCQkJCXNldE91dGVyV2lkdGgoc2VsZWN0aW9uSGVscGVyLCByZWN0LndpZHRoLCB0cnVlKTsgLy8gbmVlZHMgdG8gYmUgYWZ0ZXIgYXBwZW5kZWQKCQkJCQkJc2V0T3V0ZXJIZWlnaHQoc2VsZWN0aW9uSGVscGVyLCByZWN0LmhlaWdodCwgdHJ1ZSk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfWVsc2V7CgkJCXJlbmRlclNsb3RPdmVybGF5KHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkgewoJCWNsZWFyT3ZlcmxheXMoKTsKCQlpZiAoc2VsZWN0aW9uSGVscGVyKSB7CgkJCXNlbGVjdGlvbkhlbHBlci5yZW1vdmUoKTsKCQkJc2VsZWN0aW9uSGVscGVyID0gbnVsbDsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gc2xvdFNlbGVjdGlvbk1vdXNlZG93bihldikgewoJCWlmIChldi53aGljaCA9PSAxICYmIG9wdCgnc2VsZWN0YWJsZScpKSB7IC8vIGV2LndoaWNoPT0xIG1lYW5zIGxlZnQgbW91c2UgYnV0dG9uCgkJCXVuc2VsZWN0KGV2KTsKCQkJdmFyIF9tb3VzZWRvd25FbGVtZW50ID0gdGhpczsKCQkJdmFyIGRhdGVzOwoJCQlob3Zlckxpc3RlbmVyLnN0YXJ0KGZ1bmN0aW9uKGNlbGwsIG9yaWdDZWxsKSB7CgkJCQljbGVhclNlbGVjdGlvbigpOwoJCQkJaWYgKGNlbGwgJiYgY2VsbC5jb2wgPT0gb3JpZ0NlbGwuY29sICYmICFjZWxsSXNBbGxEYXkoY2VsbCkpIHsKCQkJCQl2YXIgZDEgPSBjZWxsRGF0ZShvcmlnQ2VsbCk7CgkJCQkJdmFyIGQyID0gY2VsbERhdGUoY2VsbCk7CgkJCQkJZGF0ZXMgPSBbCgkJCQkJCWQxLAoJCQkJCQlhZGRNaW51dGVzKGNsb25lRGF0ZShkMSksIG9wdCgnc2xvdE1pbnV0ZXMnKSksCgkJCQkJCWQyLAoJCQkJCQlhZGRNaW51dGVzKGNsb25lRGF0ZShkMiksIG9wdCgnc2xvdE1pbnV0ZXMnKSkKCQkJCQldLnNvcnQoY21wKTsKCQkJCQlyZW5kZXJTbG90U2VsZWN0aW9uKGRhdGVzWzBdLCBkYXRlc1szXSk7CgkJCQl9ZWxzZXsKCQkJCQlkYXRlcyA9IG51bGw7CgkJCQl9CgkJCX0sIGV2KTsKCQkJJChkb2N1bWVudCkub25lKCdtb3VzZXVwJywgZnVuY3Rpb24oZXYpIHsKCQkJCWhvdmVyTGlzdGVuZXIuc3RvcCgpOwoJCQkJaWYgKGRhdGVzKSB7CgkJCQkJaWYgKCtkYXRlc1swXSA9PSArZGF0ZXNbMV0pIHsKCQkJCQkJdHJpZ2dlcignZGF5Q2xpY2snLCBfbW91c2Vkb3duRWxlbWVudCwgZGF0ZXNbMF0sIGZhbHNlLCBldik7CgkJCQkJCS8vIEJVRzogX21vdXNlZG93bkVsZW1lbnQgd2lsbCBzb21ldGltZXMgYmUgdGhlIG92ZXJsYXkKCQkJCQl9CgkJCQkJcmVwb3J0U2VsZWN0aW9uKGRhdGVzWzBdLCBkYXRlc1szXSwgZmFsc2UsIGV2KTsKCQkJCX0KCQkJfSk7CgkJfQoJfQoJCgkKCQoJLyogRXh0ZXJuYWwgRHJhZ2dpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiBkcmFnU3RhcnQoX2RyYWdFbGVtZW50LCBldiwgdWkpIHsKCQlob3Zlckxpc3RlbmVyLnN0YXJ0KGZ1bmN0aW9uKGNlbGwpIHsKCQkJY2xlYXJPdmVybGF5cygpOwoJCQlpZiAoY2VsbCkgewoJCQkJaWYgKGNlbGxJc0FsbERheShjZWxsKSkgewoJCQkJCXJlbmRlckNlbGxPdmVybGF5KGNlbGwucm93LCBjZWxsLmNvbCwgY2VsbC5yb3csIGNlbGwuY29sKTsKCQkJCX1lbHNlewoJCQkJCXZhciBkMSA9IGNlbGxEYXRlKGNlbGwpOwoJCQkJCXZhciBkMiA9IGFkZE1pbnV0ZXMoY2xvbmVEYXRlKGQxKSwgb3B0KCdkZWZhdWx0RXZlbnRNaW51dGVzJykpOwoJCQkJCXJlbmRlclNsb3RPdmVybGF5KGQxLCBkMik7CgkJCQl9CgkJCX0KCQl9LCBldik7Cgl9CgkKCQoJZnVuY3Rpb24gZHJhZ1N0b3AoX2RyYWdFbGVtZW50LCBldiwgdWkpIHsKCQl2YXIgY2VsbCA9IGhvdmVyTGlzdGVuZXIuc3RvcCgpOwoJCWNsZWFyT3ZlcmxheXMoKTsKCQlpZiAoY2VsbCkgewoJCQl0cmlnZ2VyKCdkcm9wJywgX2RyYWdFbGVtZW50LCBjZWxsRGF0ZShjZWxsKSwgY2VsbElzQWxsRGF5KGNlbGwpLCBldiwgdWkpOwoJCX0KCX0KCgp9CgpmdW5jdGlvbiBBZ2VuZGFFdmVudFJlbmRlcmVyKCkgewoJdmFyIHQgPSB0aGlzOwoJCgkKCS8vIGV4cG9ydHMKCXQucmVuZGVyRXZlbnRzID0gcmVuZGVyRXZlbnRzOwoJdC5jb21waWxlRGF5U2VncyA9IGNvbXBpbGVEYXlTZWdzOyAvLyBmb3IgRGF5RXZlbnRSZW5kZXJlcgoJdC5jbGVhckV2ZW50cyA9IGNsZWFyRXZlbnRzOwoJdC5zbG90U2VnSHRtbCA9IHNsb3RTZWdIdG1sOwoJdC5iaW5kRGF5U2VnID0gYmluZERheVNlZzsKCQoJCgkvLyBpbXBvcnRzCglEYXlFdmVudFJlbmRlcmVyLmNhbGwodCk7Cgl2YXIgb3B0ID0gdC5vcHQ7Cgl2YXIgdHJpZ2dlciA9IHQudHJpZ2dlcjsKCXZhciBldmVudEVuZCA9IHQuZXZlbnRFbmQ7Cgl2YXIgcmVwb3J0RXZlbnRzID0gdC5yZXBvcnRFdmVudHM7Cgl2YXIgcmVwb3J0RXZlbnRDbGVhciA9IHQucmVwb3J0RXZlbnRDbGVhcjsKCXZhciBldmVudEVsZW1lbnRIYW5kbGVycyA9IHQuZXZlbnRFbGVtZW50SGFuZGxlcnM7Cgl2YXIgc2V0SGVpZ2h0ID0gdC5zZXRIZWlnaHQ7Cgl2YXIgZ2V0RGF5U2VnbWVudENvbnRhaW5lciA9IHQuZ2V0RGF5U2VnbWVudENvbnRhaW5lcjsKCXZhciBnZXRTbG90U2VnbWVudENvbnRhaW5lciA9IHQuZ2V0U2xvdFNlZ21lbnRDb250YWluZXI7Cgl2YXIgZ2V0SG92ZXJMaXN0ZW5lciA9IHQuZ2V0SG92ZXJMaXN0ZW5lcjsKCXZhciBnZXRNYXhNaW51dGUgPSB0LmdldE1heE1pbnV0ZTsKCXZhciBnZXRNaW5NaW51dGUgPSB0LmdldE1pbk1pbnV0ZTsKCXZhciB0aW1lUG9zaXRpb24gPSB0LnRpbWVQb3NpdGlvbjsKCXZhciBjb2xDb250ZW50TGVmdCA9IHQuY29sQ29udGVudExlZnQ7Cgl2YXIgY29sQ29udGVudFJpZ2h0ID0gdC5jb2xDb250ZW50UmlnaHQ7Cgl2YXIgcmVuZGVyRGF5U2VncyA9IHQucmVuZGVyRGF5U2VnczsKCXZhciByZXNpemFibGVEYXlFdmVudCA9IHQucmVzaXphYmxlRGF5RXZlbnQ7IC8vIFRPRE86IHN0cmVhbWxpbmUgYmluZGluZyBhcmNoaXRlY3R1cmUKCXZhciBnZXRDb2xDbnQgPSB0LmdldENvbENudDsKCXZhciBnZXRDb2xXaWR0aCA9IHQuZ2V0Q29sV2lkdGg7Cgl2YXIgZ2V0U2xvdEhlaWdodCA9IHQuZ2V0U2xvdEhlaWdodDsKCXZhciBnZXRCb2R5Q29udGVudCA9IHQuZ2V0Qm9keUNvbnRlbnQ7Cgl2YXIgcmVwb3J0RXZlbnRFbGVtZW50ID0gdC5yZXBvcnRFdmVudEVsZW1lbnQ7Cgl2YXIgc2hvd0V2ZW50cyA9IHQuc2hvd0V2ZW50czsKCXZhciBoaWRlRXZlbnRzID0gdC5oaWRlRXZlbnRzOwoJdmFyIGV2ZW50RHJvcCA9IHQuZXZlbnREcm9wOwoJdmFyIGV2ZW50UmVzaXplID0gdC5ldmVudFJlc2l6ZTsKCXZhciByZW5kZXJEYXlPdmVybGF5ID0gdC5yZW5kZXJEYXlPdmVybGF5OwoJdmFyIGNsZWFyT3ZlcmxheXMgPSB0LmNsZWFyT3ZlcmxheXM7Cgl2YXIgY2FsZW5kYXIgPSB0LmNhbGVuZGFyOwoJdmFyIGZvcm1hdERhdGUgPSBjYWxlbmRhci5mb3JtYXREYXRlOwoJdmFyIGZvcm1hdERhdGVzID0gY2FsZW5kYXIuZm9ybWF0RGF0ZXM7CgkKCQoJCgkvKiBSZW5kZXJpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgoJZnVuY3Rpb24gcmVuZGVyRXZlbnRzKGV2ZW50cywgbW9kaWZpZWRFdmVudElkKSB7CgkJcmVwb3J0RXZlbnRzKGV2ZW50cyk7CgkJdmFyIGksIGxlbj1ldmVudHMubGVuZ3RoLAoJCQlkYXlFdmVudHM9W10sCgkJCXNsb3RFdmVudHM9W107CgkJZm9yIChpPTA7IGk8bGVuOyBpKyspIHsKCQkJaWYgKGV2ZW50c1tpXS5hbGxEYXkpIHsKCQkJCWRheUV2ZW50cy5wdXNoKGV2ZW50c1tpXSk7CgkJCX1lbHNlewoJCQkJc2xvdEV2ZW50cy5wdXNoKGV2ZW50c1tpXSk7CgkJCX0KCQl9CgkJaWYgKG9wdCgnYWxsRGF5U2xvdCcpKSB7CgkJCXJlbmRlckRheVNlZ3MoY29tcGlsZURheVNlZ3MoZGF5RXZlbnRzKSwgbW9kaWZpZWRFdmVudElkKTsKCQkJc2V0SGVpZ2h0KCk7IC8vIG5vIHBhcmFtcyBtZWFucyBzZXQgdG8gdmlld0hlaWdodAoJCX0KCQlyZW5kZXJTbG90U2Vncyhjb21waWxlU2xvdFNlZ3Moc2xvdEV2ZW50cyksIG1vZGlmaWVkRXZlbnRJZCk7Cgl9CgkKCQoJZnVuY3Rpb24gY2xlYXJFdmVudHMoKSB7CgkJcmVwb3J0RXZlbnRDbGVhcigpOwoJCWdldERheVNlZ21lbnRDb250YWluZXIoKS5lbXB0eSgpOwoJCWdldFNsb3RTZWdtZW50Q29udGFpbmVyKCkuZW1wdHkoKTsKCX0KCQoJCglmdW5jdGlvbiBjb21waWxlRGF5U2VncyhldmVudHMpIHsKCQl2YXIgbGV2ZWxzID0gc3RhY2tTZWdzKHNsaWNlU2VncyhldmVudHMsICQubWFwKGV2ZW50cywgZXhjbEVuZERheSksIHQudmlzU3RhcnQsIHQudmlzRW5kKSksCgkJCWksIGxldmVsQ250PWxldmVscy5sZW5ndGgsIGxldmVsLAoJCQlqLCBzZWcsCgkJCXNlZ3M9W107CgkJZm9yIChpPTA7IGk8bGV2ZWxDbnQ7IGkrKykgewoJCQlsZXZlbCA9IGxldmVsc1tpXTsKCQkJZm9yIChqPTA7IGo8bGV2ZWwubGVuZ3RoOyBqKyspIHsKCQkJCXNlZyA9IGxldmVsW2pdOwoJCQkJc2VnLnJvdyA9IDA7CgkJCQlzZWcubGV2ZWwgPSBpOyAvLyBub3QgbmVlZGVkIGFueW1vcmUKCQkJCXNlZ3MucHVzaChzZWcpOwoJCQl9CgkJfQoJCXJldHVybiBzZWdzOwoJfQoJCgkKCWZ1bmN0aW9uIGNvbXBpbGVTbG90U2VncyhldmVudHMpIHsKCQl2YXIgY29sQ250ID0gZ2V0Q29sQ250KCksCgkJCW1pbk1pbnV0ZSA9IGdldE1pbk1pbnV0ZSgpLAoJCQltYXhNaW51dGUgPSBnZXRNYXhNaW51dGUoKSwKCQkJZCA9IGFkZE1pbnV0ZXMoY2xvbmVEYXRlKHQudmlzU3RhcnQpLCBtaW5NaW51dGUpLAoJCQl2aXNFdmVudEVuZHMgPSAkLm1hcChldmVudHMsIHNsb3RFdmVudEVuZCksCgkJCWksIGNvbCwKCQkJaiwgbGV2ZWwsCgkJCWssIHNlZywKCQkJc2Vncz1bXTsKCQlmb3IgKGk9MDsgaTxjb2xDbnQ7IGkrKykgewoJCQljb2wgPSBzdGFja1NlZ3Moc2xpY2VTZWdzKGV2ZW50cywgdmlzRXZlbnRFbmRzLCBkLCBhZGRNaW51dGVzKGNsb25lRGF0ZShkKSwgbWF4TWludXRlLW1pbk1pbnV0ZSkpKTsKCQkJY291bnRGb3J3YXJkU2Vncyhjb2wpOwoJCQlmb3IgKGo9MDsgajxjb2wubGVuZ3RoOyBqKyspIHsKCQkJCWxldmVsID0gY29sW2pdOwoJCQkJZm9yIChrPTA7IGs8bGV2ZWwubGVuZ3RoOyBrKyspIHsKCQkJCQlzZWcgPSBsZXZlbFtrXTsKCQkJCQlzZWcuY29sID0gaTsKCQkJCQlzZWcubGV2ZWwgPSBqOwoJCQkJCXNlZ3MucHVzaChzZWcpOwoJCQkJfQoJCQl9CgkJCWFkZERheXMoZCwgMSwgdHJ1ZSk7CgkJfQoJCXJldHVybiBzZWdzOwoJfQoJCgkKCWZ1bmN0aW9uIHNsb3RFdmVudEVuZChldmVudCkgewoJCWlmIChldmVudC5lbmQpIHsKCQkJcmV0dXJuIGNsb25lRGF0ZShldmVudC5lbmQpOwoJCX1lbHNlewoJCQlyZXR1cm4gYWRkTWludXRlcyhjbG9uZURhdGUoZXZlbnQuc3RhcnQpLCBvcHQoJ2RlZmF1bHRFdmVudE1pbnV0ZXMnKSk7CgkJfQoJfQoJCgkKCS8vIHJlbmRlcnMgZXZlbnRzIGluIHRoZSAndGltZSBzbG90cycgYXQgdGhlIGJvdHRvbQoJCglmdW5jdGlvbiByZW5kZXJTbG90U2VncyhzZWdzLCBtb2RpZmllZEV2ZW50SWQpIHsKCQoJCXZhciBpLCBzZWdDbnQ9c2Vncy5sZW5ndGgsIHNlZywKCQkJZXZlbnQsCgkJCWNsYXNzTmFtZSwKCQkJdG9wLCBib3R0b20sCgkJCWNvbEksIGxldmVsSSwgZm9yd2FyZCwKCQkJbGVmdG1vc3QsCgkJCWF2YWlsV2lkdGgsCgkJCW91dGVyV2lkdGgsCgkJCWxlZnQsCgkJCWh0bWw9JycsCgkJCWV2ZW50RWxlbWVudHMsCgkJCWV2ZW50RWxlbWVudCwKCQkJdHJpZ2dlclJlcywKCQkJdnNpZGVDYWNoZT17fSwKCQkJaHNpZGVDYWNoZT17fSwKCQkJa2V5LCB2YWwsCgkJCXRpdGxlU3BhbiwKCQkJaGVpZ2h0LAoJCQlzbG90U2VnbWVudENvbnRhaW5lciA9IGdldFNsb3RTZWdtZW50Q29udGFpbmVyKCksCgkJCXJ0bCwgZGlzLCBkaXQsCgkJCWNvbENudCA9IGdldENvbENudCgpOwoJCQkKCQlpZiAocnRsID0gb3B0KCdpc1JUTCcpKSB7CgkJCWRpcyA9IC0xOwoJCQlkaXQgPSBjb2xDbnQgLSAxOwoJCX1lbHNlewoJCQlkaXMgPSAxOwoJCQlkaXQgPSAwOwoJCX0KCQkJCgkJLy8gY2FsY3VsYXRlIHBvc2l0aW9uL2RpbWVuc2lvbnMsIGNyZWF0ZSBodG1sCgkJZm9yIChpPTA7IGk8c2VnQ250OyBpKyspIHsKCQkJc2VnID0gc2Vnc1tpXTsKCQkJZXZlbnQgPSBzZWcuZXZlbnQ7CgkJCWNsYXNzTmFtZSA9ICdmYy1ldmVudCBmYy1ldmVudC12ZXJ0ICc7CgkJCWlmIChzZWcuaXNTdGFydCkgewoJCQkJY2xhc3NOYW1lICs9ICdmYy1jb3JuZXItdG9wICc7CgkJCX0KCQkJaWYgKHNlZy5pc0VuZCkgewoJCQkJY2xhc3NOYW1lICs9ICdmYy1jb3JuZXItYm90dG9tICc7CgkJCX0KCQkJdG9wID0gdGltZVBvc2l0aW9uKHNlZy5zdGFydCwgc2VnLnN0YXJ0KTsKCQkJYm90dG9tID0gdGltZVBvc2l0aW9uKHNlZy5zdGFydCwgc2VnLmVuZCk7CgkJCWNvbEkgPSBzZWcuY29sOwoJCQlsZXZlbEkgPSBzZWcubGV2ZWw7CgkJCWZvcndhcmQgPSBzZWcuZm9yd2FyZCB8fCAwOwoJCQlsZWZ0bW9zdCA9IGNvbENvbnRlbnRMZWZ0KGNvbEkqZGlzICsgZGl0KTsKCQkJYXZhaWxXaWR0aCA9IGNvbENvbnRlbnRSaWdodChjb2xJKmRpcyArIGRpdCkgLSBsZWZ0bW9zdDsKCQkJYXZhaWxXaWR0aCA9IE1hdGgubWluKGF2YWlsV2lkdGgtNiwgYXZhaWxXaWR0aCouOTUpOyAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gQ1NTCgkJCWlmIChsZXZlbEkpIHsKCQkJCS8vIGluZGVudGVkIGFuZCB0aGluCgkJCQlvdXRlcldpZHRoID0gYXZhaWxXaWR0aCAvIChsZXZlbEkgKyBmb3J3YXJkICsgMSk7CgkJCX1lbHNlewoJCQkJaWYgKGZvcndhcmQpIHsKCQkJCQkvLyBtb2RlcmF0ZWx5IHdpZGUsIGFsaWduZWQgbGVmdCBzdGlsbAoJCQkJCW91dGVyV2lkdGggPSAoKGF2YWlsV2lkdGggLyAoZm9yd2FyZCArIDEpKSAtICgxMi8yKSkgKiAyOyAvLyAxMiBpcyB0aGUgcHJlZGljdGVkIHdpZHRoIG9mIHJlc2l6ZXIgPQoJCQkJfWVsc2V7CgkJCQkJLy8gY2FuIGJlIGVudGlyZSB3aWR0aCwgYWxpZ25lZCBsZWZ0CgkJCQkJb3V0ZXJXaWR0aCA9IGF2YWlsV2lkdGg7CgkJCQl9CgkJCX0KCQkJbGVmdCA9IGxlZnRtb3N0ICsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVmdG1vc3QgcG9zc2libGUKCQkJCShhdmFpbFdpZHRoIC8gKGxldmVsSSArIGZvcndhcmQgKyAxKSAqIGxldmVsSSkgLy8gaW5kZW50YXRpb24KCQkJCSogZGlzICsgKHJ0bCA/IGF2YWlsV2lkdGggLSBvdXRlcldpZHRoIDogMCk7ICAgLy8gcnRsCgkJCXNlZy50b3AgPSB0b3A7CgkJCXNlZy5sZWZ0ID0gbGVmdDsKCQkJc2VnLm91dGVyV2lkdGggPSBvdXRlcldpZHRoOwoJCQlzZWcub3V0ZXJIZWlnaHQgPSBib3R0b20gLSB0b3A7CgkJCWh0bWwgKz0gc2xvdFNlZ0h0bWwoZXZlbnQsIHNlZywgY2xhc3NOYW1lKTsKCQl9CgkJc2xvdFNlZ21lbnRDb250YWluZXJbMF0uaW5uZXJIVE1MID0gaHRtbDsgLy8gZmFzdGVyIHRoYW4gaHRtbCgpCgkJZXZlbnRFbGVtZW50cyA9IHNsb3RTZWdtZW50Q29udGFpbmVyLmNoaWxkcmVuKCk7CgkJCgkJLy8gcmV0cmlldmUgZWxlbWVudHMsIHJ1biB0aHJvdWdoIGV2ZW50UmVuZGVyIGNhbGxiYWNrLCBiaW5kIGV2ZW50IGhhbmRsZXJzCgkJZm9yIChpPTA7IGk8c2VnQ250OyBpKyspIHsKCQkJc2VnID0gc2Vnc1tpXTsKCQkJZXZlbnQgPSBzZWcuZXZlbnQ7CgkJCWV2ZW50RWxlbWVudCA9ICQoZXZlbnRFbGVtZW50c1tpXSk7IC8vIGZhc3RlciB0aGFuIGVxKCkKCQkJdHJpZ2dlclJlcyA9IHRyaWdnZXIoJ2V2ZW50UmVuZGVyJywgZXZlbnQsIGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQlpZiAodHJpZ2dlclJlcyA9PT0gZmFsc2UpIHsKCQkJCWV2ZW50RWxlbWVudC5yZW1vdmUoKTsKCQkJfWVsc2V7CgkJCQlpZiAodHJpZ2dlclJlcyAmJiB0cmlnZ2VyUmVzICE9PSB0cnVlKSB7CgkJCQkJZXZlbnRFbGVtZW50LnJlbW92ZSgpOwoJCQkJCWV2ZW50RWxlbWVudCA9ICQodHJpZ2dlclJlcykKCQkJCQkJLmNzcyh7CgkJCQkJCQlwb3NpdGlvbjogJ2Fic29sdXRlJywKCQkJCQkJCXRvcDogc2VnLnRvcCwKCQkJCQkJCWxlZnQ6IHNlZy5sZWZ0CgkJCQkJCX0pCgkJCQkJCS5hcHBlbmRUbyhzbG90U2VnbWVudENvbnRhaW5lcik7CgkJCQl9CgkJCQlzZWcuZWxlbWVudCA9IGV2ZW50RWxlbWVudDsKCQkJCWlmIChldmVudC5faWQgPT09IG1vZGlmaWVkRXZlbnRJZCkgewoJCQkJCWJpbmRTbG90U2VnKGV2ZW50LCBldmVudEVsZW1lbnQsIHNlZyk7CgkJCQl9ZWxzZXsKCQkJCQlldmVudEVsZW1lbnRbMF0uX2ZjaSA9IGk7IC8vIGZvciBsYXp5U2VnQmluZAoJCQkJfQoJCQkJcmVwb3J0RXZlbnRFbGVtZW50KGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQl9CgkJfQoJCQoJCWxhenlTZWdCaW5kKHNsb3RTZWdtZW50Q29udGFpbmVyLCBzZWdzLCBiaW5kU2xvdFNlZyk7CgkJCgkJLy8gcmVjb3JkIGV2ZW50IHNpZGVzIGFuZCB0aXRsZSBwb3NpdGlvbnMKCQlmb3IgKGk9MDsgaTxzZWdDbnQ7IGkrKykgewoJCQlzZWcgPSBzZWdzW2ldOwoJCQlpZiAoZXZlbnRFbGVtZW50ID0gc2VnLmVsZW1lbnQpIHsKCQkJCXZhbCA9IHZzaWRlQ2FjaGVba2V5ID0gc2VnLmtleSA9IGNzc0tleShldmVudEVsZW1lbnRbMF0pXTsKCQkJCXNlZy52c2lkZXMgPSB2YWwgPT09IHVuZGVmaW5lZCA/ICh2c2lkZUNhY2hlW2tleV0gPSB2c2lkZXMoZXZlbnRFbGVtZW50WzBdLCB0cnVlKSkgOiB2YWw7CgkJCQl2YWwgPSBoc2lkZUNhY2hlW2tleV07CgkJCQlzZWcuaHNpZGVzID0gdmFsID09PSB1bmRlZmluZWQgPyAoaHNpZGVDYWNoZVtrZXldID0gaHNpZGVzKGV2ZW50RWxlbWVudFswXSwgdHJ1ZSkpIDogdmFsOwoJCQkJdGl0bGVTcGFuID0gZXZlbnRFbGVtZW50LmZpbmQoJ3NwYW4uZmMtZXZlbnQtdGl0bGUnKTsKCQkJCWlmICh0aXRsZVNwYW4ubGVuZ3RoKSB7CgkJCQkJc2VnLnRpdGxlVG9wID0gdGl0bGVTcGFuWzBdLm9mZnNldFRvcDsKCQkJCX0KCQkJfQoJCX0KCQkKCQkvLyBzZXQgYWxsIHBvc2l0aW9ucy9kaW1lbnNpb25zIGF0IG9uY2UKCQlmb3IgKGk9MDsgaTxzZWdDbnQ7IGkrKykgewoJCQlzZWcgPSBzZWdzW2ldOwoJCQlpZiAoZXZlbnRFbGVtZW50ID0gc2VnLmVsZW1lbnQpIHsKCQkJCWV2ZW50RWxlbWVudFswXS5zdHlsZS53aWR0aCA9IE1hdGgubWF4KDAsIHNlZy5vdXRlcldpZHRoIC0gc2VnLmhzaWRlcykgKyAncHgnOwoJCQkJaGVpZ2h0ID0gTWF0aC5tYXgoMCwgc2VnLm91dGVySGVpZ2h0IC0gc2VnLnZzaWRlcyk7CgkJCQlldmVudEVsZW1lbnRbMF0uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JzsKCQkJCWV2ZW50ID0gc2VnLmV2ZW50OwoJCQkJaWYgKHNlZy50aXRsZVRvcCAhPT0gdW5kZWZpbmVkICYmIGhlaWdodCAtIHNlZy50aXRsZVRvcCA8IDEwKSB7CgkJCQkJLy8gbm90IGVub3VnaCByb29tIGZvciB0aXRsZSwgcHV0IGl0IGluIHRoZSB0aW1lIGhlYWRlcgoJCQkJCWV2ZW50RWxlbWVudC5maW5kKCdzcGFuLmZjLWV2ZW50LXRpbWUnKQoJCQkJCQkudGV4dChmb3JtYXREYXRlKGV2ZW50LnN0YXJ0LCBvcHQoJ3RpbWVGb3JtYXQnKSkgKyAnIC0gJyArIGV2ZW50LnRpdGxlKTsKCQkJCQlldmVudEVsZW1lbnQuZmluZCgnc3Bhbi5mYy1ldmVudC10aXRsZScpCgkJCQkJCS5yZW1vdmUoKTsKCQkJCX0KCQkJCXRyaWdnZXIoJ2V2ZW50QWZ0ZXJSZW5kZXInLCBldmVudCwgZXZlbnQsIGV2ZW50RWxlbWVudCk7CgkJCX0KCQl9CgkJCQkJCgl9CgkKCQoJZnVuY3Rpb24gc2xvdFNlZ0h0bWwoZXZlbnQsIHNlZywgY2xhc3NOYW1lKSB7CgkJcmV0dXJuICI8ZGl2IGNsYXNzPSciICsgY2xhc3NOYW1lICsgZXZlbnQuY2xhc3NOYW1lLmpvaW4oJyAnKSArICInIHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Ojg7dG9wOiIgKyBzZWcudG9wICsgInB4O2xlZnQ6IiArIHNlZy5sZWZ0ICsgInB4Jz4iICsKCQkJIjxhIiArIChldmVudC51cmwgPyAiIGhyZWY9JyIgKyBodG1sRXNjYXBlKGV2ZW50LnVybCkgKyAiJyIgOiAnJykgKyAiPiIgKwoJCQkJIjxzcGFuIGNsYXNzPSdmYy1ldmVudC1iZyc+PC9zcGFuPiIgKwoJCQkJIjxzcGFuIGNsYXNzPSdmYy1ldmVudC10aW1lJz4iICsgaHRtbEVzY2FwZShmb3JtYXREYXRlcyhldmVudC5zdGFydCwgZXZlbnQuZW5kLCBvcHQoJ3RpbWVGb3JtYXQnKSkpICsgIjwvc3Bhbj4iICsKCQkJCSI8c3BhbiBjbGFzcz0nZmMtZXZlbnQtdGl0bGUnPiIgKyBodG1sRXNjYXBlKGV2ZW50LnRpdGxlKSArICI8L3NwYW4+IiArCgkJCSI8L2E+IiArCgkJCSgoZXZlbnQuZWRpdGFibGUgfHwgZXZlbnQuZWRpdGFibGUgPT09IHVuZGVmaW5lZCAmJiBvcHQoJ2VkaXRhYmxlJykpICYmICFvcHQoJ2Rpc2FibGVSZXNpemluZycpICYmICQuZm4ucmVzaXphYmxlID8KCQkJCSI8ZGl2IGNsYXNzPSd1aS1yZXNpemFibGUtaGFuZGxlIHVpLXJlc2l6YWJsZS1zJz49PC9kaXY+IgoJCQkJOiAnJykgKwoJCSI8L2Rpdj4iOwoJfQoJCgkKCWZ1bmN0aW9uIGJpbmREYXlTZWcoZXZlbnQsIGV2ZW50RWxlbWVudCwgc2VnKSB7CgkJZXZlbnRFbGVtZW50SGFuZGxlcnMoZXZlbnQsIGV2ZW50RWxlbWVudCk7CgkJaWYgKGV2ZW50LmVkaXRhYmxlIHx8IGV2ZW50LmVkaXRhYmxlID09PSB1bmRlZmluZWQgJiYgb3B0KCdlZGl0YWJsZScpKSB7CgkJCWRyYWdnYWJsZURheUV2ZW50KGV2ZW50LCBldmVudEVsZW1lbnQsIHNlZy5pc1N0YXJ0KTsKCQkJaWYgKHNlZy5pc0VuZCkgewoJCQkJcmVzaXphYmxlRGF5RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgc2VnKTsKCQkJfQoJCX0KCX0KCQoJCglmdW5jdGlvbiBiaW5kU2xvdFNlZyhldmVudCwgZXZlbnRFbGVtZW50LCBzZWcpIHsKCQlldmVudEVsZW1lbnRIYW5kbGVycyhldmVudCwgZXZlbnRFbGVtZW50KTsKCQlpZiAoZXZlbnQuZWRpdGFibGUgfHwgZXZlbnQuZWRpdGFibGUgPT09IHVuZGVmaW5lZCAmJiBvcHQoJ2VkaXRhYmxlJykpIHsKCQkJdmFyIHRpbWVFbGVtZW50ID0gZXZlbnRFbGVtZW50LmZpbmQoJ3NwYW4uZmMtZXZlbnQtdGltZScpOwoJCQlkcmFnZ2FibGVTbG90RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgdGltZUVsZW1lbnQpOwoJCQlpZiAoc2VnLmlzRW5kKSB7CgkJCQlyZXNpemFibGVTbG90RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgdGltZUVsZW1lbnQpOwoJCQl9CgkJfQoJfQoJCgkKCQoJLyogRHJhZ2dpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCgkvLyB3aGVuIGV2ZW50IHN0YXJ0cyBvdXQgRlVMTC1EQVkKCQoJZnVuY3Rpb24gZHJhZ2dhYmxlRGF5RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgaXNTdGFydCkgewoJCWlmICghb3B0KCdkaXNhYmxlRHJhZ2dpbmcnKSAmJiBldmVudEVsZW1lbnQuZHJhZ2dhYmxlKSB7CgkJCXZhciBvcmlnV2lkdGg7CgkJCXZhciBhbGxEYXk9dHJ1ZTsKCQkJdmFyIGRheURlbHRhOwoJCQl2YXIgZGlzID0gb3B0KCdpc1JUTCcpID8gLTEgOiAxOwoJCQl2YXIgaG92ZXJMaXN0ZW5lciA9IGdldEhvdmVyTGlzdGVuZXIoKTsKCQkJdmFyIGNvbFdpZHRoID0gZ2V0Q29sV2lkdGgoKTsKCQkJdmFyIHNsb3RIZWlnaHQgPSBnZXRTbG90SGVpZ2h0KCk7CgkJCXZhciBtaW5NaW51dGUgPSBnZXRNaW5NaW51dGUoKTsKCQkJZXZlbnRFbGVtZW50LmRyYWdnYWJsZSh7CgkJCQl6SW5kZXg6IDksCgkJCQlvcGFjaXR5OiBvcHQoJ2RyYWdPcGFjaXR5JywgJ21vbnRoJyksIC8vIHVzZSB3aGF0ZXZlciB0aGUgbW9udGggdmlldyB3YXMgdXNpbmcKCQkJCXJldmVydER1cmF0aW9uOiBvcHQoJ2RyYWdSZXZlcnREdXJhdGlvbicpLAoJCQkJc3RhcnQ6IGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJCXRyaWdnZXIoJ2V2ZW50RHJhZ1N0YXJ0JywgZXZlbnRFbGVtZW50LCBldmVudCwgZXYsIHVpKTsKCQkJCQloaWRlRXZlbnRzKGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQkJCW9yaWdXaWR0aCA9IGV2ZW50RWxlbWVudC53aWR0aCgpOwoJCQkJCWhvdmVyTGlzdGVuZXIuc3RhcnQoZnVuY3Rpb24oY2VsbCwgb3JpZ0NlbGwsIHJvd0RlbHRhLCBjb2xEZWx0YSkgewoJCQkJCQlldmVudEVsZW1lbnQuZHJhZ2dhYmxlKCdvcHRpb24nLCAncmV2ZXJ0JywgIWNlbGwgfHwgIXJvd0RlbHRhICYmICFjb2xEZWx0YSk7CgkJCQkJCWNsZWFyT3ZlcmxheXMoKTsKCQkJCQkJaWYgKGNlbGwpIHsKCQkJCQkJCWRheURlbHRhID0gY29sRGVsdGEgKiBkaXM7CgkJCQkJCQlpZiAoIWNlbGwucm93KSB7CgkJCQkJCQkJLy8gb24gZnVsbC1kYXlzCgkJCQkJCQkJcmVuZGVyRGF5T3ZlcmxheSgKCQkJCQkJCQkJYWRkRGF5cyhjbG9uZURhdGUoZXZlbnQuc3RhcnQpLCBkYXlEZWx0YSksCgkJCQkJCQkJCWFkZERheXMoZXhjbEVuZERheShldmVudCksIGRheURlbHRhKQoJCQkJCQkJCSk7CgkJCQkJCQkJcmVzZXRFbGVtZW50KCk7CgkJCQkJCQl9ZWxzZXsKCQkJCQkJCQkvLyBtb3VzZSBpcyBvdmVyIGJvdHRvbSBzbG90cwoJCQkJCQkJCWlmIChpc1N0YXJ0ICYmIGFsbERheSkgewoJCQkJCQkJCQkvLyBjb252ZXJ0IGV2ZW50IHRvIHRlbXBvcmFyeSBzbG90LWV2ZW50CgkJCQkJCQkJCXNldE91dGVySGVpZ2h0KAoJCQkJCQkJCQkJZXZlbnRFbGVtZW50LndpZHRoKGNvbFdpZHRoIC0gMTApLCAvLyBkb24ndCB1c2UgZW50aXJlIHdpZHRoCgkJCQkJCQkJCQlzbG90SGVpZ2h0ICogTWF0aC5yb3VuZCgKCQkJCQkJCQkJCQkoZXZlbnQuZW5kID8gKChldmVudC5lbmQgLSBldmVudC5zdGFydCkgLyBNSU5VVEVfTVMpIDogb3B0KCdkZWZhdWx0RXZlbnRNaW51dGVzJykpCgkJCQkJCQkJCQkJLyBvcHQoJ3Nsb3RNaW51dGVzJykKCQkJCQkJCQkJCSkKCQkJCQkJCQkJKTsKCQkJCQkJCQkJZXZlbnRFbGVtZW50LmRyYWdnYWJsZSgnb3B0aW9uJywgJ2dyaWQnLCBbY29sV2lkdGgsIDFdKTsKCQkJCQkJCQkJYWxsRGF5ID0gZmFsc2U7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfSwgZXYsICdkcmFnJyk7CgkJCQl9LAoJCQkJc3RvcDogZnVuY3Rpb24oZXYsIHVpKSB7CgkJCQkJdmFyIGNlbGwgPSBob3Zlckxpc3RlbmVyLnN0b3AoKTsKCQkJCQljbGVhck92ZXJsYXlzKCk7CgkJCQkJdHJpZ2dlcignZXZlbnREcmFnU3RvcCcsIGV2ZW50RWxlbWVudCwgZXZlbnQsIGV2LCB1aSk7CgkJCQkJaWYgKGNlbGwgJiYgKCFhbGxEYXkgfHwgZGF5RGVsdGEpKSB7CgkJCQkJCS8vIGNoYW5nZWQhCgkJCQkJCWV2ZW50RWxlbWVudC5maW5kKCdhJykucmVtb3ZlQXR0cignaHJlZicpOyAvLyBwcmV2ZW50cyBzYWZhcmkgZnJvbSB2aXNpdGluZyB0aGUgbGluawoJCQkJCQl2YXIgbWludXRlRGVsdGEgPSAwOwoJCQkJCQlpZiAoIWFsbERheSkgewoJCQkJCQkJbWludXRlRGVsdGEgPSBNYXRoLnJvdW5kKChldmVudEVsZW1lbnQub2Zmc2V0KCkudG9wIC0gZ2V0Qm9keUNvbnRlbnQoKS5vZmZzZXQoKS50b3ApIC8gc2xvdEhlaWdodCkKCQkJCQkJCQkqIG9wdCgnc2xvdE1pbnV0ZXMnKQoJCQkJCQkJCSsgbWluTWludXRlCgkJCQkJCQkJLSAoZXZlbnQuc3RhcnQuZ2V0SG91cnMoKSAqIDYwICsgZXZlbnQuc3RhcnQuZ2V0TWludXRlcygpKTsKCQkJCQkJfQoJCQkJCQlldmVudERyb3AodGhpcywgZXZlbnQsIGRheURlbHRhLCBtaW51dGVEZWx0YSwgYWxsRGF5LCBldiwgdWkpOwoJCQkJCX1lbHNlewoJCQkJCQkvLyBoYXNuJ3QgbW92ZWQgb3IgaXMgb3V0IG9mIGJvdW5kcyAoZHJhZ2dhYmxlIGhhcyBhbHJlYWR5IHJldmVydGVkKQoJCQkJCQlyZXNldEVsZW1lbnQoKTsKCQkJCQkJaWYgKCQuYnJvd3Nlci5tc2llKSB7CgkJCQkJCQlldmVudEVsZW1lbnQuY3NzKCdmaWx0ZXInLCAnJyk7IC8vIGNsZWFyIElFIG9wYWNpdHkgc2lkZS1lZmZlY3RzCgkJCQkJCX0KCQkJCQkJc2hvd0V2ZW50cyhldmVudCwgZXZlbnRFbGVtZW50KTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoJCQlmdW5jdGlvbiByZXNldEVsZW1lbnQoKSB7CgkJCQlpZiAoIWFsbERheSkgewoJCQkJCWV2ZW50RWxlbWVudAoJCQkJCQkud2lkdGgob3JpZ1dpZHRoKQoJCQkJCQkuaGVpZ2h0KCcnKQoJCQkJCQkuZHJhZ2dhYmxlKCdvcHRpb24nLCAnZ3JpZCcsIG51bGwpOwoJCQkJCWFsbERheSA9IHRydWU7CgkJCQl9CgkJCX0KCQl9Cgl9CgkKCQoJLy8gd2hlbiBldmVudCBzdGFydHMgb3V0IElOIFRJTUVTTE9UUwoJCglmdW5jdGlvbiBkcmFnZ2FibGVTbG90RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgdGltZUVsZW1lbnQpIHsKCQlpZiAoIW9wdCgnZGlzYWJsZURyYWdnaW5nJykgJiYgZXZlbnRFbGVtZW50LmRyYWdnYWJsZSkgewoJCQl2YXIgb3JpZ1Bvc2l0aW9uOwoJCQl2YXIgYWxsRGF5PWZhbHNlOwoJCQl2YXIgZGF5RGVsdGE7CgkJCXZhciBtaW51dGVEZWx0YTsKCQkJdmFyIHByZXZNaW51dGVEZWx0YTsKCQkJdmFyIGRpcyA9IG9wdCgnaXNSVEwnKSA/IC0xIDogMTsKCQkJdmFyIGhvdmVyTGlzdGVuZXIgPSBnZXRIb3Zlckxpc3RlbmVyKCk7CgkJCXZhciBjb2xDbnQgPSBnZXRDb2xDbnQoKTsKCQkJdmFyIGNvbFdpZHRoID0gZ2V0Q29sV2lkdGgoKTsKCQkJdmFyIHNsb3RIZWlnaHQgPSBnZXRTbG90SGVpZ2h0KCk7CgkJCWV2ZW50RWxlbWVudC5kcmFnZ2FibGUoewoJCQkJekluZGV4OiA5LAoJCQkJc2Nyb2xsOiBmYWxzZSwKCQkJCWdyaWQ6IFtjb2xXaWR0aCwgc2xvdEhlaWdodF0sCgkJCQlheGlzOiBjb2xDbnQ9PTEgPyAneScgOiBmYWxzZSwKCQkJCW9wYWNpdHk6IG9wdCgnZHJhZ09wYWNpdHknKSwKCQkJCXJldmVydER1cmF0aW9uOiBvcHQoJ2RyYWdSZXZlcnREdXJhdGlvbicpLAoJCQkJc3RhcnQ6IGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJCXRyaWdnZXIoJ2V2ZW50RHJhZ1N0YXJ0JywgZXZlbnRFbGVtZW50LCBldmVudCwgZXYsIHVpKTsKCQkJCQloaWRlRXZlbnRzKGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQkJCWlmICgkLmJyb3dzZXIubXNpZSkgewoJCQkJCQlldmVudEVsZW1lbnQuZmluZCgnc3Bhbi5mYy1ldmVudC1iZycpLmhpZGUoKTsgLy8gbmVzdGVkIG9wYWNpdGllcyBtZXNzIHVwIGluIElFLCBqdXN0IGhpZGUKCQkJCQl9CgkJCQkJb3JpZ1Bvc2l0aW9uID0gZXZlbnRFbGVtZW50LnBvc2l0aW9uKCk7CgkJCQkJbWludXRlRGVsdGEgPSBwcmV2TWludXRlRGVsdGEgPSAwOwoJCQkJCWhvdmVyTGlzdGVuZXIuc3RhcnQoZnVuY3Rpb24oY2VsbCwgb3JpZ0NlbGwsIHJvd0RlbHRhLCBjb2xEZWx0YSkgewoJCQkJCQlldmVudEVsZW1lbnQuZHJhZ2dhYmxlKCdvcHRpb24nLCAncmV2ZXJ0JywgIWNlbGwpOwoJCQkJCQljbGVhck92ZXJsYXlzKCk7CgkJCQkJCWlmIChjZWxsKSB7CgkJCQkJCQlkYXlEZWx0YSA9IGNvbERlbHRhICogZGlzOwoJCQkJCQkJaWYgKG9wdCgnYWxsRGF5U2xvdCcpICYmICFjZWxsLnJvdykgewoJCQkJCQkJCS8vIG92ZXIgZnVsbCBkYXlzCgkJCQkJCQkJaWYgKCFhbGxEYXkpIHsKCQkJCQkJCQkJLy8gY29udmVydCB0byB0ZW1wb3JhcnkgYWxsLWRheSBldmVudAoJCQkJCQkJCQlhbGxEYXkgPSB0cnVlOwoJCQkJCQkJCQl0aW1lRWxlbWVudC5oaWRlKCk7CgkJCQkJCQkJCWV2ZW50RWxlbWVudC5kcmFnZ2FibGUoJ29wdGlvbicsICdncmlkJywgbnVsbCk7CgkJCQkJCQkJfQoJCQkJCQkJCXJlbmRlckRheU92ZXJsYXkoCgkJCQkJCQkJCWFkZERheXMoY2xvbmVEYXRlKGV2ZW50LnN0YXJ0KSwgZGF5RGVsdGEpLAoJCQkJCQkJCQlhZGREYXlzKGV4Y2xFbmREYXkoZXZlbnQpLCBkYXlEZWx0YSkKCQkJCQkJCQkpOwoJCQkJCQkJfWVsc2V7CgkJCQkJCQkJLy8gb24gc2xvdHMKCQkJCQkJCQlyZXNldEVsZW1lbnQoKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0sIGV2LCAnZHJhZycpOwoJCQkJfSwKCQkJCWRyYWc6IGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJCW1pbnV0ZURlbHRhID0gTWF0aC5yb3VuZCgodWkucG9zaXRpb24udG9wIC0gb3JpZ1Bvc2l0aW9uLnRvcCkgLyBzbG90SGVpZ2h0KSAqIG9wdCgnc2xvdE1pbnV0ZXMnKTsKCQkJCQlpZiAobWludXRlRGVsdGEgIT0gcHJldk1pbnV0ZURlbHRhKSB7CgkJCQkJCWlmICghYWxsRGF5KSB7CgkJCQkJCQl1cGRhdGVUaW1lVGV4dChtaW51dGVEZWx0YSk7CgkJCQkJCX0KCQkJCQkJcHJldk1pbnV0ZURlbHRhID0gbWludXRlRGVsdGE7CgkJCQkJfQoJCQkJfSwKCQkJCXN0b3A6IGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJCXZhciBjZWxsID0gaG92ZXJMaXN0ZW5lci5zdG9wKCk7CgkJCQkJY2xlYXJPdmVybGF5cygpOwoJCQkJCXRyaWdnZXIoJ2V2ZW50RHJhZ1N0b3AnLCBldmVudEVsZW1lbnQsIGV2ZW50LCBldiwgdWkpOwoJCQkJCWlmIChjZWxsICYmIChkYXlEZWx0YSB8fCBtaW51dGVEZWx0YSB8fCBhbGxEYXkpKSB7CgkJCQkJCS8vIGNoYW5nZWQhCgkJCQkJCWV2ZW50RHJvcCh0aGlzLCBldmVudCwgZGF5RGVsdGEsIGFsbERheSA/IDAgOiBtaW51dGVEZWx0YSwgYWxsRGF5LCBldiwgdWkpOwoJCQkJCX1lbHNlewoJCQkJCQkvLyBlaXRoZXIgbm8gY2hhbmdlIG9yIG91dC1vZi1ib3VuZHMgKGRyYWdnYWJsZSBoYXMgYWxyZWFkeSByZXZlcnRlZCkKCQkJCQkJcmVzZXRFbGVtZW50KCk7CgkJCQkJCWV2ZW50RWxlbWVudC5jc3Mob3JpZ1Bvc2l0aW9uKTsgLy8gc29tZXRpbWVzIGZhc3QgZHJhZ3MgbWFrZSBldmVudCByZXZlcnQgdG8gd3JvbmcgcG9zaXRpb24KCQkJCQkJdXBkYXRlVGltZVRleHQoMCk7CgkJCQkJCWlmICgkLmJyb3dzZXIubXNpZSkgewoJCQkJCQkJZXZlbnRFbGVtZW50CgkJCQkJCQkJLmNzcygnZmlsdGVyJywgJycpIC8vIGNsZWFyIElFIG9wYWNpdHkgc2lkZS1lZmZlY3RzCgkJCQkJCQkJLmZpbmQoJ3NwYW4uZmMtZXZlbnQtYmcnKQoJCQkJCQkJCQkuY3NzKCdkaXNwbGF5JywgJycpOyAvLyAuc2hvdygpIG1hZGUgZGlzcGxheT1pbmxpbmUKCQkJCQkJfQoJCQkJCQlzaG93RXZlbnRzKGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQkJCX0KCQkJCX0KCQkJfSk7CgkJCWZ1bmN0aW9uIHVwZGF0ZVRpbWVUZXh0KG1pbnV0ZURlbHRhKSB7CgkJCQl2YXIgbmV3U3RhcnQgPSBhZGRNaW51dGVzKGNsb25lRGF0ZShldmVudC5zdGFydCksIG1pbnV0ZURlbHRhKTsKCQkJCXZhciBuZXdFbmQ7CgkJCQlpZiAoZXZlbnQuZW5kKSB7CgkJCQkJbmV3RW5kID0gYWRkTWludXRlcyhjbG9uZURhdGUoZXZlbnQuZW5kKSwgbWludXRlRGVsdGEpOwoJCQkJfQoJCQkJdGltZUVsZW1lbnQudGV4dChmb3JtYXREYXRlcyhuZXdTdGFydCwgbmV3RW5kLCBvcHQoJ3RpbWVGb3JtYXQnKSkpOwoJCQl9CgkJCWZ1bmN0aW9uIHJlc2V0RWxlbWVudCgpIHsKCQkJCS8vIGNvbnZlcnQgYmFjayB0byBvcmlnaW5hbCBzbG90LWV2ZW50CgkJCQlpZiAoYWxsRGF5KSB7CgkJCQkJdGltZUVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJycpOyAvLyBzaG93KCkgd2FzIGNhdXNpbmcgZGlzcGxheT1pbmxpbmUKCQkJCQlldmVudEVsZW1lbnQuZHJhZ2dhYmxlKCdvcHRpb24nLCAnZ3JpZCcsIFtjb2xXaWR0aCwgc2xvdEhlaWdodF0pOwoJCQkJCWFsbERheSA9IGZhbHNlOwoJCQkJfQoJCQl9CgkJfQoJfQoJCgkKCQoJLyogUmVzaXppbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiByZXNpemFibGVTbG90RXZlbnQoZXZlbnQsIGV2ZW50RWxlbWVudCwgdGltZUVsZW1lbnQpIHsKCQlpZiAoIW9wdCgnZGlzYWJsZVJlc2l6aW5nJykgJiYgZXZlbnRFbGVtZW50LnJlc2l6YWJsZSkgewoJCQl2YXIgc2xvdERlbHRhLCBwcmV2U2xvdERlbHRhOwoJCQl2YXIgc2xvdEhlaWdodCA9IGdldFNsb3RIZWlnaHQoKTsKCQkJZXZlbnRFbGVtZW50LnJlc2l6YWJsZSh7CgkJCQloYW5kbGVzOiB7CgkJCQkJczogJ2Rpdi51aS1yZXNpemFibGUtcycKCQkJCX0sCgkJCQlncmlkOiBzbG90SGVpZ2h0LAoJCQkJc3RhcnQ6IGZ1bmN0aW9uKGV2LCB1aSkgewoJCQkJCXNsb3REZWx0YSA9IHByZXZTbG90RGVsdGEgPSAwOwoJCQkJCWhpZGVFdmVudHMoZXZlbnQsIGV2ZW50RWxlbWVudCk7CgkJCQkJaWYgKCQuYnJvd3Nlci5tc2llICYmICQuYnJvd3Nlci52ZXJzaW9uID09ICc2LjAnKSB7CgkJCQkJCWV2ZW50RWxlbWVudC5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpOwoJCQkJCX0KCQkJCQlldmVudEVsZW1lbnQuY3NzKCd6LWluZGV4JywgOSk7CgkJCQkJdHJpZ2dlcignZXZlbnRSZXNpemVTdGFydCcsIHRoaXMsIGV2ZW50LCBldiwgdWkpOwoJCQkJfSwKCQkJCXJlc2l6ZTogZnVuY3Rpb24oZXYsIHVpKSB7CgkJCQkJLy8gZG9uJ3QgcmVseSBvbiB1aS5zaXplLmhlaWdodCwgZG9lc24ndCB0YWtlIGdyaWQgaW50byBhY2NvdW50CgkJCQkJc2xvdERlbHRhID0gTWF0aC5yb3VuZCgoTWF0aC5tYXgoc2xvdEhlaWdodCwgZXZlbnRFbGVtZW50LmhlaWdodCgpKSAtIHVpLm9yaWdpbmFsU2l6ZS5oZWlnaHQpIC8gc2xvdEhlaWdodCk7CgkJCQkJaWYgKHNsb3REZWx0YSAhPSBwcmV2U2xvdERlbHRhKSB7CgkJCQkJCXRpbWVFbGVtZW50LnRleHQoCgkJCQkJCQlmb3JtYXREYXRlcygKCQkJCQkJCQlldmVudC5zdGFydCwKCQkJCQkJCQkoIXNsb3REZWx0YSAmJiAhZXZlbnQuZW5kKSA/IG51bGwgOiAvLyBubyBjaGFuZ2UsIHNvIGRvbid0IGRpc3BsYXkgdGltZSByYW5nZQoJCQkJCQkJCQlhZGRNaW51dGVzKGV2ZW50RW5kKGV2ZW50KSwgb3B0KCdzbG90TWludXRlcycpKnNsb3REZWx0YSksCgkJCQkJCQkJb3B0KCd0aW1lRm9ybWF0JykKCQkJCQkJCSkKCQkJCQkJKTsKCQkJCQkJcHJldlNsb3REZWx0YSA9IHNsb3REZWx0YTsKCQkJCQl9CgkJCQl9LAoJCQkJc3RvcDogZnVuY3Rpb24oZXYsIHVpKSB7CgkJCQkJdHJpZ2dlcignZXZlbnRSZXNpemVTdG9wJywgdGhpcywgZXZlbnQsIGV2LCB1aSk7CgkJCQkJaWYgKHNsb3REZWx0YSkgewoJCQkJCQlldmVudFJlc2l6ZSh0aGlzLCBldmVudCwgMCwgb3B0KCdzbG90TWludXRlcycpKnNsb3REZWx0YSwgZXYsIHVpKTsKCQkJCQl9ZWxzZXsKCQkJCQkJZXZlbnRFbGVtZW50LmNzcygnei1pbmRleCcsIDgpOwoJCQkJCQlzaG93RXZlbnRzKGV2ZW50LCBldmVudEVsZW1lbnQpOwoJCQkJCQkvLyBCVUc6IGlmIGV2ZW50IHdhcyByZWFsbHkgc2hvcnQsIG5lZWQgdG8gcHV0IHRpdGxlIGJhY2sgaW4gc3BhbgoJCQkJCX0KCQkJCX0KCQkJfSk7CgkJfQoJfQoJCgp9CgoKZnVuY3Rpb24gY291bnRGb3J3YXJkU2VncyhsZXZlbHMpIHsKCXZhciBpLCBqLCBrLCBsZXZlbCwgc2VnRm9yd2FyZCwgc2VnQmFjazsKCWZvciAoaT1sZXZlbHMubGVuZ3RoLTE7IGk+MDsgaS0tKSB7CgkJbGV2ZWwgPSBsZXZlbHNbaV07CgkJZm9yIChqPTA7IGo8bGV2ZWwubGVuZ3RoOyBqKyspIHsKCQkJc2VnRm9yd2FyZCA9IGxldmVsW2pdOwoJCQlmb3IgKGs9MDsgazxsZXZlbHNbaS0xXS5sZW5ndGg7IGsrKykgewoJCQkJc2VnQmFjayA9IGxldmVsc1tpLTFdW2tdOwoJCQkJaWYgKHNlZ3NDb2xsaWRlKHNlZ0ZvcndhcmQsIHNlZ0JhY2spKSB7CgkJCQkJc2VnQmFjay5mb3J3YXJkID0gTWF0aC5tYXgoc2VnQmFjay5mb3J3YXJkfHwwLCAoc2VnRm9yd2FyZC5mb3J3YXJkfHwwKSsxKTsKCQkJCX0KCQkJfQoJCX0KCX0KfQoKCgoKZnVuY3Rpb24gVmlldyhlbGVtZW50LCBjYWxlbmRhciwgdmlld05hbWUpIHsKCXZhciB0ID0gdGhpczsKCQoJCgkvLyBleHBvcnRzCgl0LmVsZW1lbnQgPSBlbGVtZW50OwoJdC5jYWxlbmRhciA9IGNhbGVuZGFyOwoJdC5uYW1lID0gdmlld05hbWU7Cgl0Lm9wdCA9IG9wdDsKCXQudHJpZ2dlciA9IHRyaWdnZXI7Cgl0LnJlcG9ydEV2ZW50cyA9IHJlcG9ydEV2ZW50czsKCXQuZXZlbnRFbmQgPSBldmVudEVuZDsKCXQucmVwb3J0RXZlbnRFbGVtZW50ID0gcmVwb3J0RXZlbnRFbGVtZW50OwoJdC5yZXBvcnRFdmVudENsZWFyID0gcmVwb3J0RXZlbnRDbGVhcjsKCXQuZXZlbnRFbGVtZW50SGFuZGxlcnMgPSBldmVudEVsZW1lbnRIYW5kbGVyczsKCXQuc2hvd0V2ZW50cyA9IHNob3dFdmVudHM7Cgl0LmhpZGVFdmVudHMgPSBoaWRlRXZlbnRzOwoJdC5ldmVudERyb3AgPSBldmVudERyb3A7Cgl0LmV2ZW50UmVzaXplID0gZXZlbnRSZXNpemU7CgkvLyB0LnRpdGxlCgkvLyB0LnN0YXJ0LCB0LmVuZAoJLy8gdC52aXNTdGFydCwgdC52aXNFbmQKCQoJCgkvLyBpbXBvcnRzCgl2YXIgZGVmYXVsdEV2ZW50RW5kID0gdC5kZWZhdWx0RXZlbnRFbmQ7Cgl2YXIgbm9ybWFsaXplRXZlbnQgPSBjYWxlbmRhci5ub3JtYWxpemVFdmVudDsgLy8gaW4gRXZlbnRNYW5hZ2VyCgl2YXIgcmVwb3J0RXZlbnRDaGFuZ2UgPSBjYWxlbmRhci5yZXBvcnRFdmVudENoYW5nZTsKCQoJCgkvLyBsb2NhbHMKCXZhciBldmVudHNCeUlEID0ge307Cgl2YXIgZXZlbnRFbGVtZW50cyA9IFtdOwoJdmFyIGV2ZW50RWxlbWVudHNCeUlEID0ge307Cgl2YXIgb3B0aW9ucyA9IGNhbGVuZGFyLm9wdGlvbnM7CgkKCQoJCglmdW5jdGlvbiBvcHQobmFtZSwgdmlld05hbWVPdmVycmlkZSkgewoJCXZhciB2ID0gb3B0aW9uc1tuYW1lXTsKCQlpZiAodHlwZW9mIHYgPT0gJ29iamVjdCcpIHsKCQkJcmV0dXJuIHNtYXJ0UHJvcGVydHkodiwgdmlld05hbWVPdmVycmlkZSB8fCB2aWV3TmFtZSk7CgkJfQoJCXJldHVybiB2OwoJfQoKCQoJZnVuY3Rpb24gdHJpZ2dlcihuYW1lLCB0aGlzT2JqKSB7CgkJcmV0dXJuIGNhbGVuZGFyLnRyaWdnZXIuYXBwbHkoCgkJCWNhbGVuZGFyLAoJCQlbbmFtZSwgdGhpc09iaiB8fCB0XS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSwgW3RdKQoJCSk7Cgl9CgkKCQoJCgkvKiBFdmVudCBEYXRhCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCS8vIHJlcG9ydCB3aGVuIHZpZXcgcmVjZWl2ZXMgbmV3IGV2ZW50cwoJZnVuY3Rpb24gcmVwb3J0RXZlbnRzKGV2ZW50cykgeyAvLyBldmVudHMgYXJlIGFscmVhZHkgbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50CgkJZXZlbnRzQnlJRCA9IHt9OwoJCXZhciBpLCBsZW49ZXZlbnRzLmxlbmd0aCwgZXZlbnQ7CgkJZm9yIChpPTA7IGk8bGVuOyBpKyspIHsKCQkJZXZlbnQgPSBldmVudHNbaV07CgkJCWlmIChldmVudHNCeUlEW2V2ZW50Ll9pZF0pIHsKCQkJCWV2ZW50c0J5SURbZXZlbnQuX2lkXS5wdXNoKGV2ZW50KTsKCQkJfWVsc2V7CgkJCQlldmVudHNCeUlEW2V2ZW50Ll9pZF0gPSBbZXZlbnRdOwoJCQl9CgkJfQoJfQoJCgkKCS8vIHJldHVybnMgYSBEYXRlIG9iamVjdCBmb3IgYW4gZXZlbnQncyBlbmQKCWZ1bmN0aW9uIGV2ZW50RW5kKGV2ZW50KSB7CgkJcmV0dXJuIGV2ZW50LmVuZCA/IGNsb25lRGF0ZShldmVudC5lbmQpIDogZGVmYXVsdEV2ZW50RW5kKGV2ZW50KTsKCX0KCQoJCgkKCS8qIEV2ZW50IEVsZW1lbnRzCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgkKCS8vIHJlcG9ydCB3aGVuIHZpZXcgY3JlYXRlcyBhbiBlbGVtZW50IGZvciBhbiBldmVudAoJZnVuY3Rpb24gcmVwb3J0RXZlbnRFbGVtZW50KGV2ZW50LCBlbGVtZW50KSB7CgkJZXZlbnRFbGVtZW50cy5wdXNoKGVsZW1lbnQpOwoJCWlmIChldmVudEVsZW1lbnRzQnlJRFtldmVudC5faWRdKSB7CgkJCWV2ZW50RWxlbWVudHNCeUlEW2V2ZW50Ll9pZF0ucHVzaChlbGVtZW50KTsKCQl9ZWxzZXsKCQkJZXZlbnRFbGVtZW50c0J5SURbZXZlbnQuX2lkXSA9IFtlbGVtZW50XTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gcmVwb3J0RXZlbnRDbGVhcigpIHsKCQlldmVudEVsZW1lbnRzID0gW107CgkJZXZlbnRFbGVtZW50c0J5SUQgPSB7fTsKCX0KCQoJCgkvLyBhdHRhY2hlcyBldmVudENsaWNrLCBldmVudE1vdXNlb3ZlciwgZXZlbnRNb3VzZW91dAoJZnVuY3Rpb24gZXZlbnRFbGVtZW50SGFuZGxlcnMoZXZlbnQsIGV2ZW50RWxlbWVudCkgewoJCWV2ZW50RWxlbWVudAoJCQkuY2xpY2soZnVuY3Rpb24oZXYpIHsKCQkJCWlmICghZXZlbnRFbGVtZW50Lmhhc0NsYXNzKCd1aS1kcmFnZ2FibGUtZHJhZ2dpbmcnKSAmJgoJCQkJCSFldmVudEVsZW1lbnQuaGFzQ2xhc3MoJ3VpLXJlc2l6YWJsZS1yZXNpemluZycpKSB7CgkJCQkJCXJldHVybiB0cmlnZ2VyKCdldmVudENsaWNrJywgdGhpcywgZXZlbnQsIGV2KTsKCQkJCQl9CgkJCX0pCgkJCS5ob3ZlcigKCQkJCWZ1bmN0aW9uKGV2KSB7CgkJCQkJdHJpZ2dlcignZXZlbnRNb3VzZW92ZXInLCB0aGlzLCBldmVudCwgZXYpOwoJCQkJfSwKCQkJCWZ1bmN0aW9uKGV2KSB7CgkJCQkJdHJpZ2dlcignZXZlbnRNb3VzZW91dCcsIHRoaXMsIGV2ZW50LCBldik7CgkJCQl9CgkJCSk7CgkJLy8gVE9ETzogZG9uJ3QgZmlyZSBldmVudE1vdXNlb3Zlci9ldmVudE1vdXNlb3V0ICp3aGlsZSogZHJhZ2dpbmcgaXMgb2NjdXJpbmcgKG9uIHN1YmplY3QgZWxlbWVudCkKCQkvLyBUT0RPOiBzYW1lIGZvciByZXNpemluZwoJfQoJCgkKCWZ1bmN0aW9uIHNob3dFdmVudHMoZXZlbnQsIGV4Y2VwdEVsZW1lbnQpIHsKCQllYWNoRXZlbnRFbGVtZW50KGV2ZW50LCBleGNlcHRFbGVtZW50LCAnc2hvdycpOwoJfQoJCgkKCWZ1bmN0aW9uIGhpZGVFdmVudHMoZXZlbnQsIGV4Y2VwdEVsZW1lbnQpIHsKCQllYWNoRXZlbnRFbGVtZW50KGV2ZW50LCBleGNlcHRFbGVtZW50LCAnaGlkZScpOwoJfQoJCgkKCWZ1bmN0aW9uIGVhY2hFdmVudEVsZW1lbnQoZXZlbnQsIGV4Y2VwdEVsZW1lbnQsIGZ1bmNOYW1lKSB7CgkJdmFyIGVsZW1lbnRzID0gZXZlbnRFbGVtZW50c0J5SURbZXZlbnQuX2lkXSwKCQkJaSwgbGVuID0gZWxlbWVudHMubGVuZ3RoOwoJCWZvciAoaT0wOyBpPGxlbjsgaSsrKSB7CgkJCWlmICghZXhjZXB0RWxlbWVudCB8fCBlbGVtZW50c1tpXVswXSAhPSBleGNlcHRFbGVtZW50WzBdKSB7CgkJCQllbGVtZW50c1tpXVtmdW5jTmFtZV0oKTsKCQkJfQoJCX0KCX0KCQoJCgkKCS8qIEV2ZW50IE1vZGlmaWNhdGlvbiBSZXBvcnRpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gZXZlbnREcm9wKGUsIGV2ZW50LCBkYXlEZWx0YSwgbWludXRlRGVsdGEsIGFsbERheSwgZXYsIHVpKSB7CgkJdmFyIG9sZEFsbERheSA9IGV2ZW50LmFsbERheTsKCQl2YXIgZXZlbnRJZCA9IGV2ZW50Ll9pZDsKCQltb3ZlRXZlbnRzKGV2ZW50c0J5SURbZXZlbnRJZF0sIGRheURlbHRhLCBtaW51dGVEZWx0YSwgYWxsRGF5KTsKCQl0cmlnZ2VyKAoJCQknZXZlbnREcm9wJywKCQkJZSwKCQkJZXZlbnQsCgkJCWRheURlbHRhLAoJCQltaW51dGVEZWx0YSwKCQkJYWxsRGF5LAoJCQlmdW5jdGlvbigpIHsKCQkJCS8vIFRPRE86IGludmVzdGlnYXRlIGNhc2VzIHdoZXJlIHRoaXMgaW52ZXJzZSB0ZWNobmlxdWUgbWlnaHQgbm90IHdvcmsKCQkJCW1vdmVFdmVudHMoZXZlbnRzQnlJRFtldmVudElkXSwgLWRheURlbHRhLCAtbWludXRlRGVsdGEsIG9sZEFsbERheSk7CgkJCQlyZXBvcnRFdmVudENoYW5nZShldmVudElkKTsKCQkJfSwKCQkJZXYsCgkJCXVpCgkJKTsKCQlyZXBvcnRFdmVudENoYW5nZShldmVudElkKTsKCX0KCQoJCglmdW5jdGlvbiBldmVudFJlc2l6ZShlLCBldmVudCwgZGF5RGVsdGEsIG1pbnV0ZURlbHRhLCBldiwgdWkpIHsKCQl2YXIgZXZlbnRJZCA9IGV2ZW50Ll9pZDsKCQllbG9uZ2F0ZUV2ZW50cyhldmVudHNCeUlEW2V2ZW50SWRdLCBkYXlEZWx0YSwgbWludXRlRGVsdGEpOwoJCXRyaWdnZXIoCgkJCSdldmVudFJlc2l6ZScsCgkJCWUsCgkJCWV2ZW50LAoJCQlkYXlEZWx0YSwKCQkJbWludXRlRGVsdGEsCgkJCWZ1bmN0aW9uKCkgewoJCQkJLy8gVE9ETzogaW52ZXN0aWdhdGUgY2FzZXMgd2hlcmUgdGhpcyBpbnZlcnNlIHRlY2huaXF1ZSBtaWdodCBub3Qgd29yawoJCQkJZWxvbmdhdGVFdmVudHMoZXZlbnRzQnlJRFtldmVudElkXSwgLWRheURlbHRhLCAtbWludXRlRGVsdGEpOwoJCQkJcmVwb3J0RXZlbnRDaGFuZ2UoZXZlbnRJZCk7CgkJCX0sCgkJCWV2LAoJCQl1aQoJCSk7CgkJcmVwb3J0RXZlbnRDaGFuZ2UoZXZlbnRJZCk7Cgl9CgkKCQoJCgkvKiBFdmVudCBNb2RpZmljYXRpb24gTWF0aAoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCQoJCglmdW5jdGlvbiBtb3ZlRXZlbnRzKGV2ZW50cywgZGF5RGVsdGEsIG1pbnV0ZURlbHRhLCBhbGxEYXkpIHsKCQltaW51dGVEZWx0YSA9IG1pbnV0ZURlbHRhIHx8IDA7CgkJZm9yICh2YXIgZSwgbGVuPWV2ZW50cy5sZW5ndGgsIGk9MDsgaTxsZW47IGkrKykgewoJCQllID0gZXZlbnRzW2ldOwoJCQlpZiAoYWxsRGF5ICE9PSB1bmRlZmluZWQpIHsKCQkJCWUuYWxsRGF5ID0gYWxsRGF5OwoJCQl9CgkJCWFkZE1pbnV0ZXMoYWRkRGF5cyhlLnN0YXJ0LCBkYXlEZWx0YSwgdHJ1ZSksIG1pbnV0ZURlbHRhKTsKCQkJaWYgKGUuZW5kKSB7CgkJCQllLmVuZCA9IGFkZE1pbnV0ZXMoYWRkRGF5cyhlLmVuZCwgZGF5RGVsdGEsIHRydWUpLCBtaW51dGVEZWx0YSk7CgkJCX0KCQkJbm9ybWFsaXplRXZlbnQoZSwgb3B0aW9ucyk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIGVsb25nYXRlRXZlbnRzKGV2ZW50cywgZGF5RGVsdGEsIG1pbnV0ZURlbHRhKSB7CgkJbWludXRlRGVsdGEgPSBtaW51dGVEZWx0YSB8fCAwOwoJCWZvciAodmFyIGUsIGxlbj1ldmVudHMubGVuZ3RoLCBpPTA7IGk8bGVuOyBpKyspIHsKCQkJZSA9IGV2ZW50c1tpXTsKCQkJZS5lbmQgPSBhZGRNaW51dGVzKGFkZERheXMoZXZlbnRFbmQoZSksIGRheURlbHRhLCB0cnVlKSwgbWludXRlRGVsdGEpOwoJCQlub3JtYWxpemVFdmVudChlLCBvcHRpb25zKTsKCQl9Cgl9CgkKCn0KCmZ1bmN0aW9uIERheUV2ZW50UmVuZGVyZXIoKSB7Cgl2YXIgdCA9IHRoaXM7CgoJCgkvLyBleHBvcnRzCgl0LnJlbmRlckRheVNlZ3MgPSByZW5kZXJEYXlTZWdzOwoJdC5yZXNpemFibGVEYXlFdmVudCA9IHJlc2l6YWJsZURheUV2ZW50OwoJCgkKCS8vIGltcG9ydHMKCXZhciBvcHQgPSB0Lm9wdDsKCXZhciB0cmlnZ2VyID0gdC50cmlnZ2VyOwoJdmFyIGV2ZW50RW5kID0gdC5ldmVudEVuZDsKCXZhciByZXBvcnRFdmVudEVsZW1lbnQgPSB0LnJlcG9ydEV2ZW50RWxlbWVudDsKCXZhciBzaG93RXZlbnRzID0gdC5zaG93RXZlbnRzOwoJdmFyIGhpZGVFdmVudHMgPSB0LmhpZGVFdmVudHM7Cgl2YXIgZXZlbnRSZXNpemUgPSB0LmV2ZW50UmVzaXplOwoJdmFyIGdldFJvd0NudCA9IHQuZ2V0Um93Q250OwoJdmFyIGdldENvbENudCA9IHQuZ2V0Q29sQ250OwoJdmFyIGdldENvbFdpZHRoID0gdC5nZXRDb2xXaWR0aDsKCXZhciBhbGxEYXlUUiA9IHQuYWxsRGF5VFI7Cgl2YXIgYWxsRGF5Qm91bmRzID0gdC5hbGxEYXlCb3VuZHM7Cgl2YXIgY29sQ29udGVudExlZnQgPSB0LmNvbENvbnRlbnRMZWZ0OwoJdmFyIGNvbENvbnRlbnRSaWdodCA9IHQuY29sQ29udGVudFJpZ2h0OwoJdmFyIGRheU9mV2Vla0NvbCA9IHQuZGF5T2ZXZWVrQ29sOwoJdmFyIGRhdGVDZWxsID0gdC5kYXRlQ2VsbDsKCXZhciBjb21waWxlRGF5U2VncyA9IHQuY29tcGlsZURheVNlZ3M7Cgl2YXIgZ2V0RGF5U2VnbWVudENvbnRhaW5lciA9IHQuZ2V0RGF5U2VnbWVudENvbnRhaW5lcjsKCXZhciBiaW5kRGF5U2VnID0gdC5iaW5kRGF5U2VnOyAvL1RPRE86IHN0cmVhbWxpbmUgdGhpcwoJdmFyIGZvcm1hdERhdGVzID0gdC5jYWxlbmRhci5mb3JtYXREYXRlczsKCXZhciByZW5kZXJEYXlPdmVybGF5ID0gdC5yZW5kZXJEYXlPdmVybGF5OwoJdmFyIGNsZWFyT3ZlcmxheXMgPSB0LmNsZWFyT3ZlcmxheXM7Cgl2YXIgY2xlYXJTZWxlY3Rpb24gPSB0LmNsZWFyU2VsZWN0aW9uOwoJCgkKCQoJLyogUmVuZGVyaW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gcmVuZGVyRGF5U2VncyhzZWdzLCBtb2RpZmllZEV2ZW50SWQpIHsKCQl2YXIgc2VnbWVudENvbnRhaW5lciA9IGdldERheVNlZ21lbnRDb250YWluZXIoKTsKCQl2YXIgcm93RGl2czsKCQl2YXIgcm93Q250ID0gZ2V0Um93Q250KCk7CgkJdmFyIGNvbENudCA9IGdldENvbENudCgpOwoJCXZhciBpID0gMDsKCQl2YXIgcm93STsKCQl2YXIgbGV2ZWxJOwoJCXZhciBjb2xIZWlnaHRzOwoJCXZhciBqOwoJCXZhciBzZWdDbnQgPSBzZWdzLmxlbmd0aDsKCQl2YXIgc2VnOwoJCXZhciB0b3A7CgkJdmFyIGs7CgkJc2VnbWVudENvbnRhaW5lclswXS5pbm5lckhUTUwgPSBkYXlTZWdIVE1MKHNlZ3MpOyAvLyBmYXN0ZXIgdGhhbiAuaHRtbCgpCgkJZGF5U2VnRWxlbWVudFJlc29sdmUoc2Vncywgc2VnbWVudENvbnRhaW5lci5jaGlsZHJlbigpKTsKCQlkYXlTZWdFbGVtZW50UmVwb3J0KHNlZ3MpOwoJCWRheVNlZ0hhbmRsZXJzKHNlZ3MsIHNlZ21lbnRDb250YWluZXIsIG1vZGlmaWVkRXZlbnRJZCk7CgkJZGF5U2VnQ2FsY0hTaWRlcyhzZWdzKTsKCQlkYXlTZWdTZXRXaWR0aHMoc2Vncyk7CgkJZGF5U2VnQ2FsY0hlaWdodHMoc2Vncyk7CgkJcm93RGl2cyA9IGdldFJvd0RpdnMoKTsKCQkvLyBzZXQgcm93IGhlaWdodHMsIGNhbGN1bGF0ZSBldmVudCB0b3BzIChpbiByZWxhdGlvbiB0byByb3cgdG9wKQoJCWZvciAocm93ST0wOyByb3dJPHJvd0NudDsgcm93SSsrKSB7CgkJCWxldmVsSSA9IDA7CgkJCWNvbEhlaWdodHMgPSBbXTsKCQkJZm9yIChqPTA7IGo8Y29sQ250OyBqKyspIHsKCQkJCWNvbEhlaWdodHNbal0gPSAwOwoJCQl9CgkJCXdoaWxlIChpPHNlZ0NudCAmJiAoc2VnID0gc2Vnc1tpXSkucm93ID09IHJvd0kpIHsKCQkJCS8vIGxvb3AgdGhyb3VnaCBzZWdzIGluIGEgcm93CgkJCQl0b3AgPSBhcnJheU1heChjb2xIZWlnaHRzLnNsaWNlKHNlZy5zdGFydENvbCwgc2VnLmVuZENvbCkpOwoJCQkJc2VnLnRvcCA9IHRvcDsKCQkJCXRvcCArPSBzZWcub3V0ZXJIZWlnaHQ7CgkJCQlmb3IgKGs9c2VnLnN0YXJ0Q29sOyBrPHNlZy5lbmRDb2w7IGsrKykgewoJCQkJCWNvbEhlaWdodHNba10gPSB0b3A7CgkJCQl9CgkJCQlpKys7CgkJCX0KCQkJcm93RGl2c1tyb3dJXS5oZWlnaHQoYXJyYXlNYXgoY29sSGVpZ2h0cykpOwoJCX0KCQlkYXlTZWdTZXRUb3BzKHNlZ3MsIGdldFJvd1RvcHMocm93RGl2cykpOwoJfQoJCgkKCWZ1bmN0aW9uIHJlbmRlclRlbXBEYXlTZWdzKHNlZ3MsIGFkanVzdFJvdywgYWRqdXN0VG9wKSB7CgkJdmFyIHRlbXBDb250YWluZXIgPSAkKCI8ZGl2Lz4iKTsKCQl2YXIgZWxlbWVudHM7CgkJdmFyIHNlZ21lbnRDb250YWluZXIgPSBnZXREYXlTZWdtZW50Q29udGFpbmVyKCk7CgkJdmFyIGk7CgkJdmFyIHNlZ0NudCA9IHNlZ3MubGVuZ3RoOwoJCXZhciBlbGVtZW50OwoJCXRlbXBDb250YWluZXJbMF0uaW5uZXJIVE1MID0gZGF5U2VnSFRNTChzZWdzKTsgLy8gZmFzdGVyIHRoYW4gLmh0bWwoKQoJCWVsZW1lbnRzID0gdGVtcENvbnRhaW5lci5jaGlsZHJlbigpOwoJCXNlZ21lbnRDb250YWluZXIuYXBwZW5kKGVsZW1lbnRzKTsKCQlkYXlTZWdFbGVtZW50UmVzb2x2ZShzZWdzLCBlbGVtZW50cyk7CgkJZGF5U2VnQ2FsY0hTaWRlcyhzZWdzKTsKCQlkYXlTZWdTZXRXaWR0aHMoc2Vncyk7CgkJZGF5U2VnQ2FsY0hlaWdodHMoc2Vncyk7CgkJZGF5U2VnU2V0VG9wcyhzZWdzLCBnZXRSb3dUb3BzKGdldFJvd0RpdnMoKSkpOwoJCWVsZW1lbnRzID0gW107CgkJZm9yIChpPTA7IGk8c2VnQ250OyBpKyspIHsKCQkJZWxlbWVudCA9IHNlZ3NbaV0uZWxlbWVudDsKCQkJaWYgKGVsZW1lbnQpIHsKCQkJCWlmIChzZWdzW2ldLnJvdyA9PT0gYWRqdXN0Um93KSB7CgkJCQkJZWxlbWVudC5jc3MoJ3RvcCcsIGFkanVzdFRvcCk7CgkJCQl9CgkJCQllbGVtZW50cy5wdXNoKGVsZW1lbnRbMF0pOwoJCQl9CgkJfQoJCXJldHVybiAkKGVsZW1lbnRzKTsKCX0KCQoJCglmdW5jdGlvbiBkYXlTZWdIVE1MKHNlZ3MpIHsgLy8gYWxzbyBzZXRzIHNlZy5sZWZ0IGFuZCBzZWcub3V0ZXJXaWR0aAoJCXZhciBydGwgPSBvcHQoJ2lzUlRMJyk7CgkJdmFyIGk7CgkJdmFyIHNlZ0NudD1zZWdzLmxlbmd0aDsKCQl2YXIgc2VnOwoJCXZhciBldmVudDsKCQl2YXIgY2xhc3NOYW1lOwoJCXZhciBib3VuZHMgPSBhbGxEYXlCb3VuZHMoKTsKCQl2YXIgbWluTGVmdCA9IGJvdW5kcy5sZWZ0OwoJCXZhciBtYXhMZWZ0ID0gYm91bmRzLnJpZ2h0OwoJCXZhciBjb2xzID0gW107IC8vIGRvbid0IHJlYWxseSBsaWtlIHRoaXMgc3lzdGVtIChidXQgaGF2ZSB0byBkbyB0aGlzIGIvYyBSVEwgd29ya3MgZGlmZmVyZW50bHkgaW4gYmFzaWMgdnMgYWdlbmRhKQoJCXZhciBsZWZ0OwoJCXZhciByaWdodDsKCQl2YXIgaHRtbCA9ICcnOwoJCS8vIGNhbGN1bGF0ZSBkZXNpcmVkIHBvc2l0aW9uL2RpbWVuc2lvbnMsIGNyZWF0ZSBodG1sCgkJZm9yIChpPTA7IGk8c2VnQ250OyBpKyspIHsKCQkJc2VnID0gc2Vnc1tpXTsKCQkJZXZlbnQgPSBzZWcuZXZlbnQ7CgkJCWNsYXNzTmFtZSA9ICdmYy1ldmVudCBmYy1ldmVudC1ob3JpICc7CgkJCWlmIChydGwpIHsKCQkJCWlmIChzZWcuaXNTdGFydCkgewoJCQkJCWNsYXNzTmFtZSArPSAnZmMtY29ybmVyLXJpZ2h0ICc7CgkJCQl9CgkJCQlpZiAoc2VnLmlzRW5kKSB7CgkJCQkJY2xhc3NOYW1lICs9ICdmYy1jb3JuZXItbGVmdCAnOwoJCQkJfQoJCQkJY29sc1swXSA9IGRheU9mV2Vla0NvbChzZWcuZW5kLmdldERheSgpLTEpOwoJCQkJY29sc1sxXSA9IGRheU9mV2Vla0NvbChzZWcuc3RhcnQuZ2V0RGF5KCkpOwoJCQkJbGVmdCA9IHNlZy5pc0VuZCA/IGNvbENvbnRlbnRMZWZ0KGNvbHNbMF0pIDogbWluTGVmdDsKCQkJCXJpZ2h0ID0gc2VnLmlzU3RhcnQgPyBjb2xDb250ZW50UmlnaHQoY29sc1sxXSkgOiBtYXhMZWZ0OwoJCQl9ZWxzZXsKCQkJCWlmIChzZWcuaXNTdGFydCkgewoJCQkJCWNsYXNzTmFtZSArPSAnZmMtY29ybmVyLWxlZnQgJzsKCQkJCX0KCQkJCWlmIChzZWcuaXNFbmQpIHsKCQkJCQljbGFzc05hbWUgKz0gJ2ZjLWNvcm5lci1yaWdodCAnOwoJCQkJfQoJCQkJY29sc1swXSA9IGRheU9mV2Vla0NvbChzZWcuc3RhcnQuZ2V0RGF5KCkpOwoJCQkJY29sc1sxXSA9IGRheU9mV2Vla0NvbChzZWcuZW5kLmdldERheSgpLTEpOwoJCQkJbGVmdCA9IHNlZy5pc1N0YXJ0ID8gY29sQ29udGVudExlZnQoY29sc1swXSkgOiBtaW5MZWZ0OwoJCQkJcmlnaHQgPSBzZWcuaXNFbmQgPyBjb2xDb250ZW50UmlnaHQoY29sc1sxXSkgOiBtYXhMZWZ0OwoJCQl9CgkJCWh0bWwgKz0KCQkJCSI8ZGl2IGNsYXNzPSciICsgY2xhc3NOYW1lICsgZXZlbnQuY2xhc3NOYW1lLmpvaW4oJyAnKSArICInIHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Ojg7bGVmdDoiK2xlZnQrInB4Jz4iICsKCQkJCQkiPGEiICsgKGV2ZW50LnVybCA/ICIgaHJlZj0nIiArIGh0bWxFc2NhcGUoZXZlbnQudXJsKSArICInIiA6ICcnKSArICI+IiArCgkJCQkJCSghZXZlbnQuYWxsRGF5ICYmIHNlZy5pc1N0YXJ0ID8KCQkJCQkJCSI8c3BhbiBjbGFzcz0nZmMtZXZlbnQtdGltZSc+IiArCgkJCQkJCQkJaHRtbEVzY2FwZShmb3JtYXREYXRlcyhldmVudC5zdGFydCwgZXZlbnQuZW5kLCBvcHQoJ3RpbWVGb3JtYXQnKSkpICsKCQkJCQkJCSI8L3NwYW4+IgoJCQkJCQk6JycpICsKCQkJCQkJIjxzcGFuIGNsYXNzPSdmYy1ldmVudC10aXRsZSc+IiArIGh0bWxFc2NhcGUoZXZlbnQudGl0bGUpICsgIjwvc3Bhbj4iICsKCQkJCQkiPC9hPiIgKwoJCQkJCShzZWcuaXNFbmQgJiYgKGV2ZW50LmVkaXRhYmxlIHx8IGV2ZW50LmVkaXRhYmxlID09PSB1bmRlZmluZWQgJiYgb3B0KCdlZGl0YWJsZScpKSAmJiAhb3B0KCdkaXNhYmxlUmVzaXppbmcnKSA/CgkJCQkJCSI8ZGl2IGNsYXNzPSd1aS1yZXNpemFibGUtaGFuZGxlIHVpLXJlc2l6YWJsZS0iICsgKHJ0bCA/ICd3JyA6ICdlJykgKyAiJz48L2Rpdj4iCgkJCQkJCTogJycpICsKCQkJCSI8L2Rpdj4iOwoJCQlzZWcubGVmdCA9IGxlZnQ7CgkJCXNlZy5vdXRlcldpZHRoID0gcmlnaHQgLSBsZWZ0OwoJCQljb2xzLnNvcnQoY21wKTsKCQkJc2VnLnN0YXJ0Q29sID0gY29sc1swXTsKCQkJc2VnLmVuZENvbCA9IGNvbHNbMV0gKyAxOwoJCX0KCQlyZXR1cm4gaHRtbDsKCX0KCQoJCglmdW5jdGlvbiBkYXlTZWdFbGVtZW50UmVzb2x2ZShzZWdzLCBlbGVtZW50cykgeyAvLyBzZXRzIHNlZy5lbGVtZW50CgkJdmFyIGk7CgkJdmFyIHNlZ0NudCA9IHNlZ3MubGVuZ3RoOwoJCXZhciBzZWc7CgkJdmFyIGV2ZW50OwoJCXZhciBlbGVtZW50OwoJCXZhciB0cmlnZ2VyUmVzOwoJCWZvciAoaT0wOyBpPHNlZ0NudDsgaSsrKSB7CgkJCXNlZyA9IHNlZ3NbaV07CgkJCWV2ZW50ID0gc2VnLmV2ZW50OwoJCQllbGVtZW50ID0gJChlbGVtZW50c1tpXSk7IC8vIGZhc3RlciB0aGFuIC5lcSgpCgkJCXRyaWdnZXJSZXMgPSB0cmlnZ2VyKCdldmVudFJlbmRlcicsIGV2ZW50LCBldmVudCwgZWxlbWVudCk7CgkJCWlmICh0cmlnZ2VyUmVzID09PSBmYWxzZSkgewoJCQkJZWxlbWVudC5yZW1vdmUoKTsKCQkJfWVsc2V7CgkJCQlpZiAodHJpZ2dlclJlcyAmJiB0cmlnZ2VyUmVzICE9PSB0cnVlKSB7CgkJCQkJdHJpZ2dlclJlcyA9ICQodHJpZ2dlclJlcykKCQkJCQkJLmNzcyh7CgkJCQkJCQlwb3NpdGlvbjogJ2Fic29sdXRlJywKCQkJCQkJCWxlZnQ6IHNlZy5sZWZ0CgkJCQkJCX0pOwoJCQkJCWVsZW1lbnQucmVwbGFjZVdpdGgodHJpZ2dlclJlcyk7CgkJCQkJZWxlbWVudCA9IHRyaWdnZXJSZXM7CgkJCQl9CgkJCQlzZWcuZWxlbWVudCA9IGVsZW1lbnQ7CgkJCX0KCQl9Cgl9CgkKCQoJZnVuY3Rpb24gZGF5U2VnRWxlbWVudFJlcG9ydChzZWdzKSB7CgkJdmFyIGk7CgkJdmFyIHNlZ0NudCA9IHNlZ3MubGVuZ3RoOwoJCXZhciBzZWc7CgkJdmFyIGVsZW1lbnQ7CgkJZm9yIChpPTA7IGk8c2VnQ250OyBpKyspIHsKCQkJc2VnID0gc2Vnc1tpXTsKCQkJZWxlbWVudCA9IHNlZy5lbGVtZW50OwoJCQlpZiAoZWxlbWVudCkgewoJCQkJcmVwb3J0RXZlbnRFbGVtZW50KHNlZy5ldmVudCwgZWxlbWVudCk7CgkJCX0KCQl9Cgl9CgkKCQoJZnVuY3Rpb24gZGF5U2VnSGFuZGxlcnMoc2Vncywgc2VnbWVudENvbnRhaW5lciwgbW9kaWZpZWRFdmVudElkKSB7CgkJdmFyIGk7CgkJdmFyIHNlZ0NudCA9IHNlZ3MubGVuZ3RoOwoJCXZhciBzZWc7CgkJdmFyIGVsZW1lbnQ7CgkJdmFyIGV2ZW50OwoJCS8vIHJldHJpZXZlIGVsZW1lbnRzLCBydW4gdGhyb3VnaCBldmVudFJlbmRlciBjYWxsYmFjaywgYmluZCBoYW5kbGVycwoJCWZvciAoaT0wOyBpPHNlZ0NudDsgaSsrKSB7CgkJCXNlZyA9IHNlZ3NbaV07CgkJCWVsZW1lbnQgPSBzZWcuZWxlbWVudDsKCQkJaWYgKGVsZW1lbnQpIHsKCQkJCWV2ZW50ID0gc2VnLmV2ZW50OwoJCQkJaWYgKGV2ZW50Ll9pZCA9PT0gbW9kaWZpZWRFdmVudElkKSB7CgkJCQkJYmluZERheVNlZyhldmVudCwgZWxlbWVudCwgc2VnKTsKCQkJCX1lbHNlewoJCQkJCWVsZW1lbnRbMF0uX2ZjaSA9IGk7IC8vIGZvciBsYXp5U2VnQmluZAoJCQkJfQoJCQl9CgkJfQoJCWxhenlTZWdCaW5kKHNlZ21lbnRDb250YWluZXIsIHNlZ3MsIGJpbmREYXlTZWcpOwoJfQoJCgkKCWZ1bmN0aW9uIGRheVNlZ0NhbGNIU2lkZXMoc2VncykgeyAvLyBhbHNvIHNldHMgc2VnLmtleQoJCXZhciBpOwoJCXZhciBzZWdDbnQgPSBzZWdzLmxlbmd0aDsKCQl2YXIgc2VnOwoJCXZhciBlbGVtZW50OwoJCXZhciBrZXksIHZhbDsKCQl2YXIgaHNpZGVDYWNoZSA9IHt9OwoJCS8vIHJlY29yZCBldmVudCBob3Jpem9udGFsIHNpZGVzCgkJZm9yIChpPTA7IGk8c2VnQ250OyBpKyspIHsKCQkJc2VnID0gc2Vnc1tpXTsKCQkJZWxlbWVudCA9IHNlZy5lbGVtZW50OwoJCQlpZiAoZWxlbWVudCkgewoJCQkJa2V5ID0gc2VnLmtleSA9IGNzc0tleShlbGVtZW50WzBdKTsKCQkJCXZhbCA9IGhzaWRlQ2FjaGVba2V5XTsKCQkJCWlmICh2YWwgPT09IHVuZGVmaW5lZCkgewoJCQkJCXZhbCA9IGhzaWRlQ2FjaGVba2V5XSA9IGhzaWRlcyhlbGVtZW50WzBdLCB0cnVlKTsKCQkJCX0KCQkJCXNlZy5oc2lkZXMgPSB2YWw7CgkJCX0KCQl9Cgl9CgkKCQoJZnVuY3Rpb24gZGF5U2VnU2V0V2lkdGhzKHNlZ3MpIHsKCQl2YXIgaTsKCQl2YXIgc2VnQ250ID0gc2Vncy5sZW5ndGg7CgkJdmFyIHNlZzsKCQl2YXIgZWxlbWVudDsKCQlmb3IgKGk9MDsgaTxzZWdDbnQ7IGkrKykgewoJCQlzZWcgPSBzZWdzW2ldOwoJCQllbGVtZW50ID0gc2VnLmVsZW1lbnQ7CgkJCWlmIChlbGVtZW50KSB7CgkJCQllbGVtZW50WzBdLnN0eWxlLndpZHRoID0gTWF0aC5tYXgoMCwgc2VnLm91dGVyV2lkdGggLSBzZWcuaHNpZGVzKSArICdweCc7CgkJCX0KCQl9Cgl9CgkKCQoJZnVuY3Rpb24gZGF5U2VnQ2FsY0hlaWdodHMoc2VncykgewoJCXZhciBpOwoJCXZhciBzZWdDbnQgPSBzZWdzLmxlbmd0aDsKCQl2YXIgc2VnOwoJCXZhciBlbGVtZW50OwoJCXZhciBrZXksIHZhbDsKCQl2YXIgdm1hcmdpbkNhY2hlID0ge307CgkJLy8gcmVjb3JkIGV2ZW50IGhlaWdodHMKCQlmb3IgKGk9MDsgaTxzZWdDbnQ7IGkrKykgewoJCQlzZWcgPSBzZWdzW2ldOwoJCQllbGVtZW50ID0gc2VnLmVsZW1lbnQ7CgkJCWlmIChlbGVtZW50KSB7CgkJCQlrZXkgPSBzZWcua2V5OyAvLyBjcmVhdGVkIGluIGRheVNlZ0NhbGNIU2lkZXMKCQkJCXZhbCA9IHZtYXJnaW5DYWNoZVtrZXldOwoJCQkJaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7CgkJCQkJdmFsID0gdm1hcmdpbkNhY2hlW2tleV0gPSB2bWFyZ2lucyhlbGVtZW50WzBdKTsKCQkJCX0KCQkJCXNlZy5vdXRlckhlaWdodCA9IGVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0ICsgdmFsOwoJCQl9CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIGdldFJvd0RpdnMoKSB7CgkJdmFyIGk7CgkJdmFyIHJvd0NudCA9IGdldFJvd0NudCgpOwoJCXZhciByb3dEaXZzID0gW107CgkJZm9yIChpPTA7IGk8cm93Q250OyBpKyspIHsKCQkJcm93RGl2c1tpXSA9IGFsbERheVRSKGkpCgkJCQkuZmluZCgndGQ6Zmlyc3QgZGl2LmZjLWRheS1jb250ZW50ID4gZGl2Jyk7IC8vIG9wdGltYWwgc2VsZWN0b3I/CgkJfQoJCXJldHVybiByb3dEaXZzOwoJfQoJCgkKCWZ1bmN0aW9uIGdldFJvd1RvcHMocm93RGl2cykgewoJCXZhciBpOwoJCXZhciByb3dDbnQgPSByb3dEaXZzLmxlbmd0aDsKCQl2YXIgdG9wcyA9IFtdOwoJCWZvciAoaT0wOyBpPHJvd0NudDsgaSsrKSB7CgkJCXRvcHNbaV0gPSByb3dEaXZzW2ldWzBdLm9mZnNldFRvcDsKCQl9CgkJcmV0dXJuIHRvcHM7Cgl9CgkKCQoJZnVuY3Rpb24gZGF5U2VnU2V0VG9wcyhzZWdzLCByb3dUb3BzKSB7IC8vIGFsc28gdHJpZ2dlcnMgZXZlbnRBZnRlclJlbmRlcgoJCXZhciBpOwoJCXZhciBzZWdDbnQgPSBzZWdzLmxlbmd0aDsKCQl2YXIgc2VnOwoJCXZhciBlbGVtZW50OwoJCXZhciBldmVudDsKCQlmb3IgKGk9MDsgaTxzZWdDbnQ7IGkrKykgewoJCQlzZWcgPSBzZWdzW2ldOwoJCQllbGVtZW50ID0gc2VnLmVsZW1lbnQ7CgkJCWlmIChlbGVtZW50KSB7CgkJCQllbGVtZW50WzBdLnN0eWxlLnRvcCA9IHJvd1RvcHNbc2VnLnJvd10gKyAoc2VnLnRvcHx8MCkgKyAncHgnOwoJCQkJZXZlbnQgPSBzZWcuZXZlbnQ7CgkJCQl0cmlnZ2VyKCdldmVudEFmdGVyUmVuZGVyJywgZXZlbnQsIGV2ZW50LCBlbGVtZW50KTsKCQkJfQoJCX0KCX0KCQoJCgkKCS8qIFJlc2l6aW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gcmVzaXphYmxlRGF5RXZlbnQoZXZlbnQsIGVsZW1lbnQsIHNlZykgewoJCWlmICghb3B0KCdkaXNhYmxlUmVzaXppbmcnKSAmJiBzZWcuaXNFbmQpIHsKCQkJdmFyIHJ0bCA9IG9wdCgnaXNSVEwnKTsKCQkJdmFyIGRpcmVjdGlvbiA9IHJ0bCA/ICd3JyA6ICdlJzsKCQkJdmFyIGhhbmRsZSA9IGVsZW1lbnQuZmluZCgnZGl2LnVpLXJlc2l6YWJsZS0nICsgZGlyZWN0aW9uKTsKCQkJaGFuZGxlLm1vdXNlZG93bihmdW5jdGlvbihldikgewoJCQkJaWYgKGV2LndoaWNoICE9IDEpIHsKCQkJCQlyZXR1cm47IC8vIG5lZWRzIHRvIGJlIGxlZnQgbW91c2UgYnV0dG9uCgkJCQl9CgkJCQl2YXIgaG92ZXJMaXN0ZW5lciA9IHQuZ2V0SG92ZXJMaXN0ZW5lcigpOwoJCQkJdmFyIHJvd0NudCA9IGdldFJvd0NudCgpOwoJCQkJdmFyIGNvbENudCA9IGdldENvbENudCgpOwoJCQkJdmFyIGRpcyA9IHJ0bCA/IC0xIDogMTsKCQkJCXZhciBkaXQgPSBydGwgPyBjb2xDbnQgOiAwOwoJCQkJdmFyIGVsZW1lbnRUb3AgPSBlbGVtZW50LmNzcygndG9wJyk7CgkJCQl2YXIgZGF5RGVsdGE7CgkJCQl2YXIgaGVscGVyczsKCQkJCXZhciBldmVudENvcHkgPSAkLmV4dGVuZCh7fSwgZXZlbnQpOwoJCQkJdmFyIG1pbkNlbGwgPSBkYXRlQ2VsbChldmVudC5zdGFydCk7CgkJCQljbGVhclNlbGVjdGlvbigpOwoJCQkJJCgnYm9keScpCgkJCQkJLmNzcygnY3Vyc29yJywgZGlyZWN0aW9uICsgJy1yZXNpemUnKQoJCQkJCS5vbmUoJ21vdXNldXAnLCBtb3VzZXVwKTsKCQkJCXRyaWdnZXIoJ2V2ZW50UmVzaXplU3RhcnQnLCB0aGlzLCBldmVudCwgZXYpOwoJCQkJaG92ZXJMaXN0ZW5lci5zdGFydChmdW5jdGlvbihjZWxsLCBvcmlnQ2VsbCkgewoJCQkJCWlmIChjZWxsKSB7CgkJCQkJCXZhciByID0gTWF0aC5tYXgobWluQ2VsbC5yb3csIGNlbGwucm93KTsKCQkJCQkJdmFyIGMgPSBjZWxsLmNvbDsKCQkJCQkJaWYgKHJvd0NudCA9PSAxKSB7CgkJCQkJCQlyID0gMDsgLy8gaGFjayBmb3IgYWxsLWRheSBhcmVhIGluIGFnZW5kYSB2aWV3cwoJCQkJCQl9CgkJCQkJCWlmIChyID09IG1pbkNlbGwucm93KSB7CgkJCQkJCQlpZiAocnRsKSB7CgkJCQkJCQkJYyA9IE1hdGgubWluKG1pbkNlbGwuY29sLCBjKTsKCQkJCQkJCX1lbHNlewoJCQkJCQkJCWMgPSBNYXRoLm1heChtaW5DZWxsLmNvbCwgYyk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQkJZGF5RGVsdGEgPSAociAqIGNvbENudCArIGMqZGlzK2RpdCkgLSAob3JpZ0NlbGwucm93ICogY29sQ250ICsgb3JpZ0NlbGwuY29sKmRpcytkaXQpOwoJCQkJCQl2YXIgbmV3RW5kID0gYWRkRGF5cyhldmVudEVuZChldmVudCksIGRheURlbHRhLCB0cnVlKTsKCQkJCQkJaWYgKGRheURlbHRhKSB7CgkJCQkJCQlldmVudENvcHkuZW5kID0gbmV3RW5kOwoJCQkJCQkJdmFyIG9sZEhlbHBlcnMgPSBoZWxwZXJzOwoJCQkJCQkJaGVscGVycyA9IHJlbmRlclRlbXBEYXlTZWdzKGNvbXBpbGVEYXlTZWdzKFtldmVudENvcHldKSwgc2VnLnJvdywgZWxlbWVudFRvcCk7CgkJCQkJCQloZWxwZXJzLmZpbmQoJyonKS5jc3MoJ2N1cnNvcicsIGRpcmVjdGlvbiArICctcmVzaXplJyk7CgkJCQkJCQlpZiAob2xkSGVscGVycykgewoJCQkJCQkJCW9sZEhlbHBlcnMucmVtb3ZlKCk7CgkJCQkJCQl9CgkJCQkJCQloaWRlRXZlbnRzKGV2ZW50KTsKCQkJCQkJfWVsc2V7CgkJCQkJCQlpZiAoaGVscGVycykgewoJCQkJCQkJCXNob3dFdmVudHMoZXZlbnQpOwoJCQkJCQkJCWhlbHBlcnMucmVtb3ZlKCk7CgkJCQkJCQkJaGVscGVycyA9IG51bGw7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQkJY2xlYXJPdmVybGF5cygpOwoJCQkJCQlyZW5kZXJEYXlPdmVybGF5KGV2ZW50LnN0YXJ0LCBhZGREYXlzKGNsb25lRGF0ZShuZXdFbmQpLCAxKSk7IC8vIGNvb3JkaW5hdGUgZ3JpZCBhbHJlYWR5IHJlYnVpbGQgYXQgaG92ZXJMaXN0ZW5lci5zdGFydAoJCQkJCX0KCQkJCX0sIGV2KTsKCQkJCWZ1bmN0aW9uIG1vdXNldXAoZXYpIHsKCQkJCQl0cmlnZ2VyKCdldmVudFJlc2l6ZVN0b3AnLCB0aGlzLCBldmVudCwgZXYpOwoJCQkJCSQoJ2JvZHknKS5jc3MoJ2N1cnNvcicsICdhdXRvJyk7CgkJCQkJaG92ZXJMaXN0ZW5lci5zdG9wKCk7CgkJCQkJY2xlYXJPdmVybGF5cygpOwoJCQkJCWlmIChkYXlEZWx0YSkgewoJCQkJCQlldmVudFJlc2l6ZSh0aGlzLCBldmVudCwgZGF5RGVsdGEsIDAsIGV2KTsKCQkJCQkJLy8gZXZlbnQgcmVkcmF3IHdpbGwgY2xlYXIgaGVscGVycwoJCQkJCX0KCQkJCQkvLyBvdGhlcndpc2UsIHRoZSBkcmFnIGhhbmRsZXIgYWxyZWFkeSByZXN0b3JlZCB0aGUgb2xkIGV2ZW50cwoJCQkJfQoJCQl9KTsKCQl9Cgl9CgkKCn0KCi8vQlVHOiB1bnNlbGVjdCBuZWVkcyB0byBiZSB0cmlnZ2VyZWQgd2hlbiBldmVudHMgYXJlIGRyYWdnZWQrZHJvcHBlZAoKZnVuY3Rpb24gU2VsZWN0aW9uTWFuYWdlcigpIHsKCXZhciB0ID0gdGhpczsKCQoJCgkvLyBleHBvcnRzCgl0LnNlbGVjdCA9IHNlbGVjdDsKCXQudW5zZWxlY3QgPSB1bnNlbGVjdDsKCXQucmVwb3J0U2VsZWN0aW9uID0gcmVwb3J0U2VsZWN0aW9uOwoJdC5kYXlTZWxlY3Rpb25Nb3VzZWRvd24gPSBkYXlTZWxlY3Rpb25Nb3VzZWRvd247CgkKCQoJLy8gaW1wb3J0cwoJdmFyIG9wdCA9IHQub3B0OwoJdmFyIHRyaWdnZXIgPSB0LnRyaWdnZXI7Cgl2YXIgZGVmYXVsdFNlbGVjdGlvbkVuZCA9IHQuZGVmYXVsdFNlbGVjdGlvbkVuZDsKCXZhciByZW5kZXJTZWxlY3Rpb24gPSB0LnJlbmRlclNlbGVjdGlvbjsKCXZhciBjbGVhclNlbGVjdGlvbiA9IHQuY2xlYXJTZWxlY3Rpb247CgkKCQoJLy8gbG9jYWxzCgl2YXIgc2VsZWN0ZWQgPSBmYWxzZTsKCgoKCS8vIHVuc2VsZWN0QXV0bwoJaWYgKG9wdCgnc2VsZWN0YWJsZScpICYmIG9wdCgndW5zZWxlY3RBdXRvJykpIHsKCQkkKGRvY3VtZW50KS5tb3VzZWRvd24oZnVuY3Rpb24oZXYpIHsKCQkJdmFyIGlnbm9yZSA9IG9wdCgndW5zZWxlY3RDYW5jZWwnKTsKCQkJaWYgKGlnbm9yZSkgewoJCQkJaWYgKCQoZXYudGFyZ2V0KS5wYXJlbnRzKGlnbm9yZSkubGVuZ3RoKSB7IC8vIGNvdWxkIGJlIG9wdGltaXplZCB0byBzdG9wIGFmdGVyIGZpcnN0IG1hdGNoCgkJCQkJcmV0dXJuOwoJCQkJfQoJCQl9CgkJCXVuc2VsZWN0KGV2KTsKCQl9KTsKCX0KCQoKCWZ1bmN0aW9uIHNlbGVjdChzdGFydERhdGUsIGVuZERhdGUsIGFsbERheSkgewoJCXVuc2VsZWN0KCk7CgkJaWYgKCFlbmREYXRlKSB7CgkJCWVuZERhdGUgPSBkZWZhdWx0U2VsZWN0aW9uRW5kKHN0YXJ0RGF0ZSwgYWxsRGF5KTsKCQl9CgkJcmVuZGVyU2VsZWN0aW9uKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgYWxsRGF5KTsKCQlyZXBvcnRTZWxlY3Rpb24oc3RhcnREYXRlLCBlbmREYXRlLCBhbGxEYXkpOwoJfQoJCgkKCWZ1bmN0aW9uIHVuc2VsZWN0KGV2KSB7CgkJaWYgKHNlbGVjdGVkKSB7CgkJCXNlbGVjdGVkID0gZmFsc2U7CgkJCWNsZWFyU2VsZWN0aW9uKCk7CgkJCXRyaWdnZXIoJ3Vuc2VsZWN0JywgbnVsbCwgZXYpOwoJCX0KCX0KCQoJCglmdW5jdGlvbiByZXBvcnRTZWxlY3Rpb24oc3RhcnREYXRlLCBlbmREYXRlLCBhbGxEYXksIGV2KSB7CgkJc2VsZWN0ZWQgPSB0cnVlOwoJCXRyaWdnZXIoJ3NlbGVjdCcsIG51bGwsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgYWxsRGF5LCBldik7Cgl9CgkKCQoJZnVuY3Rpb24gZGF5U2VsZWN0aW9uTW91c2Vkb3duKGV2KSB7IC8vIG5vdCByZWFsbHkgYSBnZW5lcmljIG1hbmFnZXIgbWV0aG9kLCBvaCB3ZWxsCgkJdmFyIGNlbGxEYXRlID0gdC5jZWxsRGF0ZTsKCQl2YXIgY2VsbElzQWxsRGF5ID0gdC5jZWxsSXNBbGxEYXk7CgkJdmFyIGhvdmVyTGlzdGVuZXIgPSB0LmdldEhvdmVyTGlzdGVuZXIoKTsKCQlpZiAoZXYud2hpY2ggPT0gMSAmJiBvcHQoJ3NlbGVjdGFibGUnKSkgeyAvLyB3aGljaD09MSBtZWFucyBsZWZ0IG1vdXNlIGJ1dHRvbgoJCQl1bnNlbGVjdChldik7CgkJCXZhciBfbW91c2Vkb3duRWxlbWVudCA9IHRoaXM7CgkJCXZhciBkYXRlczsKCQkJaG92ZXJMaXN0ZW5lci5zdGFydChmdW5jdGlvbihjZWxsLCBvcmlnQ2VsbCkgeyAvLyBUT0RPOiBtYXliZSBwdXQgY2VsbERhdGUvY2VsbElzQWxsRGF5IGluZm8gaW4gY2VsbAoJCQkJY2xlYXJTZWxlY3Rpb24oKTsKCQkJCWlmIChjZWxsICYmIGNlbGxJc0FsbERheShjZWxsKSkgewoJCQkJCWRhdGVzID0gWyBjZWxsRGF0ZShvcmlnQ2VsbCksIGNlbGxEYXRlKGNlbGwpIF0uc29ydChjbXApOwoJCQkJCXJlbmRlclNlbGVjdGlvbihkYXRlc1swXSwgZGF0ZXNbMV0sIHRydWUpOwoJCQkJfWVsc2V7CgkJCQkJZGF0ZXMgPSBudWxsOwoJCQkJfQoJCQl9LCBldik7CgkJCSQoZG9jdW1lbnQpLm9uZSgnbW91c2V1cCcsIGZ1bmN0aW9uKGV2KSB7CgkJCQlob3Zlckxpc3RlbmVyLnN0b3AoKTsKCQkJCWlmIChkYXRlcykgewoJCQkJCWlmICgrZGF0ZXNbMF0gPT0gK2RhdGVzWzFdKSB7CgkJCQkJCXRyaWdnZXIoJ2RheUNsaWNrJywgX21vdXNlZG93bkVsZW1lbnQsIGRhdGVzWzBdLCB0cnVlLCBldik7CgkJCQkJCS8vIEJVRzogX21vdXNlZG93bkVsZW1lbnQgd2lsbCBzb21ldGltZXMgYmUgdGhlIG92ZXJsYXkKCQkJCQl9CgkJCQkJcmVwb3J0U2VsZWN0aW9uKGRhdGVzWzBdLCBkYXRlc1sxXSwgdHJ1ZSwgZXYpOwoJCQkJfQoJCQl9KTsKCQl9Cgl9CgoKfQogCmZ1bmN0aW9uIE92ZXJsYXlNYW5hZ2VyKCkgewoJdmFyIHQgPSB0aGlzOwoJCgkKCS8vIGV4cG9ydHMKCXQucmVuZGVyT3ZlcmxheSA9IHJlbmRlck92ZXJsYXk7Cgl0LmNsZWFyT3ZlcmxheXMgPSBjbGVhck92ZXJsYXlzOwoJCgkKCS8vIGxvY2FscwoJdmFyIHVzZWRPdmVybGF5cyA9IFtdOwoJdmFyIHVudXNlZE92ZXJsYXlzID0gW107CgkKCQoJZnVuY3Rpb24gcmVuZGVyT3ZlcmxheShyZWN0LCBwYXJlbnQpIHsKCQl2YXIgZSA9IHVudXNlZE92ZXJsYXlzLnNoaWZ0KCk7CgkJaWYgKCFlKSB7CgkJCWUgPSAkKCI8ZGl2IGNsYXNzPSdmYy1jZWxsLW92ZXJsYXknIHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjMnLz4iKTsKCQl9CgkJaWYgKGVbMF0ucGFyZW50Tm9kZSAhPSBwYXJlbnRbMF0pIHsKCQkJZS5hcHBlbmRUbyhwYXJlbnQpOwoJCX0KCQl1c2VkT3ZlcmxheXMucHVzaChlLmNzcyhyZWN0KS5zaG93KCkpOwoJCXJldHVybiBlOwoJfQoJCgoJZnVuY3Rpb24gY2xlYXJPdmVybGF5cygpIHsKCQl2YXIgZTsKCQl3aGlsZSAoZSA9IHVzZWRPdmVybGF5cy5zaGlmdCgpKSB7CgkJCXVudXNlZE92ZXJsYXlzLnB1c2goZS5oaWRlKCkudW5iaW5kKCkpOwoJCX0KCX0KCgp9CgpmdW5jdGlvbiBDb29yZGluYXRlR3JpZChidWlsZEZ1bmMpIHsKCgl2YXIgdCA9IHRoaXM7Cgl2YXIgcm93czsKCXZhciBjb2xzOwoJCgl0LmJ1aWxkID0gZnVuY3Rpb24oKSB7CgkJcm93cyA9IFtdOwoJCWNvbHMgPSBbXTsKCQlidWlsZEZ1bmMocm93cywgY29scyk7Cgl9OwoJCgl0LmNlbGwgPSBmdW5jdGlvbih4LCB5KSB7CgkJdmFyIHJvd0NudCA9IHJvd3MubGVuZ3RoOwoJCXZhciBjb2xDbnQgPSBjb2xzLmxlbmd0aDsKCQl2YXIgaSwgcj0tMSwgYz0tMTsKCQlmb3IgKGk9MDsgaTxyb3dDbnQ7IGkrKykgewoJCQlpZiAoeSA+PSByb3dzW2ldWzBdICYmIHkgPCByb3dzW2ldWzFdKSB7CgkJCQlyID0gaTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJCWZvciAoaT0wOyBpPGNvbENudDsgaSsrKSB7CgkJCWlmICh4ID49IGNvbHNbaV1bMF0gJiYgeCA8IGNvbHNbaV1bMV0pIHsKCQkJCWMgPSBpOwoJCQkJYnJlYWs7CgkJCX0KCQl9CgkJcmV0dXJuIChyPj0wICYmIGM+PTApID8geyByb3c6ciwgY29sOmMgfSA6IG51bGw7Cgl9OwoJCgl0LnJlY3QgPSBmdW5jdGlvbihyb3cwLCBjb2wwLCByb3cxLCBjb2wxLCBvcmlnaW5FbGVtZW50KSB7IC8vIHJvdzEsY29sMSBpcyBpbmNsdXNpdmUKCQl2YXIgb3JpZ2luID0gb3JpZ2luRWxlbWVudC5vZmZzZXQoKTsKCQlyZXR1cm4gewoJCQl0b3A6IHJvd3Nbcm93MF1bMF0gLSBvcmlnaW4udG9wLAoJCQlsZWZ0OiBjb2xzW2NvbDBdWzBdIC0gb3JpZ2luLmxlZnQsCgkJCXdpZHRoOiBjb2xzW2NvbDFdWzFdIC0gY29sc1tjb2wwXVswXSwKCQkJaGVpZ2h0OiByb3dzW3JvdzFdWzFdIC0gcm93c1tyb3cwXVswXQoJCX07Cgl9OwoKfQoKZnVuY3Rpb24gSG92ZXJMaXN0ZW5lcihjb29yZGluYXRlR3JpZCkgewoKCgl2YXIgdCA9IHRoaXM7Cgl2YXIgYmluZFR5cGU7Cgl2YXIgY2hhbmdlOwoJdmFyIGZpcnN0Q2VsbDsKCXZhciBjZWxsOwoJCgkKCXQuc3RhcnQgPSBmdW5jdGlvbihfY2hhbmdlLCBldiwgX2JpbmRUeXBlKSB7CgkJY2hhbmdlID0gX2NoYW5nZTsKCQlmaXJzdENlbGwgPSBjZWxsID0gbnVsbDsKCQljb29yZGluYXRlR3JpZC5idWlsZCgpOwoJCW1vdXNlKGV2KTsKCQliaW5kVHlwZSA9IF9iaW5kVHlwZSB8fCAnbW91c2Vtb3ZlJzsKCQkkKGRvY3VtZW50KS5iaW5kKGJpbmRUeXBlLCBtb3VzZSk7Cgl9OwoJCgkKCWZ1bmN0aW9uIG1vdXNlKGV2KSB7CgkJdmFyIG5ld0NlbGwgPSBjb29yZGluYXRlR3JpZC5jZWxsKGV2LnBhZ2VYLCBldi5wYWdlWSk7CgkJaWYgKCFuZXdDZWxsICE9ICFjZWxsIHx8IG5ld0NlbGwgJiYgKG5ld0NlbGwucm93ICE9IGNlbGwucm93IHx8IG5ld0NlbGwuY29sICE9IGNlbGwuY29sKSkgewoJCQlpZiAobmV3Q2VsbCkgewoJCQkJaWYgKCFmaXJzdENlbGwpIHsKCQkJCQlmaXJzdENlbGwgPSBuZXdDZWxsOwoJCQkJfQoJCQkJY2hhbmdlKG5ld0NlbGwsIGZpcnN0Q2VsbCwgbmV3Q2VsbC5yb3ctZmlyc3RDZWxsLnJvdywgbmV3Q2VsbC5jb2wtZmlyc3RDZWxsLmNvbCk7CgkJCX1lbHNlewoJCQkJY2hhbmdlKG5ld0NlbGwsIGZpcnN0Q2VsbCk7CgkJCX0KCQkJY2VsbCA9IG5ld0NlbGw7CgkJfQoJfQoJCgkKCXQuc3RvcCA9IGZ1bmN0aW9uKCkgewoJCSQoZG9jdW1lbnQpLnVuYmluZChiaW5kVHlwZSwgbW91c2UpOwoJCXJldHVybiBjZWxsOwoJfTsKCQoJCn0KCmZ1bmN0aW9uIEhvcml6b250YWxQb3NpdGlvbkNhY2hlKGdldEVsZW1lbnQpIHsKCgl2YXIgdCA9IHRoaXMsCgkJZWxlbWVudHMgPSB7fSwKCQlsZWZ0cyA9IHt9LAoJCXJpZ2h0cyA9IHt9OwoJCQoJZnVuY3Rpb24gZShpKSB7CgkJcmV0dXJuIGVsZW1lbnRzW2ldID0gZWxlbWVudHNbaV0gfHwgZ2V0RWxlbWVudChpKTsKCX0KCQoJdC5sZWZ0ID0gZnVuY3Rpb24oaSkgewoJCXJldHVybiBsZWZ0c1tpXSA9IGxlZnRzW2ldID09PSB1bmRlZmluZWQgPyBlKGkpLnBvc2l0aW9uKCkubGVmdCA6IGxlZnRzW2ldOwoJfTsKCQoJdC5yaWdodCA9IGZ1bmN0aW9uKGkpIHsKCQlyZXR1cm4gcmlnaHRzW2ldID0gcmlnaHRzW2ldID09PSB1bmRlZmluZWQgPyB0LmxlZnQoaSkgKyBlKGkpLndpZHRoKCkgOiByaWdodHNbaV07Cgl9OwoJCgl0LmNsZWFyID0gZnVuY3Rpb24oKSB7CgkJZWxlbWVudHMgPSB7fTsKCQlsZWZ0cyA9IHt9OwoJCXJpZ2h0cyA9IHt9OwoJfTsKCQp9CgoKZmMuYWRkRGF5cyA9IGFkZERheXM7CmZjLmNsb25lRGF0ZSA9IGNsb25lRGF0ZTsKZmMucGFyc2VEYXRlID0gcGFyc2VEYXRlOwpmYy5wYXJzZUlTTzg2MDEgPSBwYXJzZUlTTzg2MDE7CmZjLnBhcnNlVGltZSA9IHBhcnNlVGltZTsKZmMuZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGU7CmZjLmZvcm1hdERhdGVzID0gZm9ybWF0RGF0ZXM7CgoKCi8qIERhdGUgTWF0aAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgp2YXIgZGF5SURzID0gWydzdW4nLCAnbW9uJywgJ3R1ZScsICd3ZWQnLCAndGh1JywgJ2ZyaScsICdzYXQnXSwKCURBWV9NUyA9IDg2NDAwMDAwLAoJSE9VUl9NUyA9IDM2MDAwMDAsCglNSU5VVEVfTVMgPSA2MDAwMDsKCQoKZnVuY3Rpb24gYWRkWWVhcnMoZCwgbiwga2VlcFRpbWUpIHsKCWQuc2V0RnVsbFllYXIoZC5nZXRGdWxsWWVhcigpICsgbik7CglpZiAoIWtlZXBUaW1lKSB7CgkJY2xlYXJUaW1lKGQpOwoJfQoJcmV0dXJuIGQ7Cn0KCgpmdW5jdGlvbiBhZGRNb250aHMoZCwgbiwga2VlcFRpbWUpIHsgLy8gcHJldmVudHMgZGF5IG92ZXJmbG93L3VuZGVyZmxvdwoJaWYgKCtkKSB7IC8vIHByZXZlbnQgaW5maW5pdGUgbG9vcGluZyBvbiBpbnZhbGlkIGRhdGVzCgkJdmFyIG0gPSBkLmdldE1vbnRoKCkgKyBuLAoJCQljaGVjayA9IGNsb25lRGF0ZShkKTsKCQljaGVjay5zZXREYXRlKDEpOwoJCWNoZWNrLnNldE1vbnRoKG0pOwoJCWQuc2V0TW9udGgobSk7CgkJaWYgKCFrZWVwVGltZSkgewoJCQljbGVhclRpbWUoZCk7CgkJfQoJCXdoaWxlIChkLmdldE1vbnRoKCkgIT0gY2hlY2suZ2V0TW9udGgoKSkgewoJCQlkLnNldERhdGUoZC5nZXREYXRlKCkgKyAoZCA8IGNoZWNrID8gMSA6IC0xKSk7CgkJfQoJfQoJcmV0dXJuIGQ7Cn0KCgpmdW5jdGlvbiBhZGREYXlzKGQsIG4sIGtlZXBUaW1lKSB7IC8vIGRlYWxzIHdpdGggZGF5bGlnaHQgc2F2aW5ncwoJaWYgKCtkKSB7CgkJdmFyIGRkID0gZC5nZXREYXRlKCkgKyBuLAoJCQljaGVjayA9IGNsb25lRGF0ZShkKTsKCQljaGVjay5zZXRIb3Vycyg5KTsgLy8gc2V0IHRvIG1pZGRsZSBvZiBkYXkKCQljaGVjay5zZXREYXRlKGRkKTsKCQlkLnNldERhdGUoZGQpOwoJCWlmICgha2VlcFRpbWUpIHsKCQkJY2xlYXJUaW1lKGQpOwoJCX0KCQlmaXhEYXRlKGQsIGNoZWNrKTsKCX0KCXJldHVybiBkOwp9CgoKZnVuY3Rpb24gZml4RGF0ZShkLCBjaGVjaykgeyAvLyBmb3JjZSBkIHRvIGJlIG9uIGNoZWNrJ3MgWU1ELCBmb3IgZGF5bGlnaHQgc2F2aW5ncyBwdXJwb3NlcwoJaWYgKCtkKSB7IC8vIHByZXZlbnQgaW5maW5pdGUgbG9vcGluZyBvbiBpbnZhbGlkIGRhdGVzCgkJd2hpbGUgKGQuZ2V0RGF0ZSgpICE9IGNoZWNrLmdldERhdGUoKSkgewoJCQlkLnNldFRpbWUoK2QgKyAoZCA8IGNoZWNrID8gMSA6IC0xKSAqIEhPVVJfTVMpOwoJCX0KCX0KfQoKCmZ1bmN0aW9uIGFkZE1pbnV0ZXMoZCwgbikgewoJZC5zZXRNaW51dGVzKGQuZ2V0TWludXRlcygpICsgbik7CglyZXR1cm4gZDsKfQoKCmZ1bmN0aW9uIGNsZWFyVGltZShkKSB7CglkLnNldEhvdXJzKDApOwoJZC5zZXRNaW51dGVzKDApOwoJZC5zZXRTZWNvbmRzKDApOyAKCWQuc2V0TWlsbGlzZWNvbmRzKDApOwoJcmV0dXJuIGQ7Cn0KCgpmdW5jdGlvbiBjbG9uZURhdGUoZCwgZG9udEtlZXBUaW1lKSB7CglpZiAoZG9udEtlZXBUaW1lKSB7CgkJcmV0dXJuIGNsZWFyVGltZShuZXcgRGF0ZSgrZCkpOwoJfQoJcmV0dXJuIG5ldyBEYXRlKCtkKTsKfQoKCmZ1bmN0aW9uIHplcm9EYXRlKCkgeyAvLyByZXR1cm5zIGEgRGF0ZSB3aXRoIHRpbWUgMDA6MDA6MDAgYW5kIGRhdGVPZk1vbnRoPTEKCXZhciBpPTAsIGQ7CglkbyB7CgkJZCA9IG5ldyBEYXRlKDE5NzAsIGkrKywgMSk7Cgl9IHdoaWxlIChkLmdldEhvdXJzKCkpOyAvLyAhPSAwCglyZXR1cm4gZDsKfQoKCmZ1bmN0aW9uIHNraXBXZWVrZW5kKGRhdGUsIGluYywgZXhjbCkgewoJaW5jID0gaW5jIHx8IDE7Cgl3aGlsZSAoIWRhdGUuZ2V0RGF5KCkgfHwgKGV4Y2wgJiYgZGF0ZS5nZXREYXkoKT09MSB8fCAhZXhjbCAmJiBkYXRlLmdldERheSgpPT02KSkgewoJCWFkZERheXMoZGF0ZSwgaW5jKTsKCX0KCXJldHVybiBkYXRlOwp9CgoKZnVuY3Rpb24gZGF5RGlmZihkMSwgZDIpIHsgLy8gZDEgLSBkMgoJcmV0dXJuIE1hdGgucm91bmQoKGNsb25lRGF0ZShkMSwgdHJ1ZSkgLSBjbG9uZURhdGUoZDIsIHRydWUpKSAvIERBWV9NUyk7Cn0KCgpmdW5jdGlvbiBzZXRZTUQoZGF0ZSwgeSwgbSwgZCkgewoJaWYgKHkgIT09IHVuZGVmaW5lZCAmJiB5ICE9IGRhdGUuZ2V0RnVsbFllYXIoKSkgewoJCWRhdGUuc2V0RGF0ZSgxKTsKCQlkYXRlLnNldE1vbnRoKDApOwoJCWRhdGUuc2V0RnVsbFllYXIoeSk7Cgl9CglpZiAobSAhPT0gdW5kZWZpbmVkICYmIG0gIT0gZGF0ZS5nZXRNb250aCgpKSB7CgkJZGF0ZS5zZXREYXRlKDEpOwoJCWRhdGUuc2V0TW9udGgobSk7Cgl9CglpZiAoZCAhPT0gdW5kZWZpbmVkKSB7CgkJZGF0ZS5zZXREYXRlKGQpOwoJfQp9CgoKCi8qIERhdGUgUGFyc2luZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKZnVuY3Rpb24gcGFyc2VEYXRlKHMsIGlnbm9yZVRpbWV6b25lKSB7IC8vIGlnbm9yZVRpbWV6b25lIGRlZmF1bHRzIHRvIHRydWUKCWlmICh0eXBlb2YgcyA9PSAnb2JqZWN0JykgeyAvLyBhbHJlYWR5IGEgRGF0ZSBvYmplY3QKCQlyZXR1cm4gczsKCX0KCWlmICh0eXBlb2YgcyA9PSAnbnVtYmVyJykgeyAvLyBhIFVOSVggdGltZXN0YW1wCgkJcmV0dXJuIG5ldyBEYXRlKHMgKiAxMDAwKTsKCX0KCWlmICh0eXBlb2YgcyA9PSAnc3RyaW5nJykgewoJCWlmIChzLm1hdGNoKC9eXGQrJC8pKSB7IC8vIGEgVU5JWCB0aW1lc3RhbXAKCQkJcmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHMpICogMTAwMCk7CgkJfQoJCWlmIChpZ25vcmVUaW1lem9uZSA9PT0gdW5kZWZpbmVkKSB7CgkJCWlnbm9yZVRpbWV6b25lID0gdHJ1ZTsKCQl9CgkJcmV0dXJuIHBhcnNlSVNPODYwMShzLCBpZ25vcmVUaW1lem9uZSkgfHwgKHMgPyBuZXcgRGF0ZShzKSA6IG51bGwpOwoJfQoJLy8gVE9ETzogbmV2ZXIgcmV0dXJuIGludmFsaWQgZGF0ZXMgKGxpa2UgZnJvbSBuZXcgRGF0ZSg8c3RyaW5nPikpLCByZXR1cm4gbnVsbCBpbnN0ZWFkCglyZXR1cm4gbnVsbDsKfQoKCmZ1bmN0aW9uIHBhcnNlSVNPODYwMShzLCBpZ25vcmVUaW1lem9uZSkgeyAvLyBpZ25vcmVUaW1lem9uZSBkZWZhdWx0cyB0byBmYWxzZQoJLy8gZGVyaXZlZCBmcm9tIGh0dHA6Ly9kZWxldGUubWUudWsvMjAwNS8wMy9pc284NjAxLmh0bWwKCS8vIFRPRE86IGZvciBhIGtub3cgZ2xpdGNoL2ZlYXR1cmUsIHJlYWQgdGVzdHMvaXNzdWVfMjA2X3BhcnNlRGF0ZV9kc3QuaHRtbAoJdmFyIG0gPSBzLm1hdGNoKC9eKFswLTldezR9KSgtKFswLTldezJ9KSgtKFswLTldezJ9KShbVCBdKFswLTldezJ9KTooWzAtOV17Mn0pKDooWzAtOV17Mn0pKFwuKFswLTldKykpPyk/KFp8KChbLStdKShbMC05XXsyfSk6KFswLTldezJ9KSkpPyk/KT8pPyQvKTsKCWlmICghbSkgewoJCXJldHVybiBudWxsOwoJfQoJdmFyIGRhdGUgPSBuZXcgRGF0ZShtWzFdLCAwLCAxKTsKCWlmIChpZ25vcmVUaW1lem9uZSB8fCAhbVsxNF0pIHsKCQl2YXIgY2hlY2sgPSBuZXcgRGF0ZShtWzFdLCAwLCAxLCA5LCAwKTsKCQlpZiAobVszXSkgewoJCQlkYXRlLnNldE1vbnRoKG1bM10gLSAxKTsKCQkJY2hlY2suc2V0TW9udGgobVszXSAtIDEpOwoJCX0KCQlpZiAobVs1XSkgewoJCQlkYXRlLnNldERhdGUobVs1XSk7CgkJCWNoZWNrLnNldERhdGUobVs1XSk7CgkJfQoJCWZpeERhdGUoZGF0ZSwgY2hlY2spOwoJCWlmIChtWzddKSB7CgkJCWRhdGUuc2V0SG91cnMobVs3XSk7CgkJfQoJCWlmIChtWzhdKSB7CgkJCWRhdGUuc2V0TWludXRlcyhtWzhdKTsKCQl9CgkJaWYgKG1bMTBdKSB7CgkJCWRhdGUuc2V0U2Vjb25kcyhtWzEwXSk7CgkJfQoJCWlmIChtWzEyXSkgewoJCQlkYXRlLnNldE1pbGxpc2Vjb25kcyhOdW1iZXIoIjAuIiArIG1bMTJdKSAqIDEwMDApOwoJCX0KCQlmaXhEYXRlKGRhdGUsIGNoZWNrKTsKCX1lbHNlewoJCWRhdGUuc2V0VVRDRnVsbFllYXIoCgkJCW1bMV0sCgkJCW1bM10gPyBtWzNdIC0gMSA6IDAsCgkJCW1bNV0gfHwgMQoJCSk7CgkJZGF0ZS5zZXRVVENIb3VycygKCQkJbVs3XSB8fCAwLAoJCQltWzhdIHx8IDAsCgkJCW1bMTBdIHx8IDAsCgkJCW1bMTJdID8gTnVtYmVyKCIwLiIgKyBtWzEyXSkgKiAxMDAwIDogMAoJCSk7CgkJdmFyIG9mZnNldCA9IE51bWJlcihtWzE2XSkgKiA2MCArIE51bWJlcihtWzE3XSk7CgkJb2Zmc2V0ICo9IG1bMTVdID09ICctJyA/IDEgOiAtMTsKCQlkYXRlID0gbmV3IERhdGUoK2RhdGUgKyAob2Zmc2V0ICogNjAgKiAxMDAwKSk7Cgl9CglyZXR1cm4gZGF0ZTsKfQoKCmZ1bmN0aW9uIHBhcnNlVGltZShzKSB7IC8vIHJldHVybnMgbWludXRlcyBzaW5jZSBzdGFydCBvZiBkYXkKCWlmICh0eXBlb2YgcyA9PSAnbnVtYmVyJykgeyAvLyBhbiBob3VyCgkJcmV0dXJuIHMgKiA2MDsKCX0KCWlmICh0eXBlb2YgcyA9PSAnb2JqZWN0JykgeyAvLyBhIERhdGUgb2JqZWN0CgkJcmV0dXJuIHMuZ2V0SG91cnMoKSAqIDYwICsgcy5nZXRNaW51dGVzKCk7Cgl9Cgl2YXIgbSA9IHMubWF0Y2goLyhcZCspKD86OihcZCspKT9ccyooXHcrKT8vKTsKCWlmIChtKSB7CgkJdmFyIGggPSBwYXJzZUludChtWzFdKTsKCQlpZiAobVszXSkgewoJCQloICU9IDEyOwoJCQlpZiAobVszXS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PSAncCcpIHsKCQkJCWggKz0gMTI7CgkJCX0KCQl9CgkJcmV0dXJuIGggKiA2MCArIChtWzJdID8gcGFyc2VJbnQobVsyXSkgOiAwKTsKCX0KfQoKCgovKiBEYXRlIEZvcm1hdHRpbmcKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovLyBUT0RPOiB1c2Ugc2FtZSBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIFtkYXRlMl0sIGZvcm1hdCwgW29wdGlvbnNdKQoKCmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCBvcHRpb25zKSB7CglyZXR1cm4gZm9ybWF0RGF0ZXMoZGF0ZSwgbnVsbCwgZm9ybWF0LCBvcHRpb25zKTsKfQoKCmZ1bmN0aW9uIGZvcm1hdERhdGVzKGRhdGUxLCBkYXRlMiwgZm9ybWF0LCBvcHRpb25zKSB7CglvcHRpb25zID0gb3B0aW9ucyB8fCBkZWZhdWx0czsKCXZhciBkYXRlID0gZGF0ZTEsCgkJb3RoZXJEYXRlID0gZGF0ZTIsCgkJaSwgbGVuID0gZm9ybWF0Lmxlbmd0aCwgYywKCQlpMiwgZm9ybWF0dGVyLAoJCXJlcyA9ICcnOwoJZm9yIChpPTA7IGk8bGVuOyBpKyspIHsKCQljID0gZm9ybWF0LmNoYXJBdChpKTsKCQlpZiAoYyA9PSAiJyIpIHsKCQkJZm9yIChpMj1pKzE7IGkyPGxlbjsgaTIrKykgewoJCQkJaWYgKGZvcm1hdC5jaGFyQXQoaTIpID09ICInIikgewoJCQkJCWlmIChkYXRlKSB7CgkJCQkJCWlmIChpMiA9PSBpKzEpIHsKCQkJCQkJCXJlcyArPSAiJyI7CgkJCQkJCX1lbHNlewoJCQkJCQkJcmVzICs9IGZvcm1hdC5zdWJzdHJpbmcoaSsxLCBpMik7CgkJCQkJCX0KCQkJCQkJaSA9IGkyOwoJCQkJCX0KCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCX0KCQllbHNlIGlmIChjID09ICcoJykgewoJCQlmb3IgKGkyPWkrMTsgaTI8bGVuOyBpMisrKSB7CgkJCQlpZiAoZm9ybWF0LmNoYXJBdChpMikgPT0gJyknKSB7CgkJCQkJdmFyIHN1YnJlcyA9IGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LnN1YnN0cmluZyhpKzEsIGkyKSwgb3B0aW9ucyk7CgkJCQkJaWYgKHBhcnNlSW50KHN1YnJlcy5yZXBsYWNlKC9cRC8sICcnKSkpIHsKCQkJCQkJcmVzICs9IHN1YnJlczsKCQkJCQl9CgkJCQkJaSA9IGkyOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJfQoJCWVsc2UgaWYgKGMgPT0gJ1snKSB7CgkJCWZvciAoaTI9aSsxOyBpMjxsZW47IGkyKyspIHsKCQkJCWlmIChmb3JtYXQuY2hhckF0KGkyKSA9PSAnXScpIHsKCQkJCQl2YXIgc3ViZm9ybWF0ID0gZm9ybWF0LnN1YnN0cmluZyhpKzEsIGkyKTsKCQkJCQl2YXIgc3VicmVzID0gZm9ybWF0RGF0ZShkYXRlLCBzdWJmb3JtYXQsIG9wdGlvbnMpOwoJCQkJCWlmIChzdWJyZXMgIT0gZm9ybWF0RGF0ZShvdGhlckRhdGUsIHN1YmZvcm1hdCwgb3B0aW9ucykpIHsKCQkJCQkJcmVzICs9IHN1YnJlczsKCQkJCQl9CgkJCQkJaSA9IGkyOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJfQoJCWVsc2UgaWYgKGMgPT0gJ3snKSB7CgkJCWRhdGUgPSBkYXRlMjsKCQkJb3RoZXJEYXRlID0gZGF0ZTE7CgkJfQoJCWVsc2UgaWYgKGMgPT0gJ30nKSB7CgkJCWRhdGUgPSBkYXRlMTsKCQkJb3RoZXJEYXRlID0gZGF0ZTI7CgkJfQoJCWVsc2UgewoJCQlmb3IgKGkyPWxlbjsgaTI+aTsgaTItLSkgewoJCQkJaWYgKGZvcm1hdHRlciA9IGRhdGVGb3JtYXR0ZXJzW2Zvcm1hdC5zdWJzdHJpbmcoaSwgaTIpXSkgewoJCQkJCWlmIChkYXRlKSB7CgkJCQkJCXJlcyArPSBmb3JtYXR0ZXIoZGF0ZSwgb3B0aW9ucyk7CgkJCQkJfQoJCQkJCWkgPSBpMiAtIDE7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQkJaWYgKGkyID09IGkpIHsKCQkJCWlmIChkYXRlKSB7CgkJCQkJcmVzICs9IGM7CgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gcmVzOwp9OwoKCnZhciBkYXRlRm9ybWF0dGVycyA9IHsKCXMJOiBmdW5jdGlvbihkKQl7IHJldHVybiBkLmdldFNlY29uZHMoKSB9LAoJc3MJOiBmdW5jdGlvbihkKQl7IHJldHVybiB6ZXJvUGFkKGQuZ2V0U2Vjb25kcygpKSB9LAoJbQk6IGZ1bmN0aW9uKGQpCXsgcmV0dXJuIGQuZ2V0TWludXRlcygpIH0sCgltbQk6IGZ1bmN0aW9uKGQpCXsgcmV0dXJuIHplcm9QYWQoZC5nZXRNaW51dGVzKCkpIH0sCgloCTogZnVuY3Rpb24oZCkJeyByZXR1cm4gZC5nZXRIb3VycygpICUgMTIgfHwgMTIgfSwKCWhoCTogZnVuY3Rpb24oZCkJeyByZXR1cm4gemVyb1BhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMikgfSwKCUgJOiBmdW5jdGlvbihkKQl7IHJldHVybiBkLmdldEhvdXJzKCkgfSwKCUhICTogZnVuY3Rpb24oZCkJeyByZXR1cm4gemVyb1BhZChkLmdldEhvdXJzKCkpIH0sCglkCTogZnVuY3Rpb24oZCkJeyByZXR1cm4gZC5nZXREYXRlKCkgfSwKCWRkCTogZnVuY3Rpb24oZCkJeyByZXR1cm4gemVyb1BhZChkLmdldERhdGUoKSkgfSwKCWRkZAk6IGZ1bmN0aW9uKGQsbykJeyByZXR1cm4gby5kYXlOYW1lc1Nob3J0W2QuZ2V0RGF5KCldIH0sCglkZGRkOiBmdW5jdGlvbihkLG8pCXsgcmV0dXJuIG8uZGF5TmFtZXNbZC5nZXREYXkoKV0gfSwKCU0JOiBmdW5jdGlvbihkKQl7IHJldHVybiBkLmdldE1vbnRoKCkgKyAxIH0sCglNTQk6IGZ1bmN0aW9uKGQpCXsgcmV0dXJuIHplcm9QYWQoZC5nZXRNb250aCgpICsgMSkgfSwKCU1NTQk6IGZ1bmN0aW9uKGQsbykJeyByZXR1cm4gby5tb250aE5hbWVzU2hvcnRbZC5nZXRNb250aCgpXSB9LAoJTU1NTTogZnVuY3Rpb24oZCxvKQl7IHJldHVybiBvLm1vbnRoTmFtZXNbZC5nZXRNb250aCgpXSB9LAoJeXkJOiBmdW5jdGlvbihkKQl7IHJldHVybiAoZC5nZXRGdWxsWWVhcigpKycnKS5zdWJzdHJpbmcoMikgfSwKCXl5eXk6IGZ1bmN0aW9uKGQpCXsgcmV0dXJuIGQuZ2V0RnVsbFllYXIoKSB9LAoJdAk6IGZ1bmN0aW9uKGQpCXsgcmV0dXJuIGQuZ2V0SG91cnMoKSA8IDEyID8gJ2EnIDogJ3AnIH0sCgl0dAk6IGZ1bmN0aW9uKGQpCXsgcmV0dXJuIGQuZ2V0SG91cnMoKSA8IDEyID8gJ2FtJyA6ICdwbScgfSwKCVQJOiBmdW5jdGlvbihkKQl7IHJldHVybiBkLmdldEhvdXJzKCkgPCAxMiA/ICdBJyA6ICdQJyB9LAoJVFQJOiBmdW5jdGlvbihkKQl7IHJldHVybiBkLmdldEhvdXJzKCkgPCAxMiA/ICdBTScgOiAnUE0nIH0sCgl1CTogZnVuY3Rpb24oZCkJeyByZXR1cm4gZm9ybWF0RGF0ZShkLCAieXl5eS1NTS1kZCdUJ0hIOm1tOnNzJ1onIikgfSwKCVMJOiBmdW5jdGlvbihkKQl7CgkJdmFyIGRhdGUgPSBkLmdldERhdGUoKTsKCQlpZiAoZGF0ZSA+IDEwICYmIGRhdGUgPCAyMCkgewoJCQlyZXR1cm4gJ3RoJzsKCQl9CgkJcmV0dXJuIFsnc3QnLCAnbmQnLCAncmQnXVtkYXRlJTEwLTFdIHx8ICd0aCc7Cgl9Cn07CgoKCgovKiBFdmVudCBEYXRlIE1hdGgKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCmZ1bmN0aW9uIGV4Y2xFbmREYXkoZXZlbnQpIHsKCWlmIChldmVudC5lbmQpIHsKCQlyZXR1cm4gX2V4Y2xFbmREYXkoZXZlbnQuZW5kLCBldmVudC5hbGxEYXkpOwoJfWVsc2V7CgkJcmV0dXJuIGFkZERheXMoY2xvbmVEYXRlKGV2ZW50LnN0YXJ0KSwgMSk7Cgl9Cn0KCgpmdW5jdGlvbiBfZXhjbEVuZERheShlbmQsIGFsbERheSkgewoJZW5kID0gY2xvbmVEYXRlKGVuZCk7CglyZXR1cm4gYWxsRGF5IHx8IGVuZC5nZXRIb3VycygpIHx8IGVuZC5nZXRNaW51dGVzKCkgPyBhZGREYXlzKGVuZCwgMSkgOiBjbGVhclRpbWUoZW5kKTsKfQoKCmZ1bmN0aW9uIHNlZ0NtcChhLCBiKSB7CglyZXR1cm4gKGIubXNMZW5ndGggLSBhLm1zTGVuZ3RoKSAqIDEwMCArIChhLmV2ZW50LnN0YXJ0IC0gYi5ldmVudC5zdGFydCk7Cn0KCgpmdW5jdGlvbiBzZWdzQ29sbGlkZShzZWcxLCBzZWcyKSB7CglyZXR1cm4gc2VnMS5lbmQgPiBzZWcyLnN0YXJ0ICYmIHNlZzEuc3RhcnQgPCBzZWcyLmVuZDsKfQoKCgovKiBFdmVudCBTb3J0aW5nCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgovLyBldmVudCByZW5kZXJpbmcgdXRpbGl0aWVzCmZ1bmN0aW9uIHNsaWNlU2VncyhldmVudHMsIHZpc0V2ZW50RW5kcywgc3RhcnQsIGVuZCkgewoJdmFyIHNlZ3MgPSBbXSwKCQlpLCBsZW49ZXZlbnRzLmxlbmd0aCwgZXZlbnQsCgkJZXZlbnRTdGFydCwgZXZlbnRFbmQsCgkJc2VnU3RhcnQsIHNlZ0VuZCwKCQlpc1N0YXJ0LCBpc0VuZDsKCWZvciAoaT0wOyBpPGxlbjsgaSsrKSB7CgkJZXZlbnQgPSBldmVudHNbaV07CgkJZXZlbnRTdGFydCA9IGV2ZW50LnN0YXJ0OwoJCWV2ZW50RW5kID0gdmlzRXZlbnRFbmRzW2ldOwoJCWlmIChldmVudEVuZCA+IHN0YXJ0ICYmIGV2ZW50U3RhcnQgPCBlbmQpIHsKCQkJaWYgKGV2ZW50U3RhcnQgPCBzdGFydCkgewoJCQkJc2VnU3RhcnQgPSBjbG9uZURhdGUoc3RhcnQpOwoJCQkJaXNTdGFydCA9IGZhbHNlOwoJCQl9ZWxzZXsKCQkJCXNlZ1N0YXJ0ID0gZXZlbnRTdGFydDsKCQkJCWlzU3RhcnQgPSB0cnVlOwoJCQl9CgkJCWlmIChldmVudEVuZCA+IGVuZCkgewoJCQkJc2VnRW5kID0gY2xvbmVEYXRlKGVuZCk7CgkJCQlpc0VuZCA9IGZhbHNlOwoJCQl9ZWxzZXsKCQkJCXNlZ0VuZCA9IGV2ZW50RW5kOwoJCQkJaXNFbmQgPSB0cnVlOwoJCQl9CgkJCXNlZ3MucHVzaCh7CgkJCQlldmVudDogZXZlbnQsCgkJCQlzdGFydDogc2VnU3RhcnQsCgkJCQllbmQ6IHNlZ0VuZCwKCQkJCWlzU3RhcnQ6IGlzU3RhcnQsCgkJCQlpc0VuZDogaXNFbmQsCgkJCQltc0xlbmd0aDogc2VnRW5kIC0gc2VnU3RhcnQKCQkJfSk7CgkJfQoJfSAKCXJldHVybiBzZWdzLnNvcnQoc2VnQ21wKTsKfQoKCi8vIGV2ZW50IHJlbmRlcmluZyBjYWxjdWxhdGlvbiB1dGlsaXRpZXMKZnVuY3Rpb24gc3RhY2tTZWdzKHNlZ3MpIHsKCXZhciBsZXZlbHMgPSBbXSwKCQlpLCBsZW4gPSBzZWdzLmxlbmd0aCwgc2VnLAoJCWosIGNvbGxpZGUsIGs7Cglmb3IgKGk9MDsgaTxsZW47IGkrKykgewoJCXNlZyA9IHNlZ3NbaV07CgkJaiA9IDA7IC8vIHRoZSBsZXZlbCBpbmRleCB3aGVyZSBzZWcgc2hvdWxkIGJlbG9uZwoJCXdoaWxlICh0cnVlKSB7CgkJCWNvbGxpZGUgPSBmYWxzZTsKCQkJaWYgKGxldmVsc1tqXSkgewoJCQkJZm9yIChrPTA7IGs8bGV2ZWxzW2pdLmxlbmd0aDsgaysrKSB7CgkJCQkJaWYgKHNlZ3NDb2xsaWRlKGxldmVsc1tqXVtrXSwgc2VnKSkgewoJCQkJCQljb2xsaWRlID0gdHJ1ZTsKCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQl9CgkJCWlmIChjb2xsaWRlKSB7CgkJCQlqKys7CgkJCX1lbHNlewoJCQkJYnJlYWs7CgkJCX0KCQl9CgkJaWYgKGxldmVsc1tqXSkgewoJCQlsZXZlbHNbal0ucHVzaChzZWcpOwoJCX1lbHNlewoJCQlsZXZlbHNbal0gPSBbc2VnXTsKCQl9Cgl9CglyZXR1cm4gbGV2ZWxzOwp9CgoKCi8qIEV2ZW50IEVsZW1lbnQgQmluZGluZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKZnVuY3Rpb24gbGF6eVNlZ0JpbmQoY29udGFpbmVyLCBzZWdzLCBiaW5kSGFuZGxlcnMpIHsKCWNvbnRhaW5lci51bmJpbmQoJ21vdXNlb3ZlcicpLm1vdXNlb3ZlcihmdW5jdGlvbihldikgewoJCXZhciBwYXJlbnQ9ZXYudGFyZ2V0LCBlLAoJCQlpLCBzZWc7CgkJd2hpbGUgKHBhcmVudCAhPSB0aGlzKSB7CgkJCWUgPSBwYXJlbnQ7CgkJCXBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlOwoJCX0KCQlpZiAoKGkgPSBlLl9mY2kpICE9PSB1bmRlZmluZWQpIHsKCQkJZS5fZmNpID0gdW5kZWZpbmVkOwoJCQlzZWcgPSBzZWdzW2ldOwoJCQliaW5kSGFuZGxlcnMoc2VnLmV2ZW50LCBzZWcuZWxlbWVudCwgc2VnKTsKCQkJJChldi50YXJnZXQpLnRyaWdnZXIoZXYpOwoJCX0KCQlldi5zdG9wUHJvcGFnYXRpb24oKTsKCX0pOwp9CgoKCi8qIEVsZW1lbnQgRGltZW5zaW9ucwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKZnVuY3Rpb24gc2V0T3V0ZXJXaWR0aChlbGVtZW50LCB3aWR0aCwgaW5jbHVkZU1hcmdpbnMpIHsKCWVsZW1lbnQuZWFjaChmdW5jdGlvbihpLCBfZWxlbWVudCkgewoJCV9lbGVtZW50LnN0eWxlLndpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggLSBoc2lkZXMoX2VsZW1lbnQsIGluY2x1ZGVNYXJnaW5zKSkgKyAncHgnOwoJfSk7Cn0KCgpmdW5jdGlvbiBzZXRPdXRlckhlaWdodChlbGVtZW50LCBoZWlnaHQsIGluY2x1ZGVNYXJnaW5zKSB7CgllbGVtZW50LmVhY2goZnVuY3Rpb24oaSwgX2VsZW1lbnQpIHsKCQlfZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heCgwLCBoZWlnaHQgLSB2c2lkZXMoX2VsZW1lbnQsIGluY2x1ZGVNYXJnaW5zKSkgKyAncHgnOwoJfSk7Cn0KCgovLyBUT0RPOiBjdXJDU1MgaGFzIGJlZW4gZGVwcmVjYXRlZAoKCmZ1bmN0aW9uIGhzaWRlcyhfZWxlbWVudCwgaW5jbHVkZU1hcmdpbnMpIHsKCXJldHVybiAocGFyc2VGbG9hdCgkLmN1ckNTUyhfZWxlbWVudCwgJ3BhZGRpbmdMZWZ0JywgdHJ1ZSkpIHx8IDApICsKCSAgICAgICAocGFyc2VGbG9hdCgkLmN1ckNTUyhfZWxlbWVudCwgJ3BhZGRpbmdSaWdodCcsIHRydWUpKSB8fCAwKSArCgkgICAgICAgKHBhcnNlRmxvYXQoJC5jdXJDU1MoX2VsZW1lbnQsICdib3JkZXJMZWZ0V2lkdGgnLCB0cnVlKSkgfHwgMCkgKwoJICAgICAgIChwYXJzZUZsb2F0KCQuY3VyQ1NTKF9lbGVtZW50LCAnYm9yZGVyUmlnaHRXaWR0aCcsIHRydWUpKSB8fCAwKSArCgkgICAgICAgKGluY2x1ZGVNYXJnaW5zID8gaG1hcmdpbnMoX2VsZW1lbnQpIDogMCk7Cn0KCgpmdW5jdGlvbiBobWFyZ2lucyhfZWxlbWVudCkgewoJcmV0dXJuIChwYXJzZUZsb2F0KCQuY3VyQ1NTKF9lbGVtZW50LCAnbWFyZ2luTGVmdCcsIHRydWUpKSB8fCAwKSArCgkgICAgICAgKHBhcnNlRmxvYXQoJC5jdXJDU1MoX2VsZW1lbnQsICdtYXJnaW5SaWdodCcsIHRydWUpKSB8fCAwKTsKfQoKCmZ1bmN0aW9uIHZzaWRlcyhfZWxlbWVudCwgaW5jbHVkZU1hcmdpbnMpIHsKCXJldHVybiAocGFyc2VGbG9hdCgkLmN1ckNTUyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnLCB0cnVlKSkgfHwgMCkgKwoJICAgICAgIChwYXJzZUZsb2F0KCQuY3VyQ1NTKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScsIHRydWUpKSB8fCAwKSArCgkgICAgICAgKHBhcnNlRmxvYXQoJC5jdXJDU1MoX2VsZW1lbnQsICdib3JkZXJUb3BXaWR0aCcsIHRydWUpKSB8fCAwKSArCgkgICAgICAgKHBhcnNlRmxvYXQoJC5jdXJDU1MoX2VsZW1lbnQsICdib3JkZXJCb3R0b21XaWR0aCcsIHRydWUpKSB8fCAwKSArCgkgICAgICAgKGluY2x1ZGVNYXJnaW5zID8gdm1hcmdpbnMoX2VsZW1lbnQpIDogMCk7Cn0KCgpmdW5jdGlvbiB2bWFyZ2lucyhfZWxlbWVudCkgewoJcmV0dXJuIChwYXJzZUZsb2F0KCQuY3VyQ1NTKF9lbGVtZW50LCAnbWFyZ2luVG9wJywgdHJ1ZSkpIHx8IDApICsKCSAgICAgICAocGFyc2VGbG9hdCgkLmN1ckNTUyhfZWxlbWVudCwgJ21hcmdpbkJvdHRvbScsIHRydWUpKSB8fCAwKTsKfQoKCmZ1bmN0aW9uIHNldE1pbkhlaWdodChlbGVtZW50LCBoKSB7CgloID0gdHlwZW9mIGggPT0gJ251bWJlcicgPyBoICsgJ3B4JyA6IGg7CgllbGVtZW50WzBdLnN0eWxlLmNzc1RleHQgKz0gJzttaW4taGVpZ2h0OicgKyBoICsgJztfaGVpZ2h0OicgKyBoOwp9CgoKCi8qIFBvc2l0aW9uIENhbGN1bGF0aW9uCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLy8gbmFzdHkgYnVncyBpbiBvcGVyYSA5LjI1Ci8vIHBvc2l0aW9uKCkncyB0b3AgcmV0dXJuaW5nIGluY29ycmVjdGx5IHdpdGggVFIvVEQgb3IgZWxlbWVudHMgd2l0aGluIFRECgp2YXIgdG9wQnVnOwoKZnVuY3Rpb24gdG9wQ29ycmVjdCh0cikgeyAvLyB0ci90aC90ZCBvciBhbnl0aGluZyBlbHNlCglpZiAodG9wQnVnICE9PSBmYWxzZSkgewoJCXZhciBjZWxsOwoJCWlmICh0ci5pcygndGgsdGQnKSkgewoJCQl0ciA9IChjZWxsID0gdHIpLnBhcmVudCgpOwoJCX0KCQlpZiAodG9wQnVnID09PSB1bmRlZmluZWQgJiYgdHIuaXMoJ3RyJykpIHsKCQkJdG9wQnVnID0gdHIucG9zaXRpb24oKS50b3AgIT0gdHIuY2hpbGRyZW4oKS5wb3NpdGlvbigpLnRvcDsKCQl9CgkJaWYgKHRvcEJ1ZykgewoJCQlyZXR1cm4gdHIucGFyZW50KCkucG9zaXRpb24oKS50b3AgKyAoY2VsbCA/IHRyLnBvc2l0aW9uKCkudG9wIC0gY2VsbC5wb3NpdGlvbigpLnRvcCA6IDApOwoJCX0KCX0KCXJldHVybiAwOwp9CgoKCi8qIE1pc2MgVXRpbHMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCi8vVE9ETzogYXJyYXlTbGljZQovL1RPRE86IGlzRnVuY3Rpb24sIGdyZXAgPwoKCmZ1bmN0aW9uIG5vb3AoKSB7IH0KCgpmdW5jdGlvbiBjbXAoYSwgYikgewoJcmV0dXJuIGEgLSBiOwp9CgoKZnVuY3Rpb24gYXJyYXlNYXgoYSkgewoJcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIGEpOwp9CgoKZnVuY3Rpb24gemVyb1BhZChuKSB7CglyZXR1cm4gKG4gPCAxMCA/ICcwJyA6ICcnKSArIG47Cn0KCgpmdW5jdGlvbiBzbWFydFByb3BlcnR5KG9iaiwgbmFtZSkgeyAvLyBnZXQgYSBjYW1lbC1jYXNlZC9uYW1lc3BhY2VkIHByb3BlcnR5IG9mIGFuIG9iamVjdAoJaWYgKG9ialtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7CgkJcmV0dXJuIG9ialtuYW1lXTsKCX0KCXZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoLyg/PVtBLVpdKS8pLAoJCWk9cGFydHMubGVuZ3RoLTEsIHJlczsKCWZvciAoOyBpPj0wOyBpLS0pIHsKCQlyZXMgPSBvYmpbcGFydHNbaV0udG9Mb3dlckNhc2UoKV07CgkJaWYgKHJlcyAhPT0gdW5kZWZpbmVkKSB7CgkJCXJldHVybiByZXM7CgkJfQoJfQoJcmV0dXJuIG9ialsnJ107Cn0KCgpmdW5jdGlvbiBodG1sRXNjYXBlKHMpIHsKCXJldHVybiBzLnJlcGxhY2UoLyYvZywgJyZhbXA7JykKCQkucmVwbGFjZSgvPC9nLCAnJmx0OycpCgkJLnJlcGxhY2UoLz4vZywgJyZndDsnKQoJCS5yZXBsYWNlKC8nL2csICcmIzAzOTsnKQoJCS5yZXBsYWNlKC8iL2csICcmcXVvdDsnKQoJCS5yZXBsYWNlKC9cbi9nLCAnPGJyIC8+Jyk7Cn0KCgpmdW5jdGlvbiBjc3NLZXkoX2VsZW1lbnQpIHsKCXJldHVybiBfZWxlbWVudC5pZCArICcvJyArIF9lbGVtZW50LmNsYXNzTmFtZSArICcvJyArIF9lbGVtZW50LnN0eWxlLmNzc1RleHQucmVwbGFjZSgvKF58OylccyoodG9wfGxlZnR8d2lkdGh8aGVpZ2h0KVxzKjpbXjtdKi9pZywgJycpOwp9CgoKZnVuY3Rpb24gZGlzYWJsZVRleHRTZWxlY3Rpb24oZWxlbWVudCkgewoJZWxlbWVudAoJCS5hdHRyKCd1bnNlbGVjdGFibGUnLCAnb24nKQoJCS5jc3MoJ01velVzZXJTZWxlY3QnLCAnbm9uZScpCgkJLmJpbmQoJ3NlbGVjdHN0YXJ0LnVpJywgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSk7Cn0KCgovKgpmdW5jdGlvbiBlbmFibGVUZXh0U2VsZWN0aW9uKGVsZW1lbnQpIHsKCWVsZW1lbnQKCQkuYXR0cigndW5zZWxlY3RhYmxlJywgJ29mZicpCgkJLmNzcygnTW96VXNlclNlbGVjdCcsICcnKQoJCS51bmJpbmQoJ3NlbGVjdHN0YXJ0LnVpJyk7Cn0KKi8KCgoNCn0pKGpRdWVyeSk7",
	"int.js": "",
	"jquery-ui-custom.js": "",
	"jquery.js": "",
	"json.js": "",
	"list.css": "LyoKIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgR1BMdjMKIENvcHlyaWdodCAyMDEwLCBBbGVzc2FuZHJvIEFyemlsbGkKICovCgoqIHsKICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwp9CgoucG9wdXAgewogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7Cn0KCnRhYmxlIHsKICAgIGZvbnQtc2l6ZTogMTBwdDsKfQoKLnByY2hhbmdlID4gdGQgewogICAgcGFkZGluZy10b3A6IDEwcHg7CiAgICBmb250LXNpemU6IGxhcmdlOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5lbnRyeSB7CiAgICBiYWNrZ3JvdW5kOiBub25lIHJlcGVhdCBzY3JvbGwgMCAwICNGM0Y1RkM7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjQ0NDQ0NDOwp9CgouZW50cnkgPiB0ZCB7CiAgICBwYWRkaW5nOiA0cHg7Cn0KCi5ldGl0bGUgewogICAgd2lkdGg6IDY1JTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouZXRpdGxlID4gYSB7CiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICBjb2xvcjogYmxhY2s7Cn0KCi5wcmlvcml0eWJ1dHRvbiB7CiAgICB3aWR0aDogNjBweDsKICAgIGNvbG9yOiBibGFjazsKfQoKLnByaW9yaXR5Y2xhc3NfTk9XIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JlZW47Cn0KLnByaW9yaXR5Y2xhc3NfTEFURVIgewogICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93Owp9Ci5wcmlvcml0eWNsYXNzX1RJTUVEIHsKICAgIGJhY2tncm91bmQtY29sb3I6IG9yYW5nZTsKfQoucHJpb3JpdHljbGFzc19ET05FIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsKfQoucHJpb3JpdHljbGFzc19TVElDS1kgewogICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRibHVlOwp9Ci5wcmlvcml0eWNsYXNzX05PVEVTIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTsKfQoKLnNjcmVycm9yIHsKICAgIGNvbG9yOiByZWQ7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQo=",
	"listcommon.css": "LmFkdm1lbnUgewogIGZsb2F0OiByaWdodDsKICBmb250LXNpemU6IHgtc21hbGw7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KCi5tYWlubWVudSB7CiAgZm9udC1zaXplOiBzbWFsbDsKICBkaXNwbGF5OiBpbmxpbmU7Cn0KCi5tYWlubWVudV9pdGVtIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgcGFkZGluZy1sZWZ0OiAxMHB4OwogIGRpc3BsYXk6IGlubGluZTsKfQoKLnBvcHVwIHsKICBwYWRkaW5nOiA4cHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMjBweDsKICB6LWluZGV4OiA5MDAwOwogIGRpc3BsYXk6IG5vbmU7Cn0KCi5wb3BidXR0b25zIHsKICBmbG9hdDogcmlnaHQ7Cn0KCi5rZXlpbmZvIHsKICBmb250LXNpemU6IHgtc21hbGw7Cn0KCi5uYXZsaXN0IHsKICBsaXN0LXN0eWxlLWltYWdlOiBub25lOwogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7CiAgcGFkZGluZy1sZWZ0OiAwcHg7Cn0KCi5tYWludGFibGUgewogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgd2lkdGg6IDEwMCU7Cn0KCi5lZGl0b3Igewp9CgoKLmVkaXRvciBpbnB1dFtuYW1lPSJlZHRpdGxlIl0gewogIHdpZHRoOiA5OSU7CiAgbWFyZ2luLWJvdHRvbTogNXB4OwogIG1hcmdpbi10b3A6IDVweDsKfQoKLmVkaXRvciB0ZXh0YXJlYVtuYW1lPSJlZHRleHQiXSB7CiAgd2lkdGg6IDY1JTsKICBtYXJnaW4tcmlnaHQ6IDElOwogIGRpc3BsYXk6IGlubGluZTsKfQoKLmVkaXRvciB0ZXh0YXJlYVtuYW1lPSJlZGNvbHMiXSB7CiAgd2lkdGg6IDMyJTsKICBkaXNwbGF5OiBpbmxpbmU7Cn0KCi5zY3JlcnJvciB7CiAgcGFkZGluZzogMTVweDsKfQoK",
	"loading.gif": "R0lGODlhEAAQAPIAAP///xos9sjM/FVi+Bos9nF9+Y6X+p2k+iH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAEAAQAAADMwi63P4wyklrE2MIOggZnAdOmGYJRbExwroUmcG2LmDEwnHQLVsYOd2mBzkYDAdKa+dIAAAh+QQJCgAAACwAAAAAEAAQAAADNAi63P5OjCEgG4QMu7DmikRxQlFUYDEZIGBMRVsaqHwctXXf7WEYB4Ag1xjihkMZsiUkKhIAIfkECQoAAAAsAAAAABAAEAAAAzYIujIjK8pByJDMlFYvBoVjHA70GU7xSUJhmKtwHPAKzLO9HMaoKwJZ7Rf8AYPDDzKpZBqfvwQAIfkECQoAAAAsAAAAABAAEAAAAzMIumIlK8oyhpHsnFZfhYumCYUhDAQxRIdhHBGqRoKw0R8DYlJd8z0fMDgsGo/IpHI5TAAAIfkECQoAAAAsAAAAABAAEAAAAzIIunInK0rnZBTwGPNMgQwmdsNgXGJUlIWEuR5oWUIpz8pAEAMe6TwfwyYsGo/IpFKSAAAh+QQJCgAAACwAAAAAEAAQAAADMwi6IMKQORfjdOe82p4wGccc4CEuQradylesojEMBgsUc2G7sDX3lQGBMLAJibufbSlKAAAh+QQJCgAAACwAAAAAEAAQAAADMgi63P7wCRHZnFVdmgHu2nFwlWCI3WGc3TSWhUFGxTAUkGCbtgENBMJAEJsxgMLWzpEAACH5BAkKAAAALAAAAAAQABAAAAMyCLrc/jDKSatlQtScKdceCAjDII7HcQ4EMTCpyrCuUBjCYRgHVtqlAiB1YhiCnlsRkAAAOwAAAAAAAAAAAA==",
	"static-test.html": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPlRoaXMgaXMgYSB0ZXN0IGZvciBzZXJ2ZTwvdGl0bGU+CiAgPC9oZWFkPgogIDxib2R5PgogICAgVGhpcyBpcyBhIHRlc3QgZm9yIHNlcnZlCiAgPC9ib2R5Pgo8L2h0bWw+Cg==",
	"tlist.css": "LyoKICAgZm9yZWdyb3VuZDogc2lsdmVyCiAgIGJhY2tncm91bmQgbGlnaHQgMTogIzE2M0E1OQogICBiYWNrZ3JvdW5kIGxpZ2h0IDI6ICMwRjMwNEQKCiAgIGZvcmVncm91bmQgZGFyayAxOiAjNjdBQkU1CiAgIGZvcmVncm91bmQgZGFyayAyOiAjNEM4OUJFCiovCgoKLyoKIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgR1BMdjMKIENvcHlyaWdodCAyMDEwLCBBbGVzc2FuZHJvIEFyemlsbGkKICovCgoqIHsKICAgIGZvbnQtZmFtaWx5OiB1YnVudHUsIHNhbnMtc2VyaWY7Cn0KCmEgewogICAgY29sb3I6ICM0Qzg5QkU7Cn0KCmJvZHkgewogICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7CiAgICBjb2xvcjogc2lsdmVyOwogICAgZm9udC1zaXplOiAxMHB0Owp9CgoucG9wdXAgewogICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7CiAgICBib3JkZXI6IHRoaW4gc29saWQgd2hpdGU7Cn0KCnRhYmxlIHsKICAgIGZvbnQtc2l6ZTogMTBwdDsKfQoKLmNvbG5hbWUgewogICAgZm9udC1zaXplOiBub3JtYWw7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIHBhZGRpbmctdG9wOiAxMHB4Owp9CgoucHJjaGFuZ2UgewogICAgcGFkZGluZy10b3A6IDEwcHg7CiAgICBmb250LXNpemU6IGxhcmdlOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5lbnRyeSB7CiAgICBiYWNrZ3JvdW5kOiBub25lIHJlcGVhdCBzY3JvbGwgMCAwICMxNjNBNTk7CiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKfQoKLm9kZGVudHJ5IHsKICAgIGJhY2tncm91bmQtY29sb3I6ICMwRjMwNEQ7CiAgICBib3JkZXItY29sb3I6IGJsYWNrOwp9CgouZW50cnkgPiB0ZCB7CiAgICBwYWRkaW5nOiA0cHg7Cn0KCi5ldGl0bGUgewogICAgd2lkdGg6IDY1JTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouZXRpdGxlID4gYSB7CiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICBjb2xvcjogc2lsdmVyOwp9CgoucHJpb3JpdHlidXR0b24gewogICAgZm9udC13ZWlnaHQ6IGJvbGRlcjsKICAgIGZvbnQtc2l6ZTogeHgtc21hbGw7CiAgICB3aWR0aDogNjBweDsgCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsKfQoKLnByaW9yaXR5Y2xhc3NfTk9XIHsKICAgIGNvbG9yOiAjMEZENDAwOwp9Ci5wcmlvcml0eWNsYXNzX0xBVEVSIHsKICAgIGNvbG9yOiB5ZWxsb3c7Cn0KLnByaW9yaXR5Y2xhc3NfVElNRUQgewogICAgY29sb3I6IG9yYW5nZTsKfQoucHJpb3JpdHljbGFzc19ET05FIHsKICAgIGNvbG9yOiBsaWdodGJsdWU7Cn0KLnByaW9yaXR5Y2xhc3NfU1RJQ0tZIHsKICAgIGNvbG9yOiBsaWdodGJsdWU7Cn0KLnByaW9yaXR5Y2xhc3NfTk9URVMgewogICAgY29sb3I6IGxpZ2h0Ymx1ZTsKfQoKLnNjcmVycm9yIHsKICAgIGNvbG9yOiByZWQ7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoKLmNvZGUgewogICAgZm9udC1mYW1pbHk6IG9jcmExMCwgbW9ub3NwYWNlOwogICAgLW1vei1mb250LWZlYXR1cmUtc2V0dGluZ3M6ICJsaWdhPTAiOwp9Cgouc3RhdHN0YWJsZSB7CiAgICBtYXJnaW4tdG9wOiA0MHB4Owp9",
}

var SUMS map[string]string = map[string]string{
	"static-test.html": "a330454d4971fbf845449c94e79ccd2b",
	"json.js": "6e0f67dbbfc82ae0d7fe8500f501e426",
	"dlist.css": "e436d33207624ab54ead4597106935ef",
	"listcommon.css": "3b3c99eeabd58de3fdcc0f36f8a7c1af",
	"fullcalendar.js": "f045c36078c001ec90263d4b451cd4a6",
	"cal.css": "53b663269d3aae83e596517d9d8e16f0",
	"tlist.css": "4df38a3831ddd948cf0c353c929721bb",
	"advanced.html": "553cb724bfaea5297a58f2169e718910",
	"calendar.css": "2d71f637876918339d72c00b9d3e938c",
	"fullcalendar.css": "7848b967f5ce995416bcbb2352e0f8df",
	"jquery-ui-custom.js": "fcd09953f3ac46e9070a0703d29e4150",
	"cint.js": "251e4c45126c5244d860c8fecaead85c",
	"jquery.js": "73a9c334c5ca71d70d092b42064f6476",
	"int.js": "ffe1db70cc5e23d1c1fc6a5dc546dfb0",
	"list.css": "af9967ee55f543553627280b454eb515",
	"loading.gif": "114b90725e0e3a0b9bb1aeafef309eaf",
	"calendar.js": "dbceb8b1123c38cd14d76743f20b9d96",
}

