package main

var FILES map[string]string = map[string]string{
	"static-test.html": "PGh0bWw+CiAgPGhlYWQ+CiAgICA8dGl0bGU+VGhpcyBpcyBhIHRlc3QgZm9yIHNlcnZlPC90aXRsZT4KICA8L2hlYWQ+CiAgPGJvZHk+CiAgICBUaGlzIGlzIGEgdGVzdCBmb3Igc2VydmUKICA8L2JvZHk+CjwvaHRtbD4K",
	"list.css": "KiB7CiAgICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKfQoKdGFibGUgewogICAgZm9udC1zaXplOiAxMHB0Owp9CgoucHJjaGFuZ2UgPiB0ZCB7CiAgICBwYWRkaW5nLXRvcDogMTBweDsKICAgIGZvbnQtc2l6ZTogbGFyZ2U7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoKLmVudHJ5IHsKICAgIGJhY2tncm91bmQ6IG5vbmUgcmVwZWF0IHNjcm9sbCAwIDAgI0YzRjVGQzsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNDQ0NDQ0M7Cn0KCi5lbnRyeSA+IHRkIHsKICAgIHBhZGRpbmc6IDRweDsKfQoKLmVpZCB7CiAgICB3aWR0aDogMTUlOwogICAgZm9udC1zaXplOiBzbWFsbDsKfQouZXRpdGxlIHsKICAgIHdpZHRoOiA1MCU7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQouZXByIHsKICAgIHdpZHRoOiAxMCU7Cn0KLmV0aW1lIHsKICAgIHdpZHRoOiAyNSU7Cn0KCi5wcmlvcml0eWNsYXNzX25vdyB7CiAgICB3aWR0aDogNjBweDsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JlZW47Cn0KLnByaW9yaXR5Y2xhc3NfbGF0ZXIgewogICAgd2lkdGg6IDYwcHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7Cn0KLnByaW9yaXR5Y2xhc3NfdGltZWQgewogICAgd2lkdGg6IDYwcHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7Cn0KLnByaW9yaXR5Y2xhc3NfZG9uZSB7CiAgICB3aWR0aDogNjBweDsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsKfQoucHJpb3JpdHljbGFzc19zdGlja3kgewogICAgd2lkdGg6IDYwcHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7Cn0KLnByaW9yaXR5Y2xhc3Nfbm90ZXMgewogICAgd2lkdGg6IDYwcHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7Cn0K",
	"dlist.css": "KiB7CiAgICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKfQoKYSB7CiAgICBjb2xvcjogY3lhbjsKfQoKYm9keSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMkQyODI4OwogICAgY29sb3I6ICNFQUU4RTk7CiAgICBmb250LXNpemU6IDhwdDsKfQoKdGFibGUgewogICAgZm9udC1zaXplOiA4cHQ7Cn0KCi5wcmNoYW5nZSA+IHRkIHsKICAgIHBhZGRpbmctdG9wOiAxMHB4OwogICAgZm9udC1zaXplOiBsYXJnZTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouZW50cnkgewogICAgYmFja2dyb3VuZDogbm9uZSByZXBlYXQgc2Nyb2xsIDAgMCAjNTU1NTU1OwogICAgYm9yZGVyOiAxcHggc29saWQgIzQ0NDQ0NDsKfQoKLmVudHJ5ID4gdGQgewogICAgcGFkZGluZzogNHB4Owp9CgouZWlkIHsKICAgIHdpZHRoOiAxNSU7CiAgICBmb250LXNpemU6IHNtYWxsOwp9Ci5ldGl0bGUgewogICAgd2lkdGg6IDUwJTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9Ci5lcHIgewogICAgd2lkdGg6IDEwJTsKfQouZXRpbWUgewogICAgd2lkdGg6IDI1JTsKfQoKLnByaW9yaXR5Y2xhc3Nfbm93IHsKICAgIHdpZHRoOiA2MHB4OwogICAgY29sb3I6IGJsYWNrOwogICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47Cn0KLnByaW9yaXR5Y2xhc3NfbGF0ZXIgewogICAgd2lkdGg6IDYwcHg7CiAgICBjb2xvcjogYmxhY2s7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7Cn0KLnByaW9yaXR5Y2xhc3NfdGltZWQgewogICAgd2lkdGg6IDYwcHg7CiAgICBjb2xvcjogYmxhY2s7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7Cn0KLnByaW9yaXR5Y2xhc3NfZG9uZSB7CiAgICB3aWR0aDogNjBweDsKICAgIGNvbG9yOiBibGFjazsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsKfQoucHJpb3JpdHljbGFzc19zdGlja3kgewogICAgd2lkdGg6IDYwcHg7CiAgICBjb2xvcjogYmxhY2s7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7Cn0KLnByaW9yaXR5Y2xhc3Nfbm90ZXMgewogICAgd2lkdGg6IDYwcHg7CiAgICBjb2xvcjogYmxhY2s7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7Cn0K",
	"int.js": "",
	"shortcut.js": "LyoqCiAqIGh0dHA6Ly93d3cub3BlbmpzLmNvbS9zY3JpcHRzL2V2ZW50cy9rZXlib2FyZF9zaG9ydGN1dHMvCiAqIFZlcnNpb24gOiAyLjAxLkIKICogQnkgQmlubnkgViBBCiAqIExpY2Vuc2UgOiBCU0QKICovCnNob3J0Y3V0ID0gewoJJ2FsbF9zaG9ydGN1dHMnOnt9LC8vQWxsIHRoZSBzaG9ydGN1dHMgYXJlIHN0b3JlZCBpbiB0aGlzIGFycmF5CgknYWRkJzogZnVuY3Rpb24oc2hvcnRjdXRfY29tYmluYXRpb24sY2FsbGJhY2ssb3B0KSB7CgkJLy9Qcm92aWRlIGEgc2V0IG9mIGRlZmF1bHQgb3B0aW9ucwoJCXZhciBkZWZhdWx0X29wdGlvbnMgPSB7CgkJCSd0eXBlJzona2V5ZG93bicsCgkJCSdwcm9wYWdhdGUnOmZhbHNlLAoJCQknZGlzYWJsZV9pbl9pbnB1dCc6ZmFsc2UsCgkJCSd0YXJnZXQnOmRvY3VtZW50LAoJCQkna2V5Y29kZSc6ZmFsc2UKCQl9CgkJaWYoIW9wdCkgb3B0ID0gZGVmYXVsdF9vcHRpb25zOwoJCWVsc2UgewoJCQlmb3IodmFyIGRmbyBpbiBkZWZhdWx0X29wdGlvbnMpIHsKCQkJCWlmKHR5cGVvZiBvcHRbZGZvXSA9PSAndW5kZWZpbmVkJykgb3B0W2Rmb10gPSBkZWZhdWx0X29wdGlvbnNbZGZvXTsKCQkJfQoJCX0KCgkJdmFyIGVsZSA9IG9wdC50YXJnZXQ7CgkJaWYodHlwZW9mIG9wdC50YXJnZXQgPT0gJ3N0cmluZycpIGVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9wdC50YXJnZXQpOwoJCXZhciB0aHMgPSB0aGlzOwoJCXNob3J0Y3V0X2NvbWJpbmF0aW9uID0gc2hvcnRjdXRfY29tYmluYXRpb24udG9Mb3dlckNhc2UoKTsKCgkJLy9UaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGF0IGtleXByZXNzCgkJdmFyIGZ1bmMgPSBmdW5jdGlvbihlKSB7CgkJCWUgPSBlIHx8IHdpbmRvdy5ldmVudDsKCQkJCgkJCWlmKG9wdFsnZGlzYWJsZV9pbl9pbnB1dCddKSB7IC8vRG9uJ3QgZW5hYmxlIHNob3J0Y3V0IGtleXMgaW4gSW5wdXQsIFRleHRhcmVhIGZpZWxkcwoJCQkJdmFyIGVsZW1lbnQ7CgkJCQlpZihlLnRhcmdldCkgZWxlbWVudD1lLnRhcmdldDsKCQkJCWVsc2UgaWYoZS5zcmNFbGVtZW50KSBlbGVtZW50PWUuc3JjRWxlbWVudDsKCQkJCWlmKGVsZW1lbnQubm9kZVR5cGU9PTMpIGVsZW1lbnQ9ZWxlbWVudC5wYXJlbnROb2RlOwoKCQkJCWlmKGVsZW1lbnQudGFnTmFtZSA9PSAnSU5QVVQnIHx8IGVsZW1lbnQudGFnTmFtZSA9PSAnVEVYVEFSRUEnKSByZXR1cm47CgkJCX0KCQoJCQkvL0ZpbmQgV2hpY2gga2V5IGlzIHByZXNzZWQKCQkJaWYgKGUua2V5Q29kZSkgY29kZSA9IGUua2V5Q29kZTsKCQkJZWxzZSBpZiAoZS53aGljaCkgY29kZSA9IGUud2hpY2g7CgkJCXZhciBjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpLnRvTG93ZXJDYXNlKCk7CgkJCQoJCQlpZihjb2RlID09IDE4OCkgY2hhcmFjdGVyPSIsIjsgLy9JZiB0aGUgdXNlciBwcmVzc2VzICwgd2hlbiB0aGUgdHlwZSBpcyBvbmtleWRvd24KCQkJaWYoY29kZSA9PSAxOTApIGNoYXJhY3Rlcj0iLiI7IC8vSWYgdGhlIHVzZXIgcHJlc3NlcyAsIHdoZW4gdGhlIHR5cGUgaXMgb25rZXlkb3duCgoJCQl2YXIga2V5cyA9IHNob3J0Y3V0X2NvbWJpbmF0aW9uLnNwbGl0KCIrIik7CgkJCS8vS2V5IFByZXNzZWQgLSBjb3VudHMgdGhlIG51bWJlciBvZiB2YWxpZCBrZXlwcmVzc2VzIC0gaWYgaXQgaXMgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIGtleXMsIHRoZSBzaG9ydGN1dCBmdW5jdGlvbiBpcyBpbnZva2VkCgkJCXZhciBrcCA9IDA7CgkJCQoJCQkvL1dvcmsgYXJvdW5kIGZvciBzdHVwaWQgU2hpZnQga2V5IGJ1ZyBjcmVhdGVkIGJ5IHVzaW5nIGxvd2VyY2FzZSAtIGFzIGEgcmVzdWx0IHRoZSBzaGlmdCtudW0gY29tYmluYXRpb24gd2FzIGJyb2tlbgoJCQl2YXIgc2hpZnRfbnVtcyA9IHsKCQkJCSJgIjoifiIsCgkJCQkiMSI6IiEiLAoJCQkJIjIiOiJAIiwKCQkJCSIzIjoiIyIsCgkJCQkiNCI6IiQiLAoJCQkJIjUiOiIlIiwKCQkJCSI2IjoiXiIsCgkJCQkiNyI6IiYiLAoJCQkJIjgiOiIqIiwKCQkJCSI5IjoiKCIsCgkJCQkiMCI6IikiLAoJCQkJIi0iOiJfIiwKCQkJCSI9IjoiKyIsCgkJCQkiOyI6IjoiLAoJCQkJIiciOiJcIiIsCgkJCQkiLCI6IjwiLAoJCQkJIi4iOiI+IiwKCQkJCSIvIjoiPyIsCgkJCQkiXFwiOiJ8IgoJCQl9CgkJCS8vU3BlY2lhbCBLZXlzIC0gYW5kIHRoZWlyIGNvZGVzCgkJCXZhciBzcGVjaWFsX2tleXMgPSB7CgkJCQknZXNjJzoyNywKCQkJCSdlc2NhcGUnOjI3LAoJCQkJJ3RhYic6OSwKCQkJCSdzcGFjZSc6MzIsCgkJCQkncmV0dXJuJzoxMywKCQkJCSdlbnRlcic6MTMsCgkJCQknYmFja3NwYWNlJzo4LAoJCgkJCQknc2Nyb2xsbG9jayc6MTQ1LAoJCQkJJ3Njcm9sbF9sb2NrJzoxNDUsCgkJCQknc2Nyb2xsJzoxNDUsCgkJCQknY2Fwc2xvY2snOjIwLAoJCQkJJ2NhcHNfbG9jayc6MjAsCgkJCQknY2Fwcyc6MjAsCgkJCQknbnVtbG9jayc6MTQ0LAoJCQkJJ251bV9sb2NrJzoxNDQsCgkJCQknbnVtJzoxNDQsCgkJCQkKCQkJCSdwYXVzZSc6MTksCgkJCQknYnJlYWsnOjE5LAoJCQkJCgkJCQknaW5zZXJ0Jzo0NSwKCQkJCSdob21lJzozNiwKCQkJCSdkZWxldGUnOjQ2LAoJCQkJJ2VuZCc6MzUsCgkJCQkKCQkJCSdwYWdldXAnOjMzLAoJCQkJJ3BhZ2VfdXAnOjMzLAoJCQkJJ3B1JzozMywKCQoJCQkJJ3BhZ2Vkb3duJzozNCwKCQkJCSdwYWdlX2Rvd24nOjM0LAoJCQkJJ3BkJzozNCwKCQoJCQkJJ2xlZnQnOjM3LAoJCQkJJ3VwJzozOCwKCQkJCSdyaWdodCc6MzksCgkJCQknZG93bic6NDAsCgkKCQkJCSdmMSc6MTEyLAoJCQkJJ2YyJzoxMTMsCgkJCQknZjMnOjExNCwKCQkJCSdmNCc6MTE1LAoJCQkJJ2Y1JzoxMTYsCgkJCQknZjYnOjExNywKCQkJCSdmNyc6MTE4LAoJCQkJJ2Y4JzoxMTksCgkJCQknZjknOjEyMCwKCQkJCSdmMTAnOjEyMSwKCQkJCSdmMTEnOjEyMiwKCQkJCSdmMTInOjEyMwoJCQl9CgkKCQkJdmFyIG1vZGlmaWVycyA9IHsgCgkJCQlzaGlmdDogeyB3YW50ZWQ6ZmFsc2UsIHByZXNzZWQ6ZmFsc2V9LAoJCQkJY3RybCA6IHsgd2FudGVkOmZhbHNlLCBwcmVzc2VkOmZhbHNlfSwKCQkJCWFsdCAgOiB7IHdhbnRlZDpmYWxzZSwgcHJlc3NlZDpmYWxzZX0sCgkJCQltZXRhIDogeyB3YW50ZWQ6ZmFsc2UsIHByZXNzZWQ6ZmFsc2V9CS8vTWV0YSBpcyBNYWMgc3BlY2lmaWMKCQkJfTsKICAgICAgICAgICAgICAgICAgICAgICAgCgkJCWlmKGUuY3RybEtleSkJbW9kaWZpZXJzLmN0cmwucHJlc3NlZCA9IHRydWU7CgkJCWlmKGUuc2hpZnRLZXkpCW1vZGlmaWVycy5zaGlmdC5wcmVzc2VkID0gdHJ1ZTsKCQkJaWYoZS5hbHRLZXkpCW1vZGlmaWVycy5hbHQucHJlc3NlZCA9IHRydWU7CgkJCWlmKGUubWV0YUtleSkgICBtb2RpZmllcnMubWV0YS5wcmVzc2VkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgCgkJCWZvcih2YXIgaT0wOyBrPWtleXNbaV0saTxrZXlzLmxlbmd0aDsgaSsrKSB7CgkJCQkvL01vZGlmaWVycwoJCQkJaWYoayA9PSAnY3RybCcgfHwgayA9PSAnY29udHJvbCcpIHsKCQkJCQlrcCsrOwoJCQkJCW1vZGlmaWVycy5jdHJsLndhbnRlZCA9IHRydWU7CgoJCQkJfSBlbHNlIGlmKGsgPT0gJ3NoaWZ0JykgewoJCQkJCWtwKys7CgkJCQkJbW9kaWZpZXJzLnNoaWZ0LndhbnRlZCA9IHRydWU7CgoJCQkJfSBlbHNlIGlmKGsgPT0gJ2FsdCcpIHsKCQkJCQlrcCsrOwoJCQkJCW1vZGlmaWVycy5hbHQud2FudGVkID0gdHJ1ZTsKCQkJCX0gZWxzZSBpZihrID09ICdtZXRhJykgewoJCQkJCWtwKys7CgkJCQkJbW9kaWZpZXJzLm1ldGEud2FudGVkID0gdHJ1ZTsKCQkJCX0gZWxzZSBpZihrLmxlbmd0aCA+IDEpIHsgLy9JZiBpdCBpcyBhIHNwZWNpYWwga2V5CgkJCQkJaWYoc3BlY2lhbF9rZXlzW2tdID09IGNvZGUpIGtwKys7CgkJCQkJCgkJCQl9IGVsc2UgaWYob3B0WydrZXljb2RlJ10pIHsKCQkJCQlpZihvcHRbJ2tleWNvZGUnXSA9PSBjb2RlKSBrcCsrOwoKCQkJCX0gZWxzZSB7IC8vVGhlIHNwZWNpYWwga2V5cyBkaWQgbm90IG1hdGNoCgkJCQkJaWYoY2hhcmFjdGVyID09IGspIGtwKys7CgkJCQkJZWxzZSB7CgkJCQkJCWlmKHNoaWZ0X251bXNbY2hhcmFjdGVyXSAmJiBlLnNoaWZ0S2V5KSB7IC8vU3R1cGlkIFNoaWZ0IGtleSBidWcgY3JlYXRlZCBieSB1c2luZyBsb3dlcmNhc2UKCQkJCQkJCWNoYXJhY3RlciA9IHNoaWZ0X251bXNbY2hhcmFjdGVyXTsgCgkJCQkJCQlpZihjaGFyYWN0ZXIgPT0gaykga3ArKzsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCQkKCQkJaWYoa3AgPT0ga2V5cy5sZW5ndGggJiYgCgkJCQkJCW1vZGlmaWVycy5jdHJsLnByZXNzZWQgPT0gbW9kaWZpZXJzLmN0cmwud2FudGVkICYmCgkJCQkJCW1vZGlmaWVycy5zaGlmdC5wcmVzc2VkID09IG1vZGlmaWVycy5zaGlmdC53YW50ZWQgJiYKCQkJCQkJbW9kaWZpZXJzLmFsdC5wcmVzc2VkID09IG1vZGlmaWVycy5hbHQud2FudGVkICYmCgkJCQkJCW1vZGlmaWVycy5tZXRhLnByZXNzZWQgPT0gbW9kaWZpZXJzLm1ldGEud2FudGVkKSB7CgkJCQljYWxsYmFjayhlKTsKCQoJCQkJaWYoIW9wdFsncHJvcGFnYXRlJ10pIHsgLy9TdG9wIHRoZSBldmVudAoJCQkJCS8vZS5jYW5jZWxCdWJibGUgaXMgc3VwcG9ydGVkIGJ5IElFIC0gdGhpcyB3aWxsIGtpbGwgdGhlIGJ1YmJsaW5nIHByb2Nlc3MuCgkJCQkJZS5jYW5jZWxCdWJibGUgPSB0cnVlOwoJCQkJCWUucmV0dXJuVmFsdWUgPSBmYWxzZTsKCQoJCQkJCS8vZS5zdG9wUHJvcGFnYXRpb24gd29ya3MgaW4gRmlyZWZveC4KCQkJCQlpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHsKCQkJCQkJZS5zdG9wUHJvcGFnYXRpb24oKTsKCQkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCX0KCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0KCQl9CgkJdGhpcy5hbGxfc2hvcnRjdXRzW3Nob3J0Y3V0X2NvbWJpbmF0aW9uXSA9IHsKCQkJJ2NhbGxiYWNrJzpmdW5jLCAKCQkJJ3RhcmdldCc6ZWxlLCAKCQkJJ2V2ZW50Jzogb3B0Wyd0eXBlJ10KCQl9OwoJCS8vQXR0YWNoIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBldmVudAoJCWlmKGVsZS5hZGRFdmVudExpc3RlbmVyKSBlbGUuYWRkRXZlbnRMaXN0ZW5lcihvcHRbJ3R5cGUnXSwgZnVuYywgZmFsc2UpOwoJCWVsc2UgaWYoZWxlLmF0dGFjaEV2ZW50KSBlbGUuYXR0YWNoRXZlbnQoJ29uJytvcHRbJ3R5cGUnXSwgZnVuYyk7CgkJZWxzZSBlbGVbJ29uJytvcHRbJ3R5cGUnXV0gPSBmdW5jOwoJfSwKCgkvL1JlbW92ZSB0aGUgc2hvcnRjdXQgLSBqdXN0IHNwZWNpZnkgdGhlIHNob3J0Y3V0IGFuZCBJIHdpbGwgcmVtb3ZlIHRoZSBiaW5kaW5nCgkncmVtb3ZlJzpmdW5jdGlvbihzaG9ydGN1dF9jb21iaW5hdGlvbikgewoJCXNob3J0Y3V0X2NvbWJpbmF0aW9uID0gc2hvcnRjdXRfY29tYmluYXRpb24udG9Mb3dlckNhc2UoKTsKCQl2YXIgYmluZGluZyA9IHRoaXMuYWxsX3Nob3J0Y3V0c1tzaG9ydGN1dF9jb21iaW5hdGlvbl07CgkJZGVsZXRlKHRoaXMuYWxsX3Nob3J0Y3V0c1tzaG9ydGN1dF9jb21iaW5hdGlvbl0pCgkJaWYoIWJpbmRpbmcpIHJldHVybjsKCQl2YXIgdHlwZSA9IGJpbmRpbmdbJ2V2ZW50J107CgkJdmFyIGVsZSA9IGJpbmRpbmdbJ3RhcmdldCddOwoJCXZhciBjYWxsYmFjayA9IGJpbmRpbmdbJ2NhbGxiYWNrJ107CgoJCWlmKGVsZS5kZXRhY2hFdmVudCkgZWxlLmRldGFjaEV2ZW50KCdvbicrdHlwZSwgY2FsbGJhY2spOwoJCWVsc2UgaWYoZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIpIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7CgkJZWxzZSBlbGVbJ29uJyt0eXBlXSA9IGZhbHNlOwoJfQp9",
	"json.js": "",
	"calendar.css": "LmNhbGVuZGFyLWJveCB7CglkaXNwbGF5Om5vbmU7CgliYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Cglib3JkZXI6MXB4IHNvbGlkICM0NDQ7Cglwb3NpdGlvbjphYnNvbHV0ZTsKCXdpZHRoOjI1MHB4OwoJcGFkZGluZzogMCA1cHg7Cn0KLmNhbGVuZGFyLWJveCBzZWxlY3QuY2FsZW5kYXItbW9udGggewoJd2lkdGg6OTBweDsKfQouY2FsZW5kYXItYm94IHNlbGVjdC5jYWxlbmRhci15ZWFyIHsKCXdpZHRoOjcwcHg7Cn0KLmNhbGVuZGFyLWJveCAuY2FsZW5kYXItY2FuY2VsIHsKCXdpZHRoOjEwMCU7Cn0KLmNhbGVuZGFyLWJveCB0YWJsZSB0ZCB7Cgl3aWR0aDoxNCU7Cn0KLmNhbGVuZGFyLWJveCAuY2FsZW5kYXItdGl0bGUgewoJdGV4dC1hbGlnbjpjZW50ZXI7Cn0KLmNhbGVuZGFyLWJveCBhIHsKCXRleHQtZGVjb3JhdGlvbjpub25lOwp9Ci5jYWxlbmRhci1ib3ggLnRvZGF5IGEgewoJcGFkZGluZzowIDVweDsKCW1hcmdpbi1sZWZ0Oi01cHg7CgliYWNrZ3JvdW5kLWNvbG9yOiNmZmU5YzY7Cn0gCi5jYWxlbmRhci1ib3ggLnNlbGVjdGVkIGEgewoJcGFkZGluZzowIDVweDsKCW1hcmdpbi1sZWZ0Oi01cHg7CgliYWNrZ3JvdW5kLWNvbG9yOiNjOWZmOGI7Cn0K",
	"calendar.js": "",
	"fullcalendar.css": "",
	"fullcalendar.js": "",
	"jquery.js": "",
	"jquery-ui-custom.js": "LyohCiAqIGpRdWVyeSBVSSAxLjguMQogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTAgQVVUSE9SUy50eHQgKGh0dHA6Ly9qcXVlcnl1aS5jb20vYWJvdXQpCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCAoTUlULUxJQ0VOU0UudHh0KQogKiBhbmQgR1BMIChHUEwtTElDRU5TRS50eHQpIGxpY2Vuc2VzLgogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJCiAqLwpqUXVlcnkudWl8fGZ1bmN0aW9uKGMpe2MudWk9e3ZlcnNpb246IjEuOC4xIixwbHVnaW46e2FkZDpmdW5jdGlvbihhLGIsZCl7YT1jLnVpW2FdLnByb3RvdHlwZTtmb3IodmFyIGUgaW4gZCl7YS5wbHVnaW5zW2VdPWEucGx1Z2luc1tlXXx8W107YS5wbHVnaW5zW2VdLnB1c2goW2IsZFtlXV0pfX0sY2FsbDpmdW5jdGlvbihhLGIsZCl7aWYoKGI9YS5wbHVnaW5zW2JdKSYmYS5lbGVtZW50WzBdLnBhcmVudE5vZGUpZm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspYS5vcHRpb25zW2JbZV1bMF1dJiZiW2VdWzFdLmFwcGx5KGEuZWxlbWVudCxkKX19LGNvbnRhaW5zOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGRvY3VtZW50LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTY6YSE9PWImJmEuY29udGFpbnMoYil9LGhhc1Njcm9sbDpmdW5jdGlvbihhLGIpe2lmKGMoYSkuY3NzKCJvdmVyZmxvdyIpPT0iaGlkZGVuIilyZXR1cm4gZmFsc2U7CmI9YiYmYj09ImxlZnQiPyJzY3JvbGxMZWZ0Ijoic2Nyb2xsVG9wIjt2YXIgZD1mYWxzZTtpZihhW2JdPjApcmV0dXJuIHRydWU7YVtiXT0xO2Q9YVtiXT4wO2FbYl09MDtyZXR1cm4gZH0saXNPdmVyQXhpczpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGE+YiYmYTxiK2R9LGlzT3ZlcjpmdW5jdGlvbihhLGIsZCxlLGYsZyl7cmV0dXJuIGMudWkuaXNPdmVyQXhpcyhhLGQsZikmJmMudWkuaXNPdmVyQXhpcyhiLGUsZyl9LGtleUNvZGU6e0FMVDoxOCxCQUNLU1BBQ0U6OCxDQVBTX0xPQ0s6MjAsQ09NTUE6MTg4LENPTlRST0w6MTcsREVMRVRFOjQ2LERPV046NDAsRU5EOjM1LEVOVEVSOjEzLEVTQ0FQRToyNyxIT01FOjM2LElOU0VSVDo0NSxMRUZUOjM3LE5VTVBBRF9BREQ6MTA3LE5VTVBBRF9ERUNJTUFMOjExMCxOVU1QQURfRElWSURFOjExMSxOVU1QQURfRU5URVI6MTA4LE5VTVBBRF9NVUxUSVBMWToxMDYsTlVNUEFEX1NVQlRSQUNUOjEwOSxQQUdFX0RPV046MzQsUEFHRV9VUDozMywKUEVSSU9EOjE5MCxSSUdIVDozOSxTSElGVDoxNixTUEFDRTozMixUQUI6OSxVUDozOH19O2MuZm4uZXh0ZW5kKHtfZm9jdXM6Yy5mbi5mb2N1cyxmb2N1czpmdW5jdGlvbihhLGIpe3JldHVybiB0eXBlb2YgYT09PSJudW1iZXIiP3RoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe2MoZCkuZm9jdXMoKTtiJiZiLmNhbGwoZCl9LGEpfSk6dGhpcy5fZm9jdXMuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hdHRyKCJ1bnNlbGVjdGFibGUiLCJvZmYiKS5jc3MoIk1velVzZXJTZWxlY3QiLCIiKX0sZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoInVuc2VsZWN0YWJsZSIsIm9uIikuY3NzKCJNb3pVc2VyU2VsZWN0Iiwibm9uZSIpfSxzY3JvbGxQYXJlbnQ6ZnVuY3Rpb24oKXt2YXIgYTthPWMuYnJvd3Nlci5tc2llJiYvKHN0YXRpY3xyZWxhdGl2ZSkvLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpfHwKL2Fic29sdXRlLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKT90aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4vKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8udGVzdChjLmN1ckNTUyh0aGlzLCJwb3NpdGlvbiIsMSkpJiYvKGF1dG98c2Nyb2xsKS8udGVzdChjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdyIsMSkrYy5jdXJDU1ModGhpcywib3ZlcmZsb3cteSIsMSkrYy5jdXJDU1ModGhpcywib3ZlcmZsb3cteCIsMSkpfSkuZXEoMCk6dGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuLyhhdXRvfHNjcm9sbCkvLnRlc3QoYy5jdXJDU1ModGhpcywib3ZlcmZsb3ciLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXkiLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXgiLDEpKX0pLmVxKDApO3JldHVybi9maXhlZC8udGVzdCh0aGlzLmNzcygicG9zaXRpb24iKSl8fCFhLmxlbmd0aD9jKGRvY3VtZW50KTphfSx6SW5kZXg6ZnVuY3Rpb24oYSl7aWYoYSE9PQp1bmRlZmluZWQpcmV0dXJuIHRoaXMuY3NzKCJ6SW5kZXgiLGEpO2lmKHRoaXMubGVuZ3RoKXthPWModGhpc1swXSk7Zm9yKHZhciBiO2EubGVuZ3RoJiZhWzBdIT09ZG9jdW1lbnQ7KXtiPWEuY3NzKCJwb3NpdGlvbiIpO2lmKGI9PSJhYnNvbHV0ZSJ8fGI9PSJyZWxhdGl2ZSJ8fGI9PSJmaXhlZCIpe2I9cGFyc2VJbnQoYS5jc3MoInpJbmRleCIpKTtpZighaXNOYU4oYikmJmIhPTApcmV0dXJuIGJ9YT1hLnBhcmVudCgpfX1yZXR1cm4gMH19KTtjLmV4dGVuZChjLmV4cHJbIjoiXSx7ZGF0YTpmdW5jdGlvbihhLGIsZCl7cmV0dXJuISFjLmRhdGEoYSxkWzNdKX0sZm9jdXNhYmxlOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxkPWMuYXR0cihhLCJ0YWJpbmRleCIpO3JldHVybigvaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QvLnRlc3QoYik/IWEuZGlzYWJsZWQ6ImEiPT1ifHwiYXJlYSI9PWI/YS5ocmVmfHwhaXNOYU4oZCk6IWlzTmFOKGQpKSYmCiFjKGEpWyJhcmVhIj09Yj8icGFyZW50cyI6ImNsb3Nlc3QiXSgiOmhpZGRlbiIpLmxlbmd0aH0sdGFiYmFibGU6ZnVuY3Rpb24oYSl7dmFyIGI9Yy5hdHRyKGEsInRhYmluZGV4Iik7cmV0dXJuKGlzTmFOKGIpfHxiPj0wKSYmYyhhKS5pcygiOmZvY3VzYWJsZSIpfX0pfShqUXVlcnkpOwo7LyohCiAqIGpRdWVyeSBVSSBXaWRnZXQgMS44LjEKICoKICogQ29weXJpZ2h0IChjKSAyMDEwIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgKE1JVC1MSUNFTlNFLnR4dCkKICogYW5kIEdQTCAoR1BMLUxJQ0VOU0UudHh0KSBsaWNlbnNlcy4KICoKICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VSS9XaWRnZXQKICovCihmdW5jdGlvbihiKXt2YXIgaj1iLmZuLnJlbW92ZTtiLmZuLnJlbW92ZT1mdW5jdGlvbihhLGMpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtpZighYylpZighYXx8Yi5maWx0ZXIoYSxbdGhpc10pLmxlbmd0aCliKCIqIix0aGlzKS5hZGQodGhpcykuZWFjaChmdW5jdGlvbigpe2IodGhpcykudHJpZ2dlckhhbmRsZXIoInJlbW92ZSIpfSk7cmV0dXJuIGouY2FsbChiKHRoaXMpLGEsYyl9KX07Yi53aWRnZXQ9ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPWEuc3BsaXQoIi4iKVswXSxmO2E9YS5zcGxpdCgiLiIpWzFdO2Y9ZSsiLSIrYTtpZighZCl7ZD1jO2M9Yi5XaWRnZXR9Yi5leHByWyI6Il1bZl09ZnVuY3Rpb24oaCl7cmV0dXJuISFiLmRhdGEoaCxhKX07YltlXT1iW2VdfHx7fTtiW2VdW2FdPWZ1bmN0aW9uKGgsZyl7YXJndW1lbnRzLmxlbmd0aCYmdGhpcy5fY3JlYXRlV2lkZ2V0KGgsZyl9O2M9bmV3IGM7Yy5vcHRpb25zPWIuZXh0ZW5kKHt9LGMub3B0aW9ucyk7YltlXVthXS5wcm90b3R5cGU9CmIuZXh0ZW5kKHRydWUsYyx7bmFtZXNwYWNlOmUsd2lkZ2V0TmFtZTphLHdpZGdldEV2ZW50UHJlZml4OmJbZV1bYV0ucHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4fHxhLHdpZGdldEJhc2VDbGFzczpmfSxkKTtiLndpZGdldC5icmlkZ2UoYSxiW2VdW2FdKX07Yi53aWRnZXQuYnJpZGdlPWZ1bmN0aW9uKGEsYyl7Yi5mblthXT1mdW5jdGlvbihkKXt2YXIgZT10eXBlb2YgZD09PSJzdHJpbmciLGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGg9dGhpcztkPSFlJiZmLmxlbmd0aD9iLmV4dGVuZC5hcHBseShudWxsLFt0cnVlLGRdLmNvbmNhdChmKSk6ZDtpZihlJiZkLnN1YnN0cmluZygwLDEpPT09Il8iKXJldHVybiBoO2U/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGc9Yi5kYXRhKHRoaXMsYSksaT1nJiZiLmlzRnVuY3Rpb24oZ1tkXSk/Z1tkXS5hcHBseShnLGYpOmc7aWYoaSE9PWcmJmkhPT11bmRlZmluZWQpe2g9aTtyZXR1cm4gZmFsc2V9fSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGc9CmIuZGF0YSh0aGlzLGEpO2lmKGcpe2QmJmcub3B0aW9uKGQpO2cuX2luaXQoKX1lbHNlIGIuZGF0YSh0aGlzLGEsbmV3IGMoZCx0aGlzKSl9KTtyZXR1cm4gaH19O2IuV2lkZ2V0PWZ1bmN0aW9uKGEsYyl7YXJndW1lbnRzLmxlbmd0aCYmdGhpcy5fY3JlYXRlV2lkZ2V0KGEsYyl9O2IuV2lkZ2V0LnByb3RvdHlwZT17d2lkZ2V0TmFtZToid2lkZ2V0Iix3aWRnZXRFdmVudFByZWZpeDoiIixvcHRpb25zOntkaXNhYmxlZDpmYWxzZX0sX2NyZWF0ZVdpZGdldDpmdW5jdGlvbihhLGMpe3RoaXMuZWxlbWVudD1iKGMpLmRhdGEodGhpcy53aWRnZXROYW1lLHRoaXMpO3RoaXMub3B0aW9ucz1iLmV4dGVuZCh0cnVlLHt9LHRoaXMub3B0aW9ucyxiLm1ldGFkYXRhJiZiLm1ldGFkYXRhLmdldChjKVt0aGlzLndpZGdldE5hbWVdLGEpO3ZhciBkPXRoaXM7dGhpcy5lbGVtZW50LmJpbmQoInJlbW92ZS4iK3RoaXMud2lkZ2V0TmFtZSxmdW5jdGlvbigpe2QuZGVzdHJveSgpfSk7dGhpcy5fY3JlYXRlKCk7CnRoaXMuX2luaXQoKX0sX2NyZWF0ZTpmdW5jdGlvbigpe30sX2luaXQ6ZnVuY3Rpb24oKXt9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQudW5iaW5kKCIuIit0aGlzLndpZGdldE5hbWUpLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lKTt0aGlzLndpZGdldCgpLnVuYmluZCgiLiIrdGhpcy53aWRnZXROYW1lKS5yZW1vdmVBdHRyKCJhcmlhLWRpc2FibGVkIikucmVtb3ZlQ2xhc3ModGhpcy53aWRnZXRCYXNlQ2xhc3MrIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIpfSx3aWRnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50fSxvcHRpb246ZnVuY3Rpb24oYSxjKXt2YXIgZD1hLGU9dGhpcztpZihhcmd1bWVudHMubGVuZ3RoPT09MClyZXR1cm4gYi5leHRlbmQoe30sZS5vcHRpb25zKTtpZih0eXBlb2YgYT09PSJzdHJpbmciKXtpZihjPT09dW5kZWZpbmVkKXJldHVybiB0aGlzLm9wdGlvbnNbYV07ZD17fTtkW2FdPWN9Yi5lYWNoKGQsZnVuY3Rpb24oZiwKaCl7ZS5fc2V0T3B0aW9uKGYsaCl9KTtyZXR1cm4gZX0sX3NldE9wdGlvbjpmdW5jdGlvbihhLGMpe3RoaXMub3B0aW9uc1thXT1jO2lmKGE9PT0iZGlzYWJsZWQiKXRoaXMud2lkZ2V0KClbYz8iYWRkQ2xhc3MiOiJyZW1vdmVDbGFzcyJdKHRoaXMud2lkZ2V0QmFzZUNsYXNzKyItZGlzYWJsZWQgdWktc3RhdGUtZGlzYWJsZWQiKS5hdHRyKCJhcmlhLWRpc2FibGVkIixjKTtyZXR1cm4gdGhpc30sZW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldE9wdGlvbigiZGlzYWJsZWQiLGZhbHNlKX0sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXRPcHRpb24oImRpc2FibGVkIix0cnVlKX0sX3RyaWdnZXI6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPXRoaXMub3B0aW9uc1thXTtjPWIuRXZlbnQoYyk7Yy50eXBlPShhPT09dGhpcy53aWRnZXRFdmVudFByZWZpeD9hOnRoaXMud2lkZ2V0RXZlbnRQcmVmaXgrYSkudG9Mb3dlckNhc2UoKTtkPWR8fHt9O2lmKGMub3JpZ2luYWxFdmVudCl7YT0KYi5ldmVudC5wcm9wcy5sZW5ndGg7Zm9yKHZhciBmO2E7KXtmPWIuZXZlbnQucHJvcHNbLS1hXTtjW2ZdPWMub3JpZ2luYWxFdmVudFtmXX19dGhpcy5lbGVtZW50LnRyaWdnZXIoYyxkKTtyZXR1cm4hKGIuaXNGdW5jdGlvbihlKSYmZS5jYWxsKHRoaXMuZWxlbWVudFswXSxjLGQpPT09ZmFsc2V8fGMuaXNEZWZhdWx0UHJldmVudGVkKCkpfX19KShqUXVlcnkpOwo7LyohCiAqIGpRdWVyeSBVSSBNb3VzZSAxLjguMQogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTAgQVVUSE9SUy50eHQgKGh0dHA6Ly9qcXVlcnl1aS5jb20vYWJvdXQpCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCAoTUlULUxJQ0VOU0UudHh0KQogKiBhbmQgR1BMIChHUEwtTElDRU5TRS50eHQpIGxpY2Vuc2VzLgogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJL01vdXNlCiAqCiAqIERlcGVuZHM6CiAqCWpxdWVyeS51aS53aWRnZXQuanMKICovCihmdW5jdGlvbihjKXtjLndpZGdldCgidWkubW91c2UiLHtvcHRpb25zOntjYW5jZWw6IjppbnB1dCxvcHRpb24iLGRpc3RhbmNlOjEsZGVsYXk6MH0sX21vdXNlSW5pdDpmdW5jdGlvbigpe3ZhciBhPXRoaXM7dGhpcy5lbGVtZW50LmJpbmQoIm1vdXNlZG93bi4iK3RoaXMud2lkZ2V0TmFtZSxmdW5jdGlvbihiKXtyZXR1cm4gYS5fbW91c2VEb3duKGIpfSkuYmluZCgiY2xpY2suIit0aGlzLndpZGdldE5hbWUsZnVuY3Rpb24oYil7aWYoYS5fcHJldmVudENsaWNrRXZlbnQpe2EuX3ByZXZlbnRDbGlja0V2ZW50PWZhbHNlO2Iuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7cmV0dXJuIGZhbHNlfX0pO3RoaXMuc3RhcnRlZD1mYWxzZX0sX21vdXNlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC51bmJpbmQoIi4iK3RoaXMud2lkZ2V0TmFtZSl9LF9tb3VzZURvd246ZnVuY3Rpb24oYSl7YS5vcmlnaW5hbEV2ZW50PWEub3JpZ2luYWxFdmVudHx8e307aWYoIWEub3JpZ2luYWxFdmVudC5tb3VzZUhhbmRsZWQpe3RoaXMuX21vdXNlU3RhcnRlZCYmCnRoaXMuX21vdXNlVXAoYSk7dGhpcy5fbW91c2VEb3duRXZlbnQ9YTt2YXIgYj10aGlzLGU9YS53aGljaD09MSxmPXR5cGVvZiB0aGlzLm9wdGlvbnMuY2FuY2VsPT0ic3RyaW5nIj9jKGEudGFyZ2V0KS5wYXJlbnRzKCkuYWRkKGEudGFyZ2V0KS5maWx0ZXIodGhpcy5vcHRpb25zLmNhbmNlbCkubGVuZ3RoOmZhbHNlO2lmKCFlfHxmfHwhdGhpcy5fbW91c2VDYXB0dXJlKGEpKXJldHVybiB0cnVlO3RoaXMubW91c2VEZWxheU1ldD0hdGhpcy5vcHRpb25zLmRlbGF5O2lmKCF0aGlzLm1vdXNlRGVsYXlNZXQpdGhpcy5fbW91c2VEZWxheVRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLm1vdXNlRGVsYXlNZXQ9dHJ1ZX0sdGhpcy5vcHRpb25zLmRlbGF5KTtpZih0aGlzLl9tb3VzZURpc3RhbmNlTWV0KGEpJiZ0aGlzLl9tb3VzZURlbGF5TWV0KGEpKXt0aGlzLl9tb3VzZVN0YXJ0ZWQ9dGhpcy5fbW91c2VTdGFydChhKSE9PWZhbHNlO2lmKCF0aGlzLl9tb3VzZVN0YXJ0ZWQpe2EucHJldmVudERlZmF1bHQoKTsKcmV0dXJuIHRydWV9fXRoaXMuX21vdXNlTW92ZURlbGVnYXRlPWZ1bmN0aW9uKGQpe3JldHVybiBiLl9tb3VzZU1vdmUoZCl9O3RoaXMuX21vdXNlVXBEZWxlZ2F0ZT1mdW5jdGlvbihkKXtyZXR1cm4gYi5fbW91c2VVcChkKX07Yyhkb2N1bWVudCkuYmluZCgibW91c2Vtb3ZlLiIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS5iaW5kKCJtb3VzZXVwLiIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSk7Yy5icm93c2VyLnNhZmFyaXx8YS5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBhLm9yaWdpbmFsRXZlbnQubW91c2VIYW5kbGVkPXRydWV9fSxfbW91c2VNb3ZlOmZ1bmN0aW9uKGEpe2lmKGMuYnJvd3Nlci5tc2llJiYhYS5idXR0b24pcmV0dXJuIHRoaXMuX21vdXNlVXAoYSk7aWYodGhpcy5fbW91c2VTdGFydGVkKXt0aGlzLl9tb3VzZURyYWcoYSk7cmV0dXJuIGEucHJldmVudERlZmF1bHQoKX1pZih0aGlzLl9tb3VzZURpc3RhbmNlTWV0KGEpJiYKdGhpcy5fbW91c2VEZWxheU1ldChhKSkodGhpcy5fbW91c2VTdGFydGVkPXRoaXMuX21vdXNlU3RhcnQodGhpcy5fbW91c2VEb3duRXZlbnQsYSkhPT1mYWxzZSk/dGhpcy5fbW91c2VEcmFnKGEpOnRoaXMuX21vdXNlVXAoYSk7cmV0dXJuIXRoaXMuX21vdXNlU3RhcnRlZH0sX21vdXNlVXA6ZnVuY3Rpb24oYSl7Yyhkb2N1bWVudCkudW5iaW5kKCJtb3VzZW1vdmUuIit0aGlzLndpZGdldE5hbWUsdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUpLnVuYmluZCgibW91c2V1cC4iK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZVVwRGVsZWdhdGUpO2lmKHRoaXMuX21vdXNlU3RhcnRlZCl7dGhpcy5fbW91c2VTdGFydGVkPWZhbHNlO3RoaXMuX3ByZXZlbnRDbGlja0V2ZW50PWEudGFyZ2V0PT10aGlzLl9tb3VzZURvd25FdmVudC50YXJnZXQ7dGhpcy5fbW91c2VTdG9wKGEpfXJldHVybiBmYWxzZX0sX21vdXNlRGlzdGFuY2VNZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGgubWF4KE1hdGguYWJzKHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VYLQphLnBhZ2VYKSxNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWS1hLnBhZ2VZKSk+PXRoaXMub3B0aW9ucy5kaXN0YW5jZX0sX21vdXNlRGVsYXlNZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb3VzZURlbGF5TWV0fSxfbW91c2VTdGFydDpmdW5jdGlvbigpe30sX21vdXNlRHJhZzpmdW5jdGlvbigpe30sX21vdXNlU3RvcDpmdW5jdGlvbigpe30sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbigpe3JldHVybiB0cnVlfX0pfSkoalF1ZXJ5KTsKOy8qCiAqIGpRdWVyeSBVSSBEcmFnZ2FibGUgMS44LjEKICoKICogQ29weXJpZ2h0IChjKSAyMDEwIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgKE1JVC1MSUNFTlNFLnR4dCkKICogYW5kIEdQTCAoR1BMLUxJQ0VOU0UudHh0KSBsaWNlbnNlcy4KICoKICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VSS9EcmFnZ2FibGVzCiAqCiAqIERlcGVuZHM6CiAqCWpxdWVyeS51aS5jb3JlLmpzCiAqCWpxdWVyeS51aS5tb3VzZS5qcwogKglqcXVlcnkudWkud2lkZ2V0LmpzCiAqLwooZnVuY3Rpb24oZCl7ZC53aWRnZXQoInVpLmRyYWdnYWJsZSIsZC51aS5tb3VzZSx7d2lkZ2V0RXZlbnRQcmVmaXg6ImRyYWciLG9wdGlvbnM6e2FkZENsYXNzZXM6dHJ1ZSxhcHBlbmRUbzoicGFyZW50IixheGlzOmZhbHNlLGNvbm5lY3RUb1NvcnRhYmxlOmZhbHNlLGNvbnRhaW5tZW50OmZhbHNlLGN1cnNvcjoiYXV0byIsY3Vyc29yQXQ6ZmFsc2UsZ3JpZDpmYWxzZSxoYW5kbGU6ZmFsc2UsaGVscGVyOiJvcmlnaW5hbCIsaWZyYW1lRml4OmZhbHNlLG9wYWNpdHk6ZmFsc2UscmVmcmVzaFBvc2l0aW9uczpmYWxzZSxyZXZlcnQ6ZmFsc2UscmV2ZXJ0RHVyYXRpb246NTAwLHNjb3BlOiJkZWZhdWx0IixzY3JvbGw6dHJ1ZSxzY3JvbGxTZW5zaXRpdml0eToyMCxzY3JvbGxTcGVlZDoyMCxzbmFwOmZhbHNlLHNuYXBNb2RlOiJib3RoIixzbmFwVG9sZXJhbmNlOjIwLHN0YWNrOmZhbHNlLHpJbmRleDpmYWxzZX0sX2NyZWF0ZTpmdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5oZWxwZXI9PQoib3JpZ2luYWwiJiYhL14oPzpyfGF8ZikvLnRlc3QodGhpcy5lbGVtZW50LmNzcygicG9zaXRpb24iKSkpdGhpcy5lbGVtZW50WzBdLnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSI7dGhpcy5vcHRpb25zLmFkZENsYXNzZXMmJnRoaXMuZWxlbWVudC5hZGRDbGFzcygidWktZHJhZ2dhYmxlIik7dGhpcy5vcHRpb25zLmRpc2FibGVkJiZ0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoInVpLWRyYWdnYWJsZS1kaXNhYmxlZCIpO3RoaXMuX21vdXNlSW5pdCgpfSxkZXN0cm95OmZ1bmN0aW9uKCl7aWYodGhpcy5lbGVtZW50LmRhdGEoImRyYWdnYWJsZSIpKXt0aGlzLmVsZW1lbnQucmVtb3ZlRGF0YSgiZHJhZ2dhYmxlIikudW5iaW5kKCIuZHJhZ2dhYmxlIikucmVtb3ZlQ2xhc3MoInVpLWRyYWdnYWJsZSB1aS1kcmFnZ2FibGUtZHJhZ2dpbmcgdWktZHJhZ2dhYmxlLWRpc2FibGVkIik7dGhpcy5fbW91c2VEZXN0cm95KCk7cmV0dXJuIHRoaXN9fSxfbW91c2VDYXB0dXJlOmZ1bmN0aW9uKGEpe3ZhciBiPQp0aGlzLm9wdGlvbnM7aWYodGhpcy5oZWxwZXJ8fGIuZGlzYWJsZWR8fGQoYS50YXJnZXQpLmlzKCIudWktcmVzaXphYmxlLWhhbmRsZSIpKXJldHVybiBmYWxzZTt0aGlzLmhhbmRsZT10aGlzLl9nZXRIYW5kbGUoYSk7aWYoIXRoaXMuaGFuZGxlKXJldHVybiBmYWxzZTtyZXR1cm4gdHJ1ZX0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5vcHRpb25zO3RoaXMuaGVscGVyPXRoaXMuX2NyZWF0ZUhlbHBlcihhKTt0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7aWYoZC51aS5kZG1hbmFnZXIpZC51aS5kZG1hbmFnZXIuY3VycmVudD10aGlzO3RoaXMuX2NhY2hlTWFyZ2lucygpO3RoaXMuY3NzUG9zaXRpb249dGhpcy5oZWxwZXIuY3NzKCJwb3NpdGlvbiIpO3RoaXMuc2Nyb2xsUGFyZW50PXRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCgpO3RoaXMub2Zmc2V0PXRoaXMucG9zaXRpb25BYnM9dGhpcy5lbGVtZW50Lm9mZnNldCgpO3RoaXMub2Zmc2V0PXt0b3A6dGhpcy5vZmZzZXQudG9wLQp0aGlzLm1hcmdpbnMudG9wLGxlZnQ6dGhpcy5vZmZzZXQubGVmdC10aGlzLm1hcmdpbnMubGVmdH07ZC5leHRlbmQodGhpcy5vZmZzZXQse2NsaWNrOntsZWZ0OmEucGFnZVgtdGhpcy5vZmZzZXQubGVmdCx0b3A6YS5wYWdlWS10aGlzLm9mZnNldC50b3B9LHBhcmVudDp0aGlzLl9nZXRQYXJlbnRPZmZzZXQoKSxyZWxhdGl2ZTp0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpfSk7dGhpcy5vcmlnaW5hbFBvc2l0aW9uPXRoaXMucG9zaXRpb249dGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihhKTt0aGlzLm9yaWdpbmFsUGFnZVg9YS5wYWdlWDt0aGlzLm9yaWdpbmFsUGFnZVk9YS5wYWdlWTtiLmN1cnNvckF0JiZ0aGlzLl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyKGIuY3Vyc29yQXQpO2IuY29udGFpbm1lbnQmJnRoaXMuX3NldENvbnRhaW5tZW50KCk7aWYodGhpcy5fdHJpZ2dlcigic3RhcnQiLGEpPT09ZmFsc2Upe3RoaXMuX2NsZWFyKCk7cmV0dXJuIGZhbHNlfXRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTsKZC51aS5kZG1hbmFnZXImJiFiLmRyb3BCZWhhdmlvdXImJmQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsYSk7dGhpcy5oZWxwZXIuYWRkQ2xhc3MoInVpLWRyYWdnYWJsZS1kcmFnZ2luZyIpO3RoaXMuX21vdXNlRHJhZyhhLHRydWUpO3JldHVybiB0cnVlfSxfbW91c2VEcmFnOmZ1bmN0aW9uKGEsYil7dGhpcy5wb3NpdGlvbj10aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKGEpO3RoaXMucG9zaXRpb25BYnM9dGhpcy5fY29udmVydFBvc2l0aW9uVG8oImFic29sdXRlIik7aWYoIWIpe2I9dGhpcy5fdWlIYXNoKCk7aWYodGhpcy5fdHJpZ2dlcigiZHJhZyIsYSxiKT09PWZhbHNlKXt0aGlzLl9tb3VzZVVwKHt9KTtyZXR1cm4gZmFsc2V9dGhpcy5wb3NpdGlvbj1iLnBvc2l0aW9ufWlmKCF0aGlzLm9wdGlvbnMuYXhpc3x8dGhpcy5vcHRpb25zLmF4aXMhPSJ5Iil0aGlzLmhlbHBlclswXS5zdHlsZS5sZWZ0PXRoaXMucG9zaXRpb24ubGVmdCsicHgiO2lmKCF0aGlzLm9wdGlvbnMuYXhpc3x8CnRoaXMub3B0aW9ucy5heGlzIT0ieCIpdGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wPXRoaXMucG9zaXRpb24udG9wKyJweCI7ZC51aS5kZG1hbmFnZXImJmQudWkuZGRtYW5hZ2VyLmRyYWcodGhpcyxhKTtyZXR1cm4gZmFsc2V9LF9tb3VzZVN0b3A6ZnVuY3Rpb24oYSl7dmFyIGI9ZmFsc2U7aWYoZC51aS5kZG1hbmFnZXImJiF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciliPWQudWkuZGRtYW5hZ2VyLmRyb3AodGhpcyxhKTtpZih0aGlzLmRyb3BwZWQpe2I9dGhpcy5kcm9wcGVkO3RoaXMuZHJvcHBlZD1mYWxzZX1pZighdGhpcy5lbGVtZW50WzBdfHwhdGhpcy5lbGVtZW50WzBdLnBhcmVudE5vZGUpcmV0dXJuIGZhbHNlO2lmKHRoaXMub3B0aW9ucy5yZXZlcnQ9PSJpbnZhbGlkIiYmIWJ8fHRoaXMub3B0aW9ucy5yZXZlcnQ9PSJ2YWxpZCImJmJ8fHRoaXMub3B0aW9ucy5yZXZlcnQ9PT10cnVlfHxkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnJldmVydCkmJnRoaXMub3B0aW9ucy5yZXZlcnQuY2FsbCh0aGlzLmVsZW1lbnQsCmIpKXt2YXIgYz10aGlzO2QodGhpcy5oZWxwZXIpLmFuaW1hdGUodGhpcy5vcmlnaW5hbFBvc2l0aW9uLHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnREdXJhdGlvbiwxMCksZnVuY3Rpb24oKXtjLl90cmlnZ2VyKCJzdG9wIixhKSE9PWZhbHNlJiZjLl9jbGVhcigpfSl9ZWxzZSB0aGlzLl90cmlnZ2VyKCJzdG9wIixhKSE9PWZhbHNlJiZ0aGlzLl9jbGVhcigpO3JldHVybiBmYWxzZX0sY2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy5oZWxwZXIuaXMoIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmciKT90aGlzLl9tb3VzZVVwKHt9KTp0aGlzLl9jbGVhcigpO3JldHVybiB0aGlzfSxfZ2V0SGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBiPSF0aGlzLm9wdGlvbnMuaGFuZGxlfHwhZCh0aGlzLm9wdGlvbnMuaGFuZGxlLHRoaXMuZWxlbWVudCkubGVuZ3RoP3RydWU6ZmFsc2U7ZCh0aGlzLm9wdGlvbnMuaGFuZGxlLHRoaXMuZWxlbWVudCkuZmluZCgiKiIpLmFuZFNlbGYoKS5lYWNoKGZ1bmN0aW9uKCl7aWYodGhpcz09CmEudGFyZ2V0KWI9dHJ1ZX0pO3JldHVybiBifSxfY3JlYXRlSGVscGVyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMub3B0aW9uczthPWQuaXNGdW5jdGlvbihiLmhlbHBlcik/ZChiLmhlbHBlci5hcHBseSh0aGlzLmVsZW1lbnRbMF0sW2FdKSk6Yi5oZWxwZXI9PSJjbG9uZSI/dGhpcy5lbGVtZW50LmNsb25lKCk6dGhpcy5lbGVtZW50O2EucGFyZW50cygiYm9keSIpLmxlbmd0aHx8YS5hcHBlbmRUbyhiLmFwcGVuZFRvPT0icGFyZW50Ij90aGlzLmVsZW1lbnRbMF0ucGFyZW50Tm9kZTpiLmFwcGVuZFRvKTthWzBdIT10aGlzLmVsZW1lbnRbMF0mJiEvKGZpeGVkfGFic29sdXRlKS8udGVzdChhLmNzcygicG9zaXRpb24iKSkmJmEuY3NzKCJwb3NpdGlvbiIsImFic29sdXRlIik7cmV0dXJuIGF9LF9hZGp1c3RPZmZzZXRGcm9tSGVscGVyOmZ1bmN0aW9uKGEpe2lmKHR5cGVvZiBhPT0ic3RyaW5nIilhPWEuc3BsaXQoIiAiKTtpZihkLmlzQXJyYXkoYSkpYT17bGVmdDorYVswXSx0b3A6K2FbMV18fAowfTtpZigibGVmdCJpbiBhKXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ9YS5sZWZ0K3RoaXMubWFyZ2lucy5sZWZ0O2lmKCJyaWdodCJpbiBhKXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ9dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC1hLnJpZ2h0K3RoaXMubWFyZ2lucy5sZWZ0O2lmKCJ0b3AiaW4gYSl0aGlzLm9mZnNldC5jbGljay50b3A9YS50b3ArdGhpcy5tYXJnaW5zLnRvcDtpZigiYm90dG9tImluIGEpdGhpcy5vZmZzZXQuY2xpY2sudG9wPXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LWEuYm90dG9tK3RoaXMubWFyZ2lucy50b3B9LF9nZXRQYXJlbnRPZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLm9mZnNldFBhcmVudD10aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTt2YXIgYT10aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTtpZih0aGlzLmNzc1Bvc2l0aW9uPT0iYWJzb2x1dGUiJiZ0aGlzLnNjcm9sbFBhcmVudFswXSE9ZG9jdW1lbnQmJmQudWkuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sCnRoaXMub2Zmc2V0UGFyZW50WzBdKSl7YS5sZWZ0Kz10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7YS50b3ArPXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpfWlmKHRoaXMub2Zmc2V0UGFyZW50WzBdPT1kb2N1bWVudC5ib2R5fHx0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lJiZ0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PSJodG1sIiYmZC5icm93c2VyLm1zaWUpYT17dG9wOjAsbGVmdDowfTtyZXR1cm57dG9wOmEudG9wKyhwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoImJvcmRlclRvcFdpZHRoIiksMTApfHwwKSxsZWZ0OmEubGVmdCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKSwxMCl8fDApfX0sX2dldFJlbGF0aXZlT2Zmc2V0OmZ1bmN0aW9uKCl7aWYodGhpcy5jc3NQb3NpdGlvbj09InJlbGF0aXZlIil7dmFyIGE9dGhpcy5lbGVtZW50LnBvc2l0aW9uKCk7cmV0dXJue3RvcDphLnRvcC0KKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcygidG9wIiksMTApfHwwKSt0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSxsZWZ0OmEubGVmdC0ocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKCJsZWZ0IiksMTApfHwwKSt0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCl9fWVsc2UgcmV0dXJue3RvcDowLGxlZnQ6MH19LF9jYWNoZU1hcmdpbnM6ZnVuY3Rpb24oKXt0aGlzLm1hcmdpbnM9e2xlZnQ6cGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygibWFyZ2luTGVmdCIpLDEwKXx8MCx0b3A6cGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygibWFyZ2luVG9wIiksMTApfHwwfX0sX2NhY2hlSGVscGVyUHJvcG9ydGlvbnM6ZnVuY3Rpb24oKXt0aGlzLmhlbHBlclByb3BvcnRpb25zPXt3aWR0aDp0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksaGVpZ2h0OnRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCl9fSxfc2V0Q29udGFpbm1lbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnM7aWYoYS5jb250YWlubWVudD09CiJwYXJlbnQiKWEuY29udGFpbm1lbnQ9dGhpcy5oZWxwZXJbMF0ucGFyZW50Tm9kZTtpZihhLmNvbnRhaW5tZW50PT0iZG9jdW1lbnQifHxhLmNvbnRhaW5tZW50PT0id2luZG93Iil0aGlzLmNvbnRhaW5tZW50PVswLXRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQtdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsMC10aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AtdGhpcy5vZmZzZXQucGFyZW50LnRvcCxkKGEuY29udGFpbm1lbnQ9PSJkb2N1bWVudCI/ZG9jdW1lbnQ6d2luZG93KS53aWR0aCgpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgtdGhpcy5tYXJnaW5zLmxlZnQsKGQoYS5jb250YWlubWVudD09ImRvY3VtZW50Ij9kb2N1bWVudDp3aW5kb3cpLmhlaWdodCgpfHxkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0KS10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC10aGlzLm1hcmdpbnMudG9wXTtpZighL14oZG9jdW1lbnR8d2luZG93fHBhcmVudCkkLy50ZXN0KGEuY29udGFpbm1lbnQpJiYKYS5jb250YWlubWVudC5jb25zdHJ1Y3RvciE9QXJyYXkpe3ZhciBiPWQoYS5jb250YWlubWVudClbMF07aWYoYil7YT1kKGEuY29udGFpbm1lbnQpLm9mZnNldCgpO3ZhciBjPWQoYikuY3NzKCJvdmVyZmxvdyIpIT0iaGlkZGVuIjt0aGlzLmNvbnRhaW5tZW50PVthLmxlZnQrKHBhcnNlSW50KGQoYikuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKSwxMCl8fDApKyhwYXJzZUludChkKGIpLmNzcygicGFkZGluZ0xlZnQiKSwxMCl8fDApLXRoaXMubWFyZ2lucy5sZWZ0LGEudG9wKyhwYXJzZUludChkKGIpLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCl8fDApKyhwYXJzZUludChkKGIpLmNzcygicGFkZGluZ1RvcCIpLDEwKXx8MCktdGhpcy5tYXJnaW5zLnRvcCxhLmxlZnQrKGM/TWF0aC5tYXgoYi5zY3JvbGxXaWR0aCxiLm9mZnNldFdpZHRoKTpiLm9mZnNldFdpZHRoKS0ocGFyc2VJbnQoZChiKS5jc3MoImJvcmRlckxlZnRXaWR0aCIpLDEwKXx8MCktKHBhcnNlSW50KGQoYikuY3NzKCJwYWRkaW5nUmlnaHQiKSwKMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LGEudG9wKyhjP01hdGgubWF4KGIuc2Nyb2xsSGVpZ2h0LGIub2Zmc2V0SGVpZ2h0KTpiLm9mZnNldEhlaWdodCktKHBhcnNlSW50KGQoYikuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKXx8MCktKHBhcnNlSW50KGQoYikuY3NzKCJwYWRkaW5nQm90dG9tIiksMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC10aGlzLm1hcmdpbnMudG9wXX19ZWxzZSBpZihhLmNvbnRhaW5tZW50LmNvbnN0cnVjdG9yPT1BcnJheSl0aGlzLmNvbnRhaW5tZW50PWEuY29udGFpbm1lbnR9LF9jb252ZXJ0UG9zaXRpb25UbzpmdW5jdGlvbihhLGIpe2lmKCFiKWI9dGhpcy5wb3NpdGlvbjthPWE9PSJhYnNvbHV0ZSI/MTotMTt2YXIgYz10aGlzLmNzc1Bvc2l0aW9uPT0iYWJzb2x1dGUiJiYhKHRoaXMuc2Nyb2xsUGFyZW50WzBdIT1kb2N1bWVudCYmZC51aS5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSwKdGhpcy5vZmZzZXRQYXJlbnRbMF0pKT90aGlzLm9mZnNldFBhcmVudDp0aGlzLnNjcm9sbFBhcmVudCxmPS8oaHRtbHxib2R5KS9pLnRlc3QoY1swXS50YWdOYW1lKTtyZXR1cm57dG9wOmIudG9wK3RoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCphK3RoaXMub2Zmc2V0LnBhcmVudC50b3AqYS0oZC5icm93c2VyLnNhZmFyaSYmZC5icm93c2VyLnZlcnNpb248NTI2JiZ0aGlzLmNzc1Bvc2l0aW9uPT0iZml4ZWQiPzA6KHRoaXMuY3NzUG9zaXRpb249PSJmaXhlZCI/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOmY/MDpjLnNjcm9sbFRvcCgpKSphKSxsZWZ0OmIubGVmdCt0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0KmErdGhpcy5vZmZzZXQucGFyZW50LmxlZnQqYS0oZC5icm93c2VyLnNhZmFyaSYmZC5icm93c2VyLnZlcnNpb248NTI2JiZ0aGlzLmNzc1Bvc2l0aW9uPT0iZml4ZWQiPzA6KHRoaXMuY3NzUG9zaXRpb249PSJmaXhlZCI/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKToKZj8wOmMuc2Nyb2xsTGVmdCgpKSphKX19LF9nZW5lcmF0ZVBvc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMub3B0aW9ucyxjPXRoaXMuY3NzUG9zaXRpb249PSJhYnNvbHV0ZSImJiEodGhpcy5zY3JvbGxQYXJlbnRbMF0hPWRvY3VtZW50JiZkLnVpLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKSk/dGhpcy5vZmZzZXRQYXJlbnQ6dGhpcy5zY3JvbGxQYXJlbnQsZj0vKGh0bWx8Ym9keSkvaS50ZXN0KGNbMF0udGFnTmFtZSksZT1hLnBhZ2VYLGc9YS5wYWdlWTtpZih0aGlzLm9yaWdpbmFsUG9zaXRpb24pe2lmKHRoaXMuY29udGFpbm1lbnQpe2lmKGEucGFnZVgtdGhpcy5vZmZzZXQuY2xpY2subGVmdDx0aGlzLmNvbnRhaW5tZW50WzBdKWU9dGhpcy5jb250YWlubWVudFswXSt0aGlzLm9mZnNldC5jbGljay5sZWZ0O2lmKGEucGFnZVktdGhpcy5vZmZzZXQuY2xpY2sudG9wPHRoaXMuY29udGFpbm1lbnRbMV0pZz10aGlzLmNvbnRhaW5tZW50WzFdKwp0aGlzLm9mZnNldC5jbGljay50b3A7aWYoYS5wYWdlWC10aGlzLm9mZnNldC5jbGljay5sZWZ0PnRoaXMuY29udGFpbm1lbnRbMl0pZT10aGlzLmNvbnRhaW5tZW50WzJdK3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7aWYoYS5wYWdlWS10aGlzLm9mZnNldC5jbGljay50b3A+dGhpcy5jb250YWlubWVudFszXSlnPXRoaXMuY29udGFpbm1lbnRbM10rdGhpcy5vZmZzZXQuY2xpY2sudG9wfWlmKGIuZ3JpZCl7Zz10aGlzLm9yaWdpbmFsUGFnZVkrTWF0aC5yb3VuZCgoZy10aGlzLm9yaWdpbmFsUGFnZVkpL2IuZ3JpZFsxXSkqYi5ncmlkWzFdO2c9dGhpcy5jb250YWlubWVudD8hKGctdGhpcy5vZmZzZXQuY2xpY2sudG9wPHRoaXMuY29udGFpbm1lbnRbMV18fGctdGhpcy5vZmZzZXQuY2xpY2sudG9wPnRoaXMuY29udGFpbm1lbnRbM10pP2c6IShnLXRoaXMub2Zmc2V0LmNsaWNrLnRvcDx0aGlzLmNvbnRhaW5tZW50WzFdKT9nLWIuZ3JpZFsxXTpnK2IuZ3JpZFsxXTpnO2U9dGhpcy5vcmlnaW5hbFBhZ2VYKwpNYXRoLnJvdW5kKChlLXRoaXMub3JpZ2luYWxQYWdlWCkvYi5ncmlkWzBdKSpiLmdyaWRbMF07ZT10aGlzLmNvbnRhaW5tZW50PyEoZS10aGlzLm9mZnNldC5jbGljay5sZWZ0PHRoaXMuY29udGFpbm1lbnRbMF18fGUtdGhpcy5vZmZzZXQuY2xpY2subGVmdD50aGlzLmNvbnRhaW5tZW50WzJdKT9lOiEoZS10aGlzLm9mZnNldC5jbGljay5sZWZ0PHRoaXMuY29udGFpbm1lbnRbMF0pP2UtYi5ncmlkWzBdOmUrYi5ncmlkWzBdOmV9fXJldHVybnt0b3A6Zy10aGlzLm9mZnNldC5jbGljay50b3AtdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3ArKGQuYnJvd3Nlci5zYWZhcmkmJmQuYnJvd3Nlci52ZXJzaW9uPDUyNiYmdGhpcy5jc3NQb3NpdGlvbj09ImZpeGVkIj8wOnRoaXMuY3NzUG9zaXRpb249PSJmaXhlZCI/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOmY/MDpjLnNjcm9sbFRvcCgpKSxsZWZ0OmUtdGhpcy5vZmZzZXQuY2xpY2subGVmdC0KdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdC10aGlzLm9mZnNldC5wYXJlbnQubGVmdCsoZC5icm93c2VyLnNhZmFyaSYmZC5icm93c2VyLnZlcnNpb248NTI2JiZ0aGlzLmNzc1Bvc2l0aW9uPT0iZml4ZWQiPzA6dGhpcy5jc3NQb3NpdGlvbj09ImZpeGVkIj8tdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpOmY/MDpjLnNjcm9sbExlZnQoKSl9fSxfY2xlYXI6ZnVuY3Rpb24oKXt0aGlzLmhlbHBlci5yZW1vdmVDbGFzcygidWktZHJhZ2dhYmxlLWRyYWdnaW5nIik7dGhpcy5oZWxwZXJbMF0hPXRoaXMuZWxlbWVudFswXSYmIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCYmdGhpcy5oZWxwZXIucmVtb3ZlKCk7dGhpcy5oZWxwZXI9bnVsbDt0aGlzLmNhbmNlbEhlbHBlclJlbW92YWw9ZmFsc2V9LF90cmlnZ2VyOmZ1bmN0aW9uKGEsYixjKXtjPWN8fHRoaXMuX3VpSGFzaCgpO2QudWkucGx1Z2luLmNhbGwodGhpcyxhLFtiLGNdKTtpZihhPT0iZHJhZyIpdGhpcy5wb3NpdGlvbkFicz0KdGhpcy5fY29udmVydFBvc2l0aW9uVG8oImFic29sdXRlIik7cmV0dXJuIGQuV2lkZ2V0LnByb3RvdHlwZS5fdHJpZ2dlci5jYWxsKHRoaXMsYSxiLGMpfSxwbHVnaW5zOnt9LF91aUhhc2g6ZnVuY3Rpb24oKXtyZXR1cm57aGVscGVyOnRoaXMuaGVscGVyLHBvc2l0aW9uOnRoaXMucG9zaXRpb24sb3JpZ2luYWxQb3NpdGlvbjp0aGlzLm9yaWdpbmFsUG9zaXRpb24sb2Zmc2V0OnRoaXMucG9zaXRpb25BYnN9fX0pO2QuZXh0ZW5kKGQudWkuZHJhZ2dhYmxlLHt2ZXJzaW9uOiIxLjguMSJ9KTtkLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsImNvbm5lY3RUb1NvcnRhYmxlIix7c3RhcnQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1kKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLGY9Yy5vcHRpb25zLGU9ZC5leHRlbmQoe30sYix7aXRlbTpjLmVsZW1lbnR9KTtjLnNvcnRhYmxlcz1bXTtkKGYuY29ubmVjdFRvU29ydGFibGUpLmVhY2goZnVuY3Rpb24oKXt2YXIgZz1kLmRhdGEodGhpcywic29ydGFibGUiKTsKaWYoZyYmIWcub3B0aW9ucy5kaXNhYmxlZCl7Yy5zb3J0YWJsZXMucHVzaCh7aW5zdGFuY2U6ZyxzaG91bGRSZXZlcnQ6Zy5vcHRpb25zLnJldmVydH0pO2cuX3JlZnJlc2hJdGVtcygpO2cuX3RyaWdnZXIoImFjdGl2YXRlIixhLGUpfX0pfSxzdG9wOmZ1bmN0aW9uKGEsYil7dmFyIGM9ZCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKSxmPWQuZXh0ZW5kKHt9LGIse2l0ZW06Yy5lbGVtZW50fSk7ZC5lYWNoKGMuc29ydGFibGVzLGZ1bmN0aW9uKCl7aWYodGhpcy5pbnN0YW5jZS5pc092ZXIpe3RoaXMuaW5zdGFuY2UuaXNPdmVyPTA7Yy5jYW5jZWxIZWxwZXJSZW1vdmFsPXRydWU7dGhpcy5pbnN0YW5jZS5jYW5jZWxIZWxwZXJSZW1vdmFsPWZhbHNlO2lmKHRoaXMuc2hvdWxkUmV2ZXJ0KXRoaXMuaW5zdGFuY2Uub3B0aW9ucy5yZXZlcnQ9dHJ1ZTt0aGlzLmluc3RhbmNlLl9tb3VzZVN0b3AoYSk7dGhpcy5pbnN0YW5jZS5vcHRpb25zLmhlbHBlcj10aGlzLmluc3RhbmNlLm9wdGlvbnMuX2hlbHBlcjsKYy5vcHRpb25zLmhlbHBlcj09Im9yaWdpbmFsIiYmdGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbS5jc3Moe3RvcDoiYXV0byIsbGVmdDoiYXV0byJ9KX1lbHNle3RoaXMuaW5zdGFuY2UuY2FuY2VsSGVscGVyUmVtb3ZhbD1mYWxzZTt0aGlzLmluc3RhbmNlLl90cmlnZ2VyKCJkZWFjdGl2YXRlIixhLGYpfX0pfSxkcmFnOmZ1bmN0aW9uKGEsYil7dmFyIGM9ZCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKSxmPXRoaXM7ZC5lYWNoKGMuc29ydGFibGVzLGZ1bmN0aW9uKCl7dGhpcy5pbnN0YW5jZS5wb3NpdGlvbkFicz1jLnBvc2l0aW9uQWJzO3RoaXMuaW5zdGFuY2UuaGVscGVyUHJvcG9ydGlvbnM9Yy5oZWxwZXJQcm9wb3J0aW9uczt0aGlzLmluc3RhbmNlLm9mZnNldC5jbGljaz1jLm9mZnNldC5jbGljaztpZih0aGlzLmluc3RhbmNlLl9pbnRlcnNlY3RzV2l0aCh0aGlzLmluc3RhbmNlLmNvbnRhaW5lckNhY2hlKSl7aWYoIXRoaXMuaW5zdGFuY2UuaXNPdmVyKXt0aGlzLmluc3RhbmNlLmlzT3Zlcj0KMTt0aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtPWQoZikuY2xvbmUoKS5hcHBlbmRUbyh0aGlzLmluc3RhbmNlLmVsZW1lbnQpLmRhdGEoInNvcnRhYmxlLWl0ZW0iLHRydWUpO3RoaXMuaW5zdGFuY2Uub3B0aW9ucy5faGVscGVyPXRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oZWxwZXI7dGhpcy5pbnN0YW5jZS5vcHRpb25zLmhlbHBlcj1mdW5jdGlvbigpe3JldHVybiBiLmhlbHBlclswXX07YS50YXJnZXQ9dGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbVswXTt0aGlzLmluc3RhbmNlLl9tb3VzZUNhcHR1cmUoYSx0cnVlKTt0aGlzLmluc3RhbmNlLl9tb3VzZVN0YXJ0KGEsdHJ1ZSx0cnVlKTt0aGlzLmluc3RhbmNlLm9mZnNldC5jbGljay50b3A9Yy5vZmZzZXQuY2xpY2sudG9wO3RoaXMuaW5zdGFuY2Uub2Zmc2V0LmNsaWNrLmxlZnQ9Yy5vZmZzZXQuY2xpY2subGVmdDt0aGlzLmluc3RhbmNlLm9mZnNldC5wYXJlbnQubGVmdC09Yy5vZmZzZXQucGFyZW50LmxlZnQtdGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LmxlZnQ7CnRoaXMuaW5zdGFuY2Uub2Zmc2V0LnBhcmVudC50b3AtPWMub2Zmc2V0LnBhcmVudC50b3AtdGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LnRvcDtjLl90cmlnZ2VyKCJ0b1NvcnRhYmxlIixhKTtjLmRyb3BwZWQ9dGhpcy5pbnN0YW5jZS5lbGVtZW50O2MuY3VycmVudEl0ZW09Yy5lbGVtZW50O3RoaXMuaW5zdGFuY2UuZnJvbU91dHNpZGU9Y310aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtJiZ0aGlzLmluc3RhbmNlLl9tb3VzZURyYWcoYSl9ZWxzZSBpZih0aGlzLmluc3RhbmNlLmlzT3Zlcil7dGhpcy5pbnN0YW5jZS5pc092ZXI9MDt0aGlzLmluc3RhbmNlLmNhbmNlbEhlbHBlclJlbW92YWw9dHJ1ZTt0aGlzLmluc3RhbmNlLm9wdGlvbnMucmV2ZXJ0PWZhbHNlO3RoaXMuaW5zdGFuY2UuX3RyaWdnZXIoIm91dCIsYSx0aGlzLmluc3RhbmNlLl91aUhhc2godGhpcy5pbnN0YW5jZSkpO3RoaXMuaW5zdGFuY2UuX21vdXNlU3RvcChhLHRydWUpO3RoaXMuaW5zdGFuY2Uub3B0aW9ucy5oZWxwZXI9CnRoaXMuaW5zdGFuY2Uub3B0aW9ucy5faGVscGVyO3RoaXMuaW5zdGFuY2UuY3VycmVudEl0ZW0ucmVtb3ZlKCk7dGhpcy5pbnN0YW5jZS5wbGFjZWhvbGRlciYmdGhpcy5pbnN0YW5jZS5wbGFjZWhvbGRlci5yZW1vdmUoKTtjLl90cmlnZ2VyKCJmcm9tU29ydGFibGUiLGEpO2MuZHJvcHBlZD1mYWxzZX19KX19KTtkLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsImN1cnNvciIse3N0YXJ0OmZ1bmN0aW9uKCl7dmFyIGE9ZCgiYm9keSIpLGI9ZCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKS5vcHRpb25zO2lmKGEuY3NzKCJjdXJzb3IiKSliLl9jdXJzb3I9YS5jc3MoImN1cnNvciIpO2EuY3NzKCJjdXJzb3IiLGIuY3Vyc29yKX0sc3RvcDpmdW5jdGlvbigpe3ZhciBhPWQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIikub3B0aW9uczthLl9jdXJzb3ImJmQoImJvZHkiKS5jc3MoImN1cnNvciIsYS5fY3Vyc29yKX19KTtkLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsImlmcmFtZUZpeCIse3N0YXJ0OmZ1bmN0aW9uKCl7dmFyIGE9CmQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIikub3B0aW9ucztkKGEuaWZyYW1lRml4PT09dHJ1ZT8iaWZyYW1lIjphLmlmcmFtZUZpeCkuZWFjaChmdW5jdGlvbigpe2QoJzxkaXYgY2xhc3M9InVpLWRyYWdnYWJsZS1pZnJhbWVGaXgiIHN0eWxlPSJiYWNrZ3JvdW5kOiAjZmZmOyI+PC9kaXY+JykuY3NzKHt3aWR0aDp0aGlzLm9mZnNldFdpZHRoKyJweCIsaGVpZ2h0OnRoaXMub2Zmc2V0SGVpZ2h0KyJweCIscG9zaXRpb246ImFic29sdXRlIixvcGFjaXR5OiIwLjAwMSIsekluZGV4OjFFM30pLmNzcyhkKHRoaXMpLm9mZnNldCgpKS5hcHBlbmRUbygiYm9keSIpfSl9LHN0b3A6ZnVuY3Rpb24oKXtkKCJkaXYudWktZHJhZ2dhYmxlLWlmcmFtZUZpeCIpLmVhY2goZnVuY3Rpb24oKXt0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyl9KX19KTtkLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsIm9wYWNpdHkiLHtzdGFydDpmdW5jdGlvbihhLGIpe2E9ZChiLmhlbHBlcik7Yj1kKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLm9wdGlvbnM7CmlmKGEuY3NzKCJvcGFjaXR5IikpYi5fb3BhY2l0eT1hLmNzcygib3BhY2l0eSIpO2EuY3NzKCJvcGFjaXR5IixiLm9wYWNpdHkpfSxzdG9wOmZ1bmN0aW9uKGEsYil7YT1kKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLm9wdGlvbnM7YS5fb3BhY2l0eSYmZChiLmhlbHBlcikuY3NzKCJvcGFjaXR5IixhLl9vcGFjaXR5KX19KTtkLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsInNjcm9sbCIse3N0YXJ0OmZ1bmN0aW9uKCl7dmFyIGE9ZCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKTtpZihhLnNjcm9sbFBhcmVudFswXSE9ZG9jdW1lbnQmJmEuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUhPSJIVE1MIilhLm92ZXJmbG93T2Zmc2V0PWEuc2Nyb2xsUGFyZW50Lm9mZnNldCgpfSxkcmFnOmZ1bmN0aW9uKGEpe3ZhciBiPWQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIiksYz1iLm9wdGlvbnMsZj1mYWxzZTtpZihiLnNjcm9sbFBhcmVudFswXSE9ZG9jdW1lbnQmJmIuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUhPQoiSFRNTCIpe2lmKCFjLmF4aXN8fGMuYXhpcyE9IngiKWlmKGIub3ZlcmZsb3dPZmZzZXQudG9wK2Iuc2Nyb2xsUGFyZW50WzBdLm9mZnNldEhlaWdodC1hLnBhZ2VZPGMuc2Nyb2xsU2Vuc2l0aXZpdHkpYi5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wPWY9Yi5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wK2Muc2Nyb2xsU3BlZWQ7ZWxzZSBpZihhLnBhZ2VZLWIub3ZlcmZsb3dPZmZzZXQudG9wPGMuc2Nyb2xsU2Vuc2l0aXZpdHkpYi5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wPWY9Yi5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wLWMuc2Nyb2xsU3BlZWQ7aWYoIWMuYXhpc3x8Yy5heGlzIT0ieSIpaWYoYi5vdmVyZmxvd09mZnNldC5sZWZ0K2Iuc2Nyb2xsUGFyZW50WzBdLm9mZnNldFdpZHRoLWEucGFnZVg8Yy5zY3JvbGxTZW5zaXRpdml0eSliLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0PWY9Yi5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCtjLnNjcm9sbFNwZWVkO2Vsc2UgaWYoYS5wYWdlWC0KYi5vdmVyZmxvd09mZnNldC5sZWZ0PGMuc2Nyb2xsU2Vuc2l0aXZpdHkpYi5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdD1mPWIuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQtYy5zY3JvbGxTcGVlZH1lbHNle2lmKCFjLmF4aXN8fGMuYXhpcyE9IngiKWlmKGEucGFnZVktZChkb2N1bWVudCkuc2Nyb2xsVG9wKCk8Yy5zY3JvbGxTZW5zaXRpdml0eSlmPWQoZG9jdW1lbnQpLnNjcm9sbFRvcChkKGRvY3VtZW50KS5zY3JvbGxUb3AoKS1jLnNjcm9sbFNwZWVkKTtlbHNlIGlmKGQod2luZG93KS5oZWlnaHQoKS0oYS5wYWdlWS1kKGRvY3VtZW50KS5zY3JvbGxUb3AoKSk8Yy5zY3JvbGxTZW5zaXRpdml0eSlmPWQoZG9jdW1lbnQpLnNjcm9sbFRvcChkKGRvY3VtZW50KS5zY3JvbGxUb3AoKStjLnNjcm9sbFNwZWVkKTtpZighYy5heGlzfHxjLmF4aXMhPSJ5IilpZihhLnBhZ2VYLWQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKTxjLnNjcm9sbFNlbnNpdGl2aXR5KWY9ZChkb2N1bWVudCkuc2Nyb2xsTGVmdChkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCktCmMuc2Nyb2xsU3BlZWQpO2Vsc2UgaWYoZCh3aW5kb3cpLndpZHRoKCktKGEucGFnZVgtZChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpKTxjLnNjcm9sbFNlbnNpdGl2aXR5KWY9ZChkb2N1bWVudCkuc2Nyb2xsTGVmdChkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkrYy5zY3JvbGxTcGVlZCl9ZiE9PWZhbHNlJiZkLnVpLmRkbWFuYWdlciYmIWMuZHJvcEJlaGF2aW91ciYmZC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoYixhKX19KTtkLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsInNuYXAiLHtzdGFydDpmdW5jdGlvbigpe3ZhciBhPWQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIiksYj1hLm9wdGlvbnM7YS5zbmFwRWxlbWVudHM9W107ZChiLnNuYXAuY29uc3RydWN0b3IhPVN0cmluZz9iLnNuYXAuaXRlbXN8fCI6ZGF0YShkcmFnZ2FibGUpIjpiLnNuYXApLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1kKHRoaXMpLGY9Yy5vZmZzZXQoKTt0aGlzIT1hLmVsZW1lbnRbMF0mJmEuc25hcEVsZW1lbnRzLnB1c2goe2l0ZW06dGhpcywKd2lkdGg6Yy5vdXRlcldpZHRoKCksaGVpZ2h0OmMub3V0ZXJIZWlnaHQoKSx0b3A6Zi50b3AsbGVmdDpmLmxlZnR9KX0pfSxkcmFnOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIiksZj1jLm9wdGlvbnMsZT1mLnNuYXBUb2xlcmFuY2UsZz1iLm9mZnNldC5sZWZ0LG49ZytjLmhlbHBlclByb3BvcnRpb25zLndpZHRoLG09Yi5vZmZzZXQudG9wLG89bStjLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxoPWMuc25hcEVsZW1lbnRzLmxlbmd0aC0xO2g+PTA7aC0tKXt2YXIgaT1jLnNuYXBFbGVtZW50c1toXS5sZWZ0LGs9aStjLnNuYXBFbGVtZW50c1toXS53aWR0aCxqPWMuc25hcEVsZW1lbnRzW2hdLnRvcCxsPWorYy5zbmFwRWxlbWVudHNbaF0uaGVpZ2h0O2lmKGktZTxnJiZnPGsrZSYmai1lPG0mJm08bCtlfHxpLWU8ZyYmZzxrK2UmJmotZTxvJiZvPGwrZXx8aS1lPG4mJm48aytlJiZqLWU8bSYmbTxsK2V8fGktZTxuJiZuPGsrZSYmai1lPG8mJgpvPGwrZSl7aWYoZi5zbmFwTW9kZSE9ImlubmVyIil7dmFyIHA9TWF0aC5hYnMoai1vKTw9ZSxxPU1hdGguYWJzKGwtbSk8PWUscj1NYXRoLmFicyhpLW4pPD1lLHM9TWF0aC5hYnMoay1nKTw9ZTtpZihwKWIucG9zaXRpb24udG9wPWMuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIse3RvcDpqLWMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LGxlZnQ6MH0pLnRvcC1jLm1hcmdpbnMudG9wO2lmKHEpYi5wb3NpdGlvbi50b3A9Yy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOmwsbGVmdDowfSkudG9wLWMubWFyZ2lucy50b3A7aWYociliLnBvc2l0aW9uLmxlZnQ9Yy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOjAsbGVmdDppLWMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGh9KS5sZWZ0LWMubWFyZ2lucy5sZWZ0O2lmKHMpYi5wb3NpdGlvbi5sZWZ0PWMuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIse3RvcDowLGxlZnQ6a30pLmxlZnQtYy5tYXJnaW5zLmxlZnR9dmFyIHQ9CnB8fHF8fHJ8fHM7aWYoZi5zbmFwTW9kZSE9Im91dGVyIil7cD1NYXRoLmFicyhqLW0pPD1lO3E9TWF0aC5hYnMobC1vKTw9ZTtyPU1hdGguYWJzKGktZyk8PWU7cz1NYXRoLmFicyhrLW4pPD1lO2lmKHApYi5wb3NpdGlvbi50b3A9Yy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOmosbGVmdDowfSkudG9wLWMubWFyZ2lucy50b3A7aWYocSliLnBvc2l0aW9uLnRvcD1jLl9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLHt0b3A6bC1jLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxsZWZ0OjB9KS50b3AtYy5tYXJnaW5zLnRvcDtpZihyKWIucG9zaXRpb24ubGVmdD1jLl9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLHt0b3A6MCxsZWZ0Oml9KS5sZWZ0LWMubWFyZ2lucy5sZWZ0O2lmKHMpYi5wb3NpdGlvbi5sZWZ0PWMuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIse3RvcDowLGxlZnQ6ay1jLmhlbHBlclByb3BvcnRpb25zLndpZHRofSkubGVmdC1jLm1hcmdpbnMubGVmdH1pZighYy5zbmFwRWxlbWVudHNbaF0uc25hcHBpbmcmJgoocHx8cXx8cnx8c3x8dCkpYy5vcHRpb25zLnNuYXAuc25hcCYmYy5vcHRpb25zLnNuYXAuc25hcC5jYWxsKGMuZWxlbWVudCxhLGQuZXh0ZW5kKGMuX3VpSGFzaCgpLHtzbmFwSXRlbTpjLnNuYXBFbGVtZW50c1toXS5pdGVtfSkpO2Muc25hcEVsZW1lbnRzW2hdLnNuYXBwaW5nPXB8fHF8fHJ8fHN8fHR9ZWxzZXtjLnNuYXBFbGVtZW50c1toXS5zbmFwcGluZyYmYy5vcHRpb25zLnNuYXAucmVsZWFzZSYmYy5vcHRpb25zLnNuYXAucmVsZWFzZS5jYWxsKGMuZWxlbWVudCxhLGQuZXh0ZW5kKGMuX3VpSGFzaCgpLHtzbmFwSXRlbTpjLnNuYXBFbGVtZW50c1toXS5pdGVtfSkpO2Muc25hcEVsZW1lbnRzW2hdLnNuYXBwaW5nPWZhbHNlfX19fSk7ZC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCJzdGFjayIse3N0YXJ0OmZ1bmN0aW9uKCl7dmFyIGE9ZCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKS5vcHRpb25zO2E9ZC5tYWtlQXJyYXkoZChhLnN0YWNrKSkuc29ydChmdW5jdGlvbihjLGYpe3JldHVybihwYXJzZUludChkKGMpLmNzcygiekluZGV4IiksCjEwKXx8MCktKHBhcnNlSW50KGQoZikuY3NzKCJ6SW5kZXgiKSwxMCl8fDApfSk7aWYoYS5sZW5ndGgpe3ZhciBiPXBhcnNlSW50KGFbMF0uc3R5bGUuekluZGV4KXx8MDtkKGEpLmVhY2goZnVuY3Rpb24oYyl7dGhpcy5zdHlsZS56SW5kZXg9YitjfSk7dGhpc1swXS5zdHlsZS56SW5kZXg9YithLmxlbmd0aH19fSk7ZC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCJ6SW5kZXgiLHtzdGFydDpmdW5jdGlvbihhLGIpe2E9ZChiLmhlbHBlcik7Yj1kKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLm9wdGlvbnM7aWYoYS5jc3MoInpJbmRleCIpKWIuX3pJbmRleD1hLmNzcygiekluZGV4Iik7YS5jc3MoInpJbmRleCIsYi56SW5kZXgpfSxzdG9wOmZ1bmN0aW9uKGEsYil7YT1kKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLm9wdGlvbnM7YS5fekluZGV4JiZkKGIuaGVscGVyKS5jc3MoInpJbmRleCIsYS5fekluZGV4KX19KX0pKGpRdWVyeSk7CjsvKgogKiBqUXVlcnkgVUkgUmVzaXphYmxlIDEuOC4xCiAqCiAqIENvcHlyaWdodCAoYykgMjAxMCBBVVRIT1JTLnR4dCAoaHR0cDovL2pxdWVyeXVpLmNvbS9hYm91dCkKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIChNSVQtTElDRU5TRS50eHQpCiAqIGFuZCBHUEwgKEdQTC1MSUNFTlNFLnR4dCkgbGljZW5zZXMuCiAqCiAqIGh0dHA6Ly9kb2NzLmpxdWVyeS5jb20vVUkvUmVzaXphYmxlcwogKgogKiBEZXBlbmRzOgogKglqcXVlcnkudWkuY29yZS5qcwogKglqcXVlcnkudWkubW91c2UuanMKICoJanF1ZXJ5LnVpLndpZGdldC5qcwogKi8KKGZ1bmN0aW9uKGQpe2Qud2lkZ2V0KCJ1aS5yZXNpemFibGUiLGQudWkubW91c2Use3dpZGdldEV2ZW50UHJlZml4OiJyZXNpemUiLG9wdGlvbnM6e2Fsc29SZXNpemU6ZmFsc2UsYW5pbWF0ZTpmYWxzZSxhbmltYXRlRHVyYXRpb246InNsb3ciLGFuaW1hdGVFYXNpbmc6InN3aW5nIixhc3BlY3RSYXRpbzpmYWxzZSxhdXRvSGlkZTpmYWxzZSxjb250YWlubWVudDpmYWxzZSxnaG9zdDpmYWxzZSxncmlkOmZhbHNlLGhhbmRsZXM6ImUscyxzZSIsaGVscGVyOmZhbHNlLG1heEhlaWdodDpudWxsLG1heFdpZHRoOm51bGwsbWluSGVpZ2h0OjEwLG1pbldpZHRoOjEwLHpJbmRleDoxRTN9LF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYj10aGlzLGE9dGhpcy5vcHRpb25zO3RoaXMuZWxlbWVudC5hZGRDbGFzcygidWktcmVzaXphYmxlIik7ZC5leHRlbmQodGhpcyx7X2FzcGVjdFJhdGlvOiEhYS5hc3BlY3RSYXRpbyxhc3BlY3RSYXRpbzphLmFzcGVjdFJhdGlvLG9yaWdpbmFsRWxlbWVudDp0aGlzLmVsZW1lbnQsCl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzOltdLF9oZWxwZXI6YS5oZWxwZXJ8fGEuZ2hvc3R8fGEuYW5pbWF0ZT9hLmhlbHBlcnx8InVpLXJlc2l6YWJsZS1oZWxwZXIiOm51bGx9KTtpZih0aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL2NhbnZhc3x0ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9ufGltZy9pKSl7L3JlbGF0aXZlLy50ZXN0KHRoaXMuZWxlbWVudC5jc3MoInBvc2l0aW9uIikpJiZkLmJyb3dzZXIub3BlcmEmJnRoaXMuZWxlbWVudC5jc3Moe3Bvc2l0aW9uOiJyZWxhdGl2ZSIsdG9wOiJhdXRvIixsZWZ0OiJhdXRvIn0pO3RoaXMuZWxlbWVudC53cmFwKGQoJzxkaXYgY2xhc3M9InVpLXdyYXBwZXIiIHN0eWxlPSJvdmVyZmxvdzogaGlkZGVuOyI+PC9kaXY+JykuY3NzKHtwb3NpdGlvbjp0aGlzLmVsZW1lbnQuY3NzKCJwb3NpdGlvbiIpLHdpZHRoOnRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCksaGVpZ2h0OnRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLAp0b3A6dGhpcy5lbGVtZW50LmNzcygidG9wIiksbGVmdDp0aGlzLmVsZW1lbnQuY3NzKCJsZWZ0Iil9KSk7dGhpcy5lbGVtZW50PXRoaXMuZWxlbWVudC5wYXJlbnQoKS5kYXRhKCJyZXNpemFibGUiLHRoaXMuZWxlbWVudC5kYXRhKCJyZXNpemFibGUiKSk7dGhpcy5lbGVtZW50SXNXcmFwcGVyPXRydWU7dGhpcy5lbGVtZW50LmNzcyh7bWFyZ2luTGVmdDp0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIm1hcmdpbkxlZnQiKSxtYXJnaW5Ub3A6dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJtYXJnaW5Ub3AiKSxtYXJnaW5SaWdodDp0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIm1hcmdpblJpZ2h0IiksbWFyZ2luQm90dG9tOnRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygibWFyZ2luQm90dG9tIil9KTt0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe21hcmdpbkxlZnQ6MCxtYXJnaW5Ub3A6MCxtYXJnaW5SaWdodDowLG1hcmdpbkJvdHRvbTowfSk7dGhpcy5vcmlnaW5hbFJlc2l6ZVN0eWxlPQp0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoInJlc2l6ZSIpO3RoaXMub3JpZ2luYWxFbGVtZW50LmNzcygicmVzaXplIiwibm9uZSIpO3RoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMucHVzaCh0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe3Bvc2l0aW9uOiJzdGF0aWMiLHpvb206MSxkaXNwbGF5OiJibG9jayJ9KSk7dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKHttYXJnaW46dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJtYXJnaW4iKX0pO3RoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCl9dGhpcy5oYW5kbGVzPWEuaGFuZGxlc3x8KCFkKCIudWktcmVzaXphYmxlLWhhbmRsZSIsdGhpcy5lbGVtZW50KS5sZW5ndGg/ImUscyxzZSI6e246Ii51aS1yZXNpemFibGUtbiIsZToiLnVpLXJlc2l6YWJsZS1lIixzOiIudWktcmVzaXphYmxlLXMiLHc6Ii51aS1yZXNpemFibGUtdyIsc2U6Ii51aS1yZXNpemFibGUtc2UiLHN3OiIudWktcmVzaXphYmxlLXN3IixuZToiLnVpLXJlc2l6YWJsZS1uZSIsCm53OiIudWktcmVzaXphYmxlLW53In0pO2lmKHRoaXMuaGFuZGxlcy5jb25zdHJ1Y3Rvcj09U3RyaW5nKXtpZih0aGlzLmhhbmRsZXM9PSJhbGwiKXRoaXMuaGFuZGxlcz0ibixlLHMsdyxzZSxzdyxuZSxudyI7dmFyIGM9dGhpcy5oYW5kbGVzLnNwbGl0KCIsIik7dGhpcy5oYW5kbGVzPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZz1kLnRyaW0oY1tlXSksZj1kKCc8ZGl2IGNsYXNzPSJ1aS1yZXNpemFibGUtaGFuZGxlICcrKCJ1aS1yZXNpemFibGUtIitnKSsnIj48L2Rpdj4nKTsvc3d8c2V8bmV8bncvLnRlc3QoZykmJmYuY3NzKHt6SW5kZXg6KythLnpJbmRleH0pOyJzZSI9PWcmJmYuYWRkQ2xhc3MoInVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtc2UiKTt0aGlzLmhhbmRsZXNbZ109Ii51aS1yZXNpemFibGUtIitnO3RoaXMuZWxlbWVudC5hcHBlbmQoZil9fXRoaXMuX3JlbmRlckF4aXM9ZnVuY3Rpb24oaCl7aD1ofHx0aGlzLmVsZW1lbnQ7Zm9yKHZhciBpIGluIHRoaXMuaGFuZGxlcyl7aWYodGhpcy5oYW5kbGVzW2ldLmNvbnN0cnVjdG9yPT0KU3RyaW5nKXRoaXMuaGFuZGxlc1tpXT1kKHRoaXMuaGFuZGxlc1tpXSx0aGlzLmVsZW1lbnQpLnNob3coKTtpZih0aGlzLmVsZW1lbnRJc1dyYXBwZXImJnRoaXMub3JpZ2luYWxFbGVtZW50WzBdLm5vZGVOYW1lLm1hdGNoKC90ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9uL2kpKXt2YXIgaj1kKHRoaXMuaGFuZGxlc1tpXSx0aGlzLmVsZW1lbnQpLGw9MDtsPS9zd3xuZXxud3xzZXxufHMvLnRlc3QoaSk/ai5vdXRlckhlaWdodCgpOmoub3V0ZXJXaWR0aCgpO2o9WyJwYWRkaW5nIiwvbmV8bnd8bi8udGVzdChpKT8iVG9wIjovc2V8c3d8cy8udGVzdChpKT8iQm90dG9tIjovXmUkLy50ZXN0KGkpPyJSaWdodCI6IkxlZnQiXS5qb2luKCIiKTtoLmNzcyhqLGwpO3RoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCl9ZCh0aGlzLmhhbmRsZXNbaV0pfX07dGhpcy5fcmVuZGVyQXhpcyh0aGlzLmVsZW1lbnQpO3RoaXMuX2hhbmRsZXM9ZCgiLnVpLXJlc2l6YWJsZS1oYW5kbGUiLHRoaXMuZWxlbWVudCkuZGlzYWJsZVNlbGVjdGlvbigpOwp0aGlzLl9oYW5kbGVzLm1vdXNlb3ZlcihmdW5jdGlvbigpe2lmKCFiLnJlc2l6aW5nKXtpZih0aGlzLmNsYXNzTmFtZSl2YXIgaD10aGlzLmNsYXNzTmFtZS5tYXRjaCgvdWktcmVzaXphYmxlLShzZXxzd3xuZXxud3xufGV8c3x3KS9pKTtiLmF4aXM9aCYmaFsxXT9oWzFdOiJzZSJ9fSk7aWYoYS5hdXRvSGlkZSl7dGhpcy5faGFuZGxlcy5oaWRlKCk7ZCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKCJ1aS1yZXNpemFibGUtYXV0b2hpZGUiKS5ob3ZlcihmdW5jdGlvbigpe2QodGhpcykucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpO2IuX2hhbmRsZXMuc2hvdygpfSxmdW5jdGlvbigpe2lmKCFiLnJlc2l6aW5nKXtkKHRoaXMpLmFkZENsYXNzKCJ1aS1yZXNpemFibGUtYXV0b2hpZGUiKTtiLl9oYW5kbGVzLmhpZGUoKX19KX10aGlzLl9tb3VzZUluaXQoKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX21vdXNlRGVzdHJveSgpO3ZhciBiPWZ1bmN0aW9uKGMpe2QoYykucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZSB1aS1yZXNpemFibGUtZGlzYWJsZWQgdWktcmVzaXphYmxlLXJlc2l6aW5nIikucmVtb3ZlRGF0YSgicmVzaXphYmxlIikudW5iaW5kKCIucmVzaXphYmxlIikuZmluZCgiLnVpLXJlc2l6YWJsZS1oYW5kbGUiKS5yZW1vdmUoKX07CmlmKHRoaXMuZWxlbWVudElzV3JhcHBlcil7Yih0aGlzLmVsZW1lbnQpO3ZhciBhPXRoaXMuZWxlbWVudDthLmFmdGVyKHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyh7cG9zaXRpb246YS5jc3MoInBvc2l0aW9uIiksd2lkdGg6YS5vdXRlcldpZHRoKCksaGVpZ2h0OmEub3V0ZXJIZWlnaHQoKSx0b3A6YS5jc3MoInRvcCIpLGxlZnQ6YS5jc3MoImxlZnQiKX0pKS5yZW1vdmUoKX10aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoInJlc2l6ZSIsdGhpcy5vcmlnaW5hbFJlc2l6ZVN0eWxlKTtiKHRoaXMub3JpZ2luYWxFbGVtZW50KTtyZXR1cm4gdGhpc30sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbihiKXt2YXIgYT1mYWxzZTtmb3IodmFyIGMgaW4gdGhpcy5oYW5kbGVzKWlmKGQodGhpcy5oYW5kbGVzW2NdKVswXT09Yi50YXJnZXQpYT10cnVlO3JldHVybiF0aGlzLm9wdGlvbnMuZGlzYWJsZWQmJmF9LF9tb3VzZVN0YXJ0OmZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMub3B0aW9ucyxjPXRoaXMuZWxlbWVudC5wb3NpdGlvbigpLAplPXRoaXMuZWxlbWVudDt0aGlzLnJlc2l6aW5nPXRydWU7dGhpcy5kb2N1bWVudFNjcm9sbD17dG9wOmQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpLGxlZnQ6ZChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpfTtpZihlLmlzKCIudWktZHJhZ2dhYmxlIil8fC9hYnNvbHV0ZS8udGVzdChlLmNzcygicG9zaXRpb24iKSkpZS5jc3Moe3Bvc2l0aW9uOiJhYnNvbHV0ZSIsdG9wOmMudG9wLGxlZnQ6Yy5sZWZ0fSk7ZC5icm93c2VyLm9wZXJhJiYvcmVsYXRpdmUvLnRlc3QoZS5jc3MoInBvc2l0aW9uIikpJiZlLmNzcyh7cG9zaXRpb246InJlbGF0aXZlIix0b3A6ImF1dG8iLGxlZnQ6ImF1dG8ifSk7dGhpcy5fcmVuZGVyUHJveHkoKTtjPW0odGhpcy5oZWxwZXIuY3NzKCJsZWZ0IikpO3ZhciBnPW0odGhpcy5oZWxwZXIuY3NzKCJ0b3AiKSk7aWYoYS5jb250YWlubWVudCl7Yys9ZChhLmNvbnRhaW5tZW50KS5zY3JvbGxMZWZ0KCl8fDA7Zys9ZChhLmNvbnRhaW5tZW50KS5zY3JvbGxUb3AoKXx8MH10aGlzLm9mZnNldD0KdGhpcy5oZWxwZXIub2Zmc2V0KCk7dGhpcy5wb3NpdGlvbj17bGVmdDpjLHRvcDpnfTt0aGlzLnNpemU9dGhpcy5faGVscGVyP3t3aWR0aDplLm91dGVyV2lkdGgoKSxoZWlnaHQ6ZS5vdXRlckhlaWdodCgpfTp7d2lkdGg6ZS53aWR0aCgpLGhlaWdodDplLmhlaWdodCgpfTt0aGlzLm9yaWdpbmFsU2l6ZT10aGlzLl9oZWxwZXI/e3dpZHRoOmUub3V0ZXJXaWR0aCgpLGhlaWdodDplLm91dGVySGVpZ2h0KCl9Ont3aWR0aDplLndpZHRoKCksaGVpZ2h0OmUuaGVpZ2h0KCl9O3RoaXMub3JpZ2luYWxQb3NpdGlvbj17bGVmdDpjLHRvcDpnfTt0aGlzLnNpemVEaWZmPXt3aWR0aDplLm91dGVyV2lkdGgoKS1lLndpZHRoKCksaGVpZ2h0OmUub3V0ZXJIZWlnaHQoKS1lLmhlaWdodCgpfTt0aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbj17bGVmdDpiLnBhZ2VYLHRvcDpiLnBhZ2VZfTt0aGlzLmFzcGVjdFJhdGlvPXR5cGVvZiBhLmFzcGVjdFJhdGlvPT0ibnVtYmVyIj9hLmFzcGVjdFJhdGlvOgp0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aC90aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHR8fDE7YT1kKCIudWktcmVzaXphYmxlLSIrdGhpcy5heGlzKS5jc3MoImN1cnNvciIpO2QoImJvZHkiKS5jc3MoImN1cnNvciIsYT09ImF1dG8iP3RoaXMuYXhpcysiLXJlc2l6ZSI6YSk7ZS5hZGRDbGFzcygidWktcmVzaXphYmxlLXJlc2l6aW5nIik7dGhpcy5fcHJvcGFnYXRlKCJzdGFydCIsYik7cmV0dXJuIHRydWV9LF9tb3VzZURyYWc6ZnVuY3Rpb24oYil7dmFyIGE9dGhpcy5oZWxwZXIsYz10aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbixlPXRoaXMuX2NoYW5nZVt0aGlzLmF4aXNdO2lmKCFlKXJldHVybiBmYWxzZTtjPWUuYXBwbHkodGhpcyxbYixiLnBhZ2VYLWMubGVmdHx8MCxiLnBhZ2VZLWMudG9wfHwwXSk7aWYodGhpcy5fYXNwZWN0UmF0aW98fGIuc2hpZnRLZXkpYz10aGlzLl91cGRhdGVSYXRpbyhjLGIpO2M9dGhpcy5fcmVzcGVjdFNpemUoYyxiKTt0aGlzLl9wcm9wYWdhdGUoInJlc2l6ZSIsCmIpO2EuY3NzKHt0b3A6dGhpcy5wb3NpdGlvbi50b3ArInB4IixsZWZ0OnRoaXMucG9zaXRpb24ubGVmdCsicHgiLHdpZHRoOnRoaXMuc2l6ZS53aWR0aCsicHgiLGhlaWdodDp0aGlzLnNpemUuaGVpZ2h0KyJweCJ9KTshdGhpcy5faGVscGVyJiZ0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aCYmdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTt0aGlzLl91cGRhdGVDYWNoZShjKTt0aGlzLl90cmlnZ2VyKCJyZXNpemUiLGIsdGhpcy51aSgpKTtyZXR1cm4gZmFsc2V9LF9tb3VzZVN0b3A6ZnVuY3Rpb24oYil7dGhpcy5yZXNpemluZz1mYWxzZTt2YXIgYT10aGlzLm9wdGlvbnMsYz10aGlzO2lmKHRoaXMuX2hlbHBlcil7dmFyIGU9dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cyxnPWUubGVuZ3RoJiYvdGV4dGFyZWEvaS50ZXN0KGVbMF0ubm9kZU5hbWUpO2U9ZyYmZC51aS5oYXNTY3JvbGwoZVswXSwibGVmdCIpPzA6Yy5zaXplRGlmZi5oZWlnaHQ7Cmc9e3dpZHRoOmMuc2l6ZS53aWR0aC0oZz8wOmMuc2l6ZURpZmYud2lkdGgpLGhlaWdodDpjLnNpemUuaGVpZ2h0LWV9O2U9cGFyc2VJbnQoYy5lbGVtZW50LmNzcygibGVmdCIpLDEwKSsoYy5wb3NpdGlvbi5sZWZ0LWMub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KXx8bnVsbDt2YXIgZj1wYXJzZUludChjLmVsZW1lbnQuY3NzKCJ0b3AiKSwxMCkrKGMucG9zaXRpb24udG9wLWMub3JpZ2luYWxQb3NpdGlvbi50b3ApfHxudWxsO2EuYW5pbWF0ZXx8dGhpcy5lbGVtZW50LmNzcyhkLmV4dGVuZChnLHt0b3A6ZixsZWZ0OmV9KSk7Yy5oZWxwZXIuaGVpZ2h0KGMuc2l6ZS5oZWlnaHQpO2MuaGVscGVyLndpZHRoKGMuc2l6ZS53aWR0aCk7dGhpcy5faGVscGVyJiYhYS5hbmltYXRlJiZ0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpfWQoImJvZHkiKS5jc3MoImN1cnNvciIsImF1dG8iKTt0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZS1yZXNpemluZyIpO3RoaXMuX3Byb3BhZ2F0ZSgic3RvcCIsCmIpO3RoaXMuX2hlbHBlciYmdGhpcy5oZWxwZXIucmVtb3ZlKCk7cmV0dXJuIGZhbHNlfSxfdXBkYXRlQ2FjaGU6ZnVuY3Rpb24oYil7dGhpcy5vZmZzZXQ9dGhpcy5oZWxwZXIub2Zmc2V0KCk7aWYoayhiLmxlZnQpKXRoaXMucG9zaXRpb24ubGVmdD1iLmxlZnQ7aWYoayhiLnRvcCkpdGhpcy5wb3NpdGlvbi50b3A9Yi50b3A7aWYoayhiLmhlaWdodCkpdGhpcy5zaXplLmhlaWdodD1iLmhlaWdodDtpZihrKGIud2lkdGgpKXRoaXMuc2l6ZS53aWR0aD1iLndpZHRofSxfdXBkYXRlUmF0aW86ZnVuY3Rpb24oYil7dmFyIGE9dGhpcy5wb3NpdGlvbixjPXRoaXMuc2l6ZSxlPXRoaXMuYXhpcztpZihiLmhlaWdodCliLndpZHRoPWMuaGVpZ2h0KnRoaXMuYXNwZWN0UmF0aW87ZWxzZSBpZihiLndpZHRoKWIuaGVpZ2h0PWMud2lkdGgvdGhpcy5hc3BlY3RSYXRpbztpZihlPT0ic3ciKXtiLmxlZnQ9YS5sZWZ0KyhjLndpZHRoLWIud2lkdGgpO2IudG9wPW51bGx9aWYoZT09Im53Iil7Yi50b3A9CmEudG9wKyhjLmhlaWdodC1iLmhlaWdodCk7Yi5sZWZ0PWEubGVmdCsoYy53aWR0aC1iLndpZHRoKX1yZXR1cm4gYn0sX3Jlc3BlY3RTaXplOmZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMub3B0aW9ucyxjPXRoaXMuYXhpcyxlPWsoYi53aWR0aCkmJmEubWF4V2lkdGgmJmEubWF4V2lkdGg8Yi53aWR0aCxnPWsoYi5oZWlnaHQpJiZhLm1heEhlaWdodCYmYS5tYXhIZWlnaHQ8Yi5oZWlnaHQsZj1rKGIud2lkdGgpJiZhLm1pbldpZHRoJiZhLm1pbldpZHRoPmIud2lkdGgsaD1rKGIuaGVpZ2h0KSYmYS5taW5IZWlnaHQmJmEubWluSGVpZ2h0PmIuaGVpZ2h0O2lmKGYpYi53aWR0aD1hLm1pbldpZHRoO2lmKGgpYi5oZWlnaHQ9YS5taW5IZWlnaHQ7aWYoZSliLndpZHRoPWEubWF4V2lkdGg7aWYoZyliLmhlaWdodD1hLm1heEhlaWdodDt2YXIgaT10aGlzLm9yaWdpbmFsUG9zaXRpb24ubGVmdCt0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCxqPXRoaXMucG9zaXRpb24udG9wK3RoaXMuc2l6ZS5oZWlnaHQsCmw9L3N3fG53fHcvLnRlc3QoYyk7Yz0vbnd8bmV8bi8udGVzdChjKTtpZihmJiZsKWIubGVmdD1pLWEubWluV2lkdGg7aWYoZSYmbCliLmxlZnQ9aS1hLm1heFdpZHRoO2lmKGgmJmMpYi50b3A9ai1hLm1pbkhlaWdodDtpZihnJiZjKWIudG9wPWotYS5tYXhIZWlnaHQ7aWYoKGE9IWIud2lkdGgmJiFiLmhlaWdodCkmJiFiLmxlZnQmJmIudG9wKWIudG9wPW51bGw7ZWxzZSBpZihhJiYhYi50b3AmJmIubGVmdCliLmxlZnQ9bnVsbDtyZXR1cm4gYn0sX3Byb3BvcnRpb25hbGx5UmVzaXplOmZ1bmN0aW9uKCl7aWYodGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGgpZm9yKHZhciBiPXRoaXMuaGVscGVyfHx0aGlzLmVsZW1lbnQsYT0wO2E8dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGg7YSsrKXt2YXIgYz10aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzW2FdO2lmKCF0aGlzLmJvcmRlckRpZil7dmFyIGU9W2MuY3NzKCJib3JkZXJUb3BXaWR0aCIpLApjLmNzcygiYm9yZGVyUmlnaHRXaWR0aCIpLGMuY3NzKCJib3JkZXJCb3R0b21XaWR0aCIpLGMuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKV0sZz1bYy5jc3MoInBhZGRpbmdUb3AiKSxjLmNzcygicGFkZGluZ1JpZ2h0IiksYy5jc3MoInBhZGRpbmdCb3R0b20iKSxjLmNzcygicGFkZGluZ0xlZnQiKV07dGhpcy5ib3JkZXJEaWY9ZC5tYXAoZSxmdW5jdGlvbihmLGgpe2Y9cGFyc2VJbnQoZiwxMCl8fDA7aD1wYXJzZUludChnW2hdLDEwKXx8MDtyZXR1cm4gZitofSl9ZC5icm93c2VyLm1zaWUmJihkKGIpLmlzKCI6aGlkZGVuIil8fGQoYikucGFyZW50cygiOmhpZGRlbiIpLmxlbmd0aCl8fGMuY3NzKHtoZWlnaHQ6Yi5oZWlnaHQoKS10aGlzLmJvcmRlckRpZlswXS10aGlzLmJvcmRlckRpZlsyXXx8MCx3aWR0aDpiLndpZHRoKCktdGhpcy5ib3JkZXJEaWZbMV0tdGhpcy5ib3JkZXJEaWZbM118fDB9KX19LF9yZW5kZXJQcm94eTpmdW5jdGlvbigpe3ZhciBiPXRoaXMub3B0aW9uczt0aGlzLmVsZW1lbnRPZmZzZXQ9CnRoaXMuZWxlbWVudC5vZmZzZXQoKTtpZih0aGlzLl9oZWxwZXIpe3RoaXMuaGVscGVyPXRoaXMuaGVscGVyfHxkKCc8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW47Ij48L2Rpdj4nKTt2YXIgYT1kLmJyb3dzZXIubXNpZSYmZC5icm93c2VyLnZlcnNpb248NyxjPWE/MTowO2E9YT8yOi0xO3RoaXMuaGVscGVyLmFkZENsYXNzKHRoaXMuX2hlbHBlcikuY3NzKHt3aWR0aDp0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpK2EsaGVpZ2h0OnRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpK2EscG9zaXRpb246ImFic29sdXRlIixsZWZ0OnRoaXMuZWxlbWVudE9mZnNldC5sZWZ0LWMrInB4Iix0b3A6dGhpcy5lbGVtZW50T2Zmc2V0LnRvcC1jKyJweCIsekluZGV4OisrYi56SW5kZXh9KTt0aGlzLmhlbHBlci5hcHBlbmRUbygiYm9keSIpLmRpc2FibGVTZWxlY3Rpb24oKX1lbHNlIHRoaXMuaGVscGVyPXRoaXMuZWxlbWVudH0sX2NoYW5nZTp7ZTpmdW5jdGlvbihiLGEpe3JldHVybnt3aWR0aDp0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCsKYX19LHc6ZnVuY3Rpb24oYixhKXtyZXR1cm57bGVmdDp0aGlzLm9yaWdpbmFsUG9zaXRpb24ubGVmdCthLHdpZHRoOnRoaXMub3JpZ2luYWxTaXplLndpZHRoLWF9fSxuOmZ1bmN0aW9uKGIsYSxjKXtyZXR1cm57dG9wOnRoaXMub3JpZ2luYWxQb3NpdGlvbi50b3ArYyxoZWlnaHQ6dGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0LWN9fSxzOmZ1bmN0aW9uKGIsYSxjKXtyZXR1cm57aGVpZ2h0OnRoaXMub3JpZ2luYWxTaXplLmhlaWdodCtjfX0sc2U6ZnVuY3Rpb24oYixhLGMpe3JldHVybiBkLmV4dGVuZCh0aGlzLl9jaGFuZ2Uucy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5fY2hhbmdlLmUuYXBwbHkodGhpcyxbYixhLGNdKSl9LHN3OmZ1bmN0aW9uKGIsYSxjKXtyZXR1cm4gZC5leHRlbmQodGhpcy5fY2hhbmdlLnMuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2NoYW5nZS53LmFwcGx5KHRoaXMsW2IsYSxjXSkpfSxuZTpmdW5jdGlvbihiLGEsYyl7cmV0dXJuIGQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsCmFyZ3VtZW50cyksdGhpcy5fY2hhbmdlLmUuYXBwbHkodGhpcyxbYixhLGNdKSl9LG53OmZ1bmN0aW9uKGIsYSxjKXtyZXR1cm4gZC5leHRlbmQodGhpcy5fY2hhbmdlLm4uYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2NoYW5nZS53LmFwcGx5KHRoaXMsW2IsYSxjXSkpfX0sX3Byb3BhZ2F0ZTpmdW5jdGlvbihiLGEpe2QudWkucGx1Z2luLmNhbGwodGhpcyxiLFthLHRoaXMudWkoKV0pO2IhPSJyZXNpemUiJiZ0aGlzLl90cmlnZ2VyKGIsYSx0aGlzLnVpKCkpfSxwbHVnaW5zOnt9LHVpOmZ1bmN0aW9uKCl7cmV0dXJue29yaWdpbmFsRWxlbWVudDp0aGlzLm9yaWdpbmFsRWxlbWVudCxlbGVtZW50OnRoaXMuZWxlbWVudCxoZWxwZXI6dGhpcy5oZWxwZXIscG9zaXRpb246dGhpcy5wb3NpdGlvbixzaXplOnRoaXMuc2l6ZSxvcmlnaW5hbFNpemU6dGhpcy5vcmlnaW5hbFNpemUsb3JpZ2luYWxQb3NpdGlvbjp0aGlzLm9yaWdpbmFsUG9zaXRpb259fX0pO2QuZXh0ZW5kKGQudWkucmVzaXphYmxlLAp7dmVyc2lvbjoiMS44LjEifSk7ZC51aS5wbHVnaW4uYWRkKCJyZXNpemFibGUiLCJhbHNvUmVzaXplIix7c3RhcnQ6ZnVuY3Rpb24oKXt2YXIgYj1kKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLm9wdGlvbnMsYT1mdW5jdGlvbihjKXtkKGMpLmVhY2goZnVuY3Rpb24oKXtkKHRoaXMpLmRhdGEoInJlc2l6YWJsZS1hbHNvcmVzaXplIix7d2lkdGg6cGFyc2VJbnQoZCh0aGlzKS53aWR0aCgpLDEwKSxoZWlnaHQ6cGFyc2VJbnQoZCh0aGlzKS5oZWlnaHQoKSwxMCksbGVmdDpwYXJzZUludChkKHRoaXMpLmNzcygibGVmdCIpLDEwKSx0b3A6cGFyc2VJbnQoZCh0aGlzKS5jc3MoInRvcCIpLDEwKX0pfSl9O2lmKHR5cGVvZiBiLmFsc29SZXNpemU9PSJvYmplY3QiJiYhYi5hbHNvUmVzaXplLnBhcmVudE5vZGUpaWYoYi5hbHNvUmVzaXplLmxlbmd0aCl7Yi5hbHNvUmVzaXplPWIuYWxzb1Jlc2l6ZVswXTthKGIuYWxzb1Jlc2l6ZSl9ZWxzZSBkLmVhY2goYi5hbHNvUmVzaXplLGZ1bmN0aW9uKGMpe2EoYyl9KTsKZWxzZSBhKGIuYWxzb1Jlc2l6ZSl9LHJlc2l6ZTpmdW5jdGlvbigpe3ZhciBiPWQodGhpcykuZGF0YSgicmVzaXphYmxlIiksYT1iLm9wdGlvbnMsYz1iLm9yaWdpbmFsU2l6ZSxlPWIub3JpZ2luYWxQb3NpdGlvbixnPXtoZWlnaHQ6Yi5zaXplLmhlaWdodC1jLmhlaWdodHx8MCx3aWR0aDpiLnNpemUud2lkdGgtYy53aWR0aHx8MCx0b3A6Yi5wb3NpdGlvbi50b3AtZS50b3B8fDAsbGVmdDpiLnBvc2l0aW9uLmxlZnQtZS5sZWZ0fHwwfSxmPWZ1bmN0aW9uKGgsaSl7ZChoKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGo9ZCh0aGlzKSxsPWQodGhpcykuZGF0YSgicmVzaXphYmxlLWFsc29yZXNpemUiKSxwPXt9O2QuZWFjaCgoaSYmaS5sZW5ndGg/aTpbIndpZHRoIiwiaGVpZ2h0IiwidG9wIiwibGVmdCJdKXx8WyJ3aWR0aCIsImhlaWdodCIsInRvcCIsImxlZnQiXSxmdW5jdGlvbihuLG8pe2lmKChuPShsW29dfHwwKSsoZ1tvXXx8MCkpJiZuPj0wKXBbb109bnx8bnVsbH0pO2lmKC9yZWxhdGl2ZS8udGVzdChqLmNzcygicG9zaXRpb24iKSkmJgpkLmJyb3dzZXIub3BlcmEpe2IuX3JldmVydFRvUmVsYXRpdmVQb3NpdGlvbj10cnVlO2ouY3NzKHtwb3NpdGlvbjoiYWJzb2x1dGUiLHRvcDoiYXV0byIsbGVmdDoiYXV0byJ9KX1qLmNzcyhwKX0pfTt0eXBlb2YgYS5hbHNvUmVzaXplPT0ib2JqZWN0IiYmIWEuYWxzb1Jlc2l6ZS5ub2RlVHlwZT9kLmVhY2goYS5hbHNvUmVzaXplLGZ1bmN0aW9uKGgsaSl7ZihoLGkpfSk6ZihhLmFsc29SZXNpemUpfSxzdG9wOmZ1bmN0aW9uKCl7dmFyIGI9ZCh0aGlzKS5kYXRhKCJyZXNpemFibGUiKTtpZihiLl9yZXZlcnRUb1JlbGF0aXZlUG9zaXRpb24mJmQuYnJvd3Nlci5vcGVyYSl7Yi5fcmV2ZXJ0VG9SZWxhdGl2ZVBvc2l0aW9uPWZhbHNlO2VsLmNzcyh7cG9zaXRpb246InJlbGF0aXZlIn0pfWQodGhpcykucmVtb3ZlRGF0YSgicmVzaXphYmxlLWFsc29yZXNpemUtc3RhcnQiKX19KTtkLnVpLnBsdWdpbi5hZGQoInJlc2l6YWJsZSIsImFuaW1hdGUiLHtzdG9wOmZ1bmN0aW9uKGIpe3ZhciBhPQpkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLGM9YS5vcHRpb25zLGU9YS5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cyxnPWUubGVuZ3RoJiYvdGV4dGFyZWEvaS50ZXN0KGVbMF0ubm9kZU5hbWUpLGY9ZyYmZC51aS5oYXNTY3JvbGwoZVswXSwibGVmdCIpPzA6YS5zaXplRGlmZi5oZWlnaHQ7Zz17d2lkdGg6YS5zaXplLndpZHRoLShnPzA6YS5zaXplRGlmZi53aWR0aCksaGVpZ2h0OmEuc2l6ZS5oZWlnaHQtZn07Zj1wYXJzZUludChhLmVsZW1lbnQuY3NzKCJsZWZ0IiksMTApKyhhLnBvc2l0aW9uLmxlZnQtYS5vcmlnaW5hbFBvc2l0aW9uLmxlZnQpfHxudWxsO3ZhciBoPXBhcnNlSW50KGEuZWxlbWVudC5jc3MoInRvcCIpLDEwKSsoYS5wb3NpdGlvbi50b3AtYS5vcmlnaW5hbFBvc2l0aW9uLnRvcCl8fG51bGw7YS5lbGVtZW50LmFuaW1hdGUoZC5leHRlbmQoZyxoJiZmP3t0b3A6aCxsZWZ0OmZ9Ont9KSx7ZHVyYXRpb246Yy5hbmltYXRlRHVyYXRpb24sZWFzaW5nOmMuYW5pbWF0ZUVhc2luZywKc3RlcDpmdW5jdGlvbigpe3ZhciBpPXt3aWR0aDpwYXJzZUludChhLmVsZW1lbnQuY3NzKCJ3aWR0aCIpLDEwKSxoZWlnaHQ6cGFyc2VJbnQoYS5lbGVtZW50LmNzcygiaGVpZ2h0IiksMTApLHRvcDpwYXJzZUludChhLmVsZW1lbnQuY3NzKCJ0b3AiKSwxMCksbGVmdDpwYXJzZUludChhLmVsZW1lbnQuY3NzKCJsZWZ0IiksMTApfTtlJiZlLmxlbmd0aCYmZChlWzBdKS5jc3Moe3dpZHRoOmkud2lkdGgsaGVpZ2h0OmkuaGVpZ2h0fSk7YS5fdXBkYXRlQ2FjaGUoaSk7YS5fcHJvcGFnYXRlKCJyZXNpemUiLGIpfX0pfX0pO2QudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwiY29udGFpbm1lbnQiLHtzdGFydDpmdW5jdGlvbigpe3ZhciBiPWQodGhpcykuZGF0YSgicmVzaXphYmxlIiksYT1iLmVsZW1lbnQsYz1iLm9wdGlvbnMuY29udGFpbm1lbnQ7aWYoYT1jIGluc3RhbmNlb2YgZD9jLmdldCgwKTovcGFyZW50Ly50ZXN0KGMpP2EucGFyZW50KCkuZ2V0KDApOmMpe2IuY29udGFpbmVyRWxlbWVudD0KZChhKTtpZigvZG9jdW1lbnQvLnRlc3QoYyl8fGM9PWRvY3VtZW50KXtiLmNvbnRhaW5lck9mZnNldD17bGVmdDowLHRvcDowfTtiLmNvbnRhaW5lclBvc2l0aW9uPXtsZWZ0OjAsdG9wOjB9O2IucGFyZW50RGF0YT17ZWxlbWVudDpkKGRvY3VtZW50KSxsZWZ0OjAsdG9wOjAsd2lkdGg6ZChkb2N1bWVudCkud2lkdGgoKSxoZWlnaHQ6ZChkb2N1bWVudCkuaGVpZ2h0KCl8fGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHR9fWVsc2V7dmFyIGU9ZChhKSxnPVtdO2QoWyJUb3AiLCJSaWdodCIsIkxlZnQiLCJCb3R0b20iXSkuZWFjaChmdW5jdGlvbihpLGope2dbaV09bShlLmNzcygicGFkZGluZyIraikpfSk7Yi5jb250YWluZXJPZmZzZXQ9ZS5vZmZzZXQoKTtiLmNvbnRhaW5lclBvc2l0aW9uPWUucG9zaXRpb24oKTtiLmNvbnRhaW5lclNpemU9e2hlaWdodDplLmlubmVySGVpZ2h0KCktZ1szXSx3aWR0aDplLmlubmVyV2lkdGgoKS1nWzFdfTtjPWIuY29udGFpbmVyT2Zmc2V0Owp2YXIgZj1iLmNvbnRhaW5lclNpemUuaGVpZ2h0LGg9Yi5jb250YWluZXJTaXplLndpZHRoO2g9ZC51aS5oYXNTY3JvbGwoYSwibGVmdCIpP2Euc2Nyb2xsV2lkdGg6aDtmPWQudWkuaGFzU2Nyb2xsKGEpP2Euc2Nyb2xsSGVpZ2h0OmY7Yi5wYXJlbnREYXRhPXtlbGVtZW50OmEsbGVmdDpjLmxlZnQsdG9wOmMudG9wLHdpZHRoOmgsaGVpZ2h0OmZ9fX19LHJlc2l6ZTpmdW5jdGlvbihiKXt2YXIgYT1kKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLGM9YS5vcHRpb25zLGU9YS5jb250YWluZXJPZmZzZXQsZz1hLnBvc2l0aW9uO2I9YS5fYXNwZWN0UmF0aW98fGIuc2hpZnRLZXk7dmFyIGY9e3RvcDowLGxlZnQ6MH0saD1hLmNvbnRhaW5lckVsZW1lbnQ7aWYoaFswXSE9ZG9jdW1lbnQmJi9zdGF0aWMvLnRlc3QoaC5jc3MoInBvc2l0aW9uIikpKWY9ZTtpZihnLmxlZnQ8KGEuX2hlbHBlcj9lLmxlZnQ6MCkpe2Euc2l6ZS53aWR0aCs9YS5faGVscGVyP2EucG9zaXRpb24ubGVmdC1lLmxlZnQ6CmEucG9zaXRpb24ubGVmdC1mLmxlZnQ7aWYoYilhLnNpemUuaGVpZ2h0PWEuc2l6ZS53aWR0aC9jLmFzcGVjdFJhdGlvO2EucG9zaXRpb24ubGVmdD1jLmhlbHBlcj9lLmxlZnQ6MH1pZihnLnRvcDwoYS5faGVscGVyP2UudG9wOjApKXthLnNpemUuaGVpZ2h0Kz1hLl9oZWxwZXI/YS5wb3NpdGlvbi50b3AtZS50b3A6YS5wb3NpdGlvbi50b3A7aWYoYilhLnNpemUud2lkdGg9YS5zaXplLmhlaWdodCpjLmFzcGVjdFJhdGlvO2EucG9zaXRpb24udG9wPWEuX2hlbHBlcj9lLnRvcDowfWEub2Zmc2V0LmxlZnQ9YS5wYXJlbnREYXRhLmxlZnQrYS5wb3NpdGlvbi5sZWZ0O2Eub2Zmc2V0LnRvcD1hLnBhcmVudERhdGEudG9wK2EucG9zaXRpb24udG9wO2M9TWF0aC5hYnMoKGEuX2hlbHBlcj9hLm9mZnNldC5sZWZ0LWYubGVmdDphLm9mZnNldC5sZWZ0LWYubGVmdCkrYS5zaXplRGlmZi53aWR0aCk7ZT1NYXRoLmFicygoYS5faGVscGVyP2Eub2Zmc2V0LnRvcC1mLnRvcDphLm9mZnNldC50b3AtCmUudG9wKSthLnNpemVEaWZmLmhlaWdodCk7Zz1hLmNvbnRhaW5lckVsZW1lbnQuZ2V0KDApPT1hLmVsZW1lbnQucGFyZW50KCkuZ2V0KDApO2Y9L3JlbGF0aXZlfGFic29sdXRlLy50ZXN0KGEuY29udGFpbmVyRWxlbWVudC5jc3MoInBvc2l0aW9uIikpO2lmKGcmJmYpYy09YS5wYXJlbnREYXRhLmxlZnQ7aWYoYythLnNpemUud2lkdGg+PWEucGFyZW50RGF0YS53aWR0aCl7YS5zaXplLndpZHRoPWEucGFyZW50RGF0YS53aWR0aC1jO2lmKGIpYS5zaXplLmhlaWdodD1hLnNpemUud2lkdGgvYS5hc3BlY3RSYXRpb31pZihlK2Euc2l6ZS5oZWlnaHQ+PWEucGFyZW50RGF0YS5oZWlnaHQpe2Euc2l6ZS5oZWlnaHQ9YS5wYXJlbnREYXRhLmhlaWdodC1lO2lmKGIpYS5zaXplLndpZHRoPWEuc2l6ZS5oZWlnaHQqYS5hc3BlY3RSYXRpb319LHN0b3A6ZnVuY3Rpb24oKXt2YXIgYj1kKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLGE9Yi5vcHRpb25zLGM9Yi5jb250YWluZXJPZmZzZXQsZT1iLmNvbnRhaW5lclBvc2l0aW9uLApnPWIuY29udGFpbmVyRWxlbWVudCxmPWQoYi5oZWxwZXIpLGg9Zi5vZmZzZXQoKSxpPWYub3V0ZXJXaWR0aCgpLWIuc2l6ZURpZmYud2lkdGg7Zj1mLm91dGVySGVpZ2h0KCktYi5zaXplRGlmZi5oZWlnaHQ7Yi5faGVscGVyJiYhYS5hbmltYXRlJiYvcmVsYXRpdmUvLnRlc3QoZy5jc3MoInBvc2l0aW9uIikpJiZkKHRoaXMpLmNzcyh7bGVmdDpoLmxlZnQtZS5sZWZ0LWMubGVmdCx3aWR0aDppLGhlaWdodDpmfSk7Yi5faGVscGVyJiYhYS5hbmltYXRlJiYvc3RhdGljLy50ZXN0KGcuY3NzKCJwb3NpdGlvbiIpKSYmZCh0aGlzKS5jc3Moe2xlZnQ6aC5sZWZ0LWUubGVmdC1jLmxlZnQsd2lkdGg6aSxoZWlnaHQ6Zn0pfX0pO2QudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwiZ2hvc3QiLHtzdGFydDpmdW5jdGlvbigpe3ZhciBiPWQodGhpcykuZGF0YSgicmVzaXphYmxlIiksYT1iLm9wdGlvbnMsYz1iLnNpemU7Yi5naG9zdD1iLm9yaWdpbmFsRWxlbWVudC5jbG9uZSgpO2IuZ2hvc3QuY3NzKHtvcGFjaXR5OjAuMjUsCmRpc3BsYXk6ImJsb2NrIixwb3NpdGlvbjoicmVsYXRpdmUiLGhlaWdodDpjLmhlaWdodCx3aWR0aDpjLndpZHRoLG1hcmdpbjowLGxlZnQ6MCx0b3A6MH0pLmFkZENsYXNzKCJ1aS1yZXNpemFibGUtZ2hvc3QiKS5hZGRDbGFzcyh0eXBlb2YgYS5naG9zdD09InN0cmluZyI/YS5naG9zdDoiIik7Yi5naG9zdC5hcHBlbmRUbyhiLmhlbHBlcil9LHJlc2l6ZTpmdW5jdGlvbigpe3ZhciBiPWQodGhpcykuZGF0YSgicmVzaXphYmxlIik7Yi5naG9zdCYmYi5naG9zdC5jc3Moe3Bvc2l0aW9uOiJyZWxhdGl2ZSIsaGVpZ2h0OmIuc2l6ZS5oZWlnaHQsd2lkdGg6Yi5zaXplLndpZHRofSl9LHN0b3A6ZnVuY3Rpb24oKXt2YXIgYj1kKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpO2IuZ2hvc3QmJmIuaGVscGVyJiZiLmhlbHBlci5nZXQoMCkucmVtb3ZlQ2hpbGQoYi5naG9zdC5nZXQoMCkpfX0pO2QudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwiZ3JpZCIse3Jlc2l6ZTpmdW5jdGlvbigpe3ZhciBiPQpkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLGE9Yi5vcHRpb25zLGM9Yi5zaXplLGU9Yi5vcmlnaW5hbFNpemUsZz1iLm9yaWdpbmFsUG9zaXRpb24sZj1iLmF4aXM7YS5ncmlkPXR5cGVvZiBhLmdyaWQ9PSJudW1iZXIiP1thLmdyaWQsYS5ncmlkXTphLmdyaWQ7dmFyIGg9TWF0aC5yb3VuZCgoYy53aWR0aC1lLndpZHRoKS8oYS5ncmlkWzBdfHwxKSkqKGEuZ3JpZFswXXx8MSk7YT1NYXRoLnJvdW5kKChjLmhlaWdodC1lLmhlaWdodCkvKGEuZ3JpZFsxXXx8MSkpKihhLmdyaWRbMV18fDEpO2lmKC9eKHNlfHN8ZSkkLy50ZXN0KGYpKXtiLnNpemUud2lkdGg9ZS53aWR0aCtoO2Iuc2l6ZS5oZWlnaHQ9ZS5oZWlnaHQrYX1lbHNlIGlmKC9eKG5lKSQvLnRlc3QoZikpe2Iuc2l6ZS53aWR0aD1lLndpZHRoK2g7Yi5zaXplLmhlaWdodD1lLmhlaWdodCthO2IucG9zaXRpb24udG9wPWcudG9wLWF9ZWxzZXtpZigvXihzdykkLy50ZXN0KGYpKXtiLnNpemUud2lkdGg9ZS53aWR0aCtoO2Iuc2l6ZS5oZWlnaHQ9CmUuaGVpZ2h0K2F9ZWxzZXtiLnNpemUud2lkdGg9ZS53aWR0aCtoO2Iuc2l6ZS5oZWlnaHQ9ZS5oZWlnaHQrYTtiLnBvc2l0aW9uLnRvcD1nLnRvcC1hfWIucG9zaXRpb24ubGVmdD1nLmxlZnQtaH19fSk7dmFyIG09ZnVuY3Rpb24oYil7cmV0dXJuIHBhcnNlSW50KGIsMTApfHwwfSxrPWZ1bmN0aW9uKGIpe3JldHVybiFpc05hTihwYXJzZUludChiLDEwKSl9fSkoalF1ZXJ5KTsKOw==",
	"cint.js": "JChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICAkKCcjY2FsZW5kYXInKS5mdWxsQ2FsZW5kYXIoewogICAgICBmaXJzdERheTogMSwgLy8gc3RhcnQgd2l0aCBtb25kYXkKCSAgZWRpdGFibGU6IGZhbHNlLAoJICBldmVudHM6ICIvY2FsZXZlbnRzP3RsPSIrdGxuYW1lLAoJICBoZWFkZXI6IHsKCWxlZnQ6ICdwcmV2LG5leHQgdG9kYXknLAoJICAgIGNlbnRlcjogJ3RpdGxlJywKCSAgICByaWdodDogJ21vbnRoLGJhc2ljV2VlaycKCX0KICAgICAgfSkKICAgICAgfSk7CgpmdW5jdGlvbiBhZGRfZW50cnkodGFza2xpc3QpIHsKICAgIHZhciBuZXRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3ZW50cnknKS52YWx1ZTsKICAgIHZhciBjYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FsZW5kYXInKTsKCiAgICB2YXIgcmVxID0gWE1MSHR0cFJlcXVlc3QoKQogICAgcmVxLm9wZW4oIkdFVCIsICJxYWRkP3RsPSIgKyBlc2NhcGUodGFza2xpc3QpICsgIiZ0ZXh0PSIgKyBlc2NhcGUobmV0ZXh0KSwgdHJ1ZSk7CiAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgICAgICAgaWYgKHJlcS5yZXNwb25zZVRleHQubWF0Y2goL15hZGRlZDogLykpIHsKCSAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKQogICAgICAgICAgICB9IGVsc2UgewoJICAgICAgYWxlcnQoIkFERCBGQUlMRUQ6ICIgKyByZXEucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICB9CiAgICB9OwogICAgcmVxLnNlbmQobnVsbCk7CiAgICByZXR1cm4gZmFsc2U7Cn0K",
	"cal.css": "LmFsdDEsIC5mYy1hZ2VuZGEgLmFsdDEsIC5mYy1ldmVudC10aW1lLCAuYWx0MSBhIHsKICAgIGJhY2tncm91bmQtY29sb3I6IG1hcm9vbjsKICAgIGJvcmRlci1jb2xvcjogbWFyb29uOwp9CgouYWx0MiwgLmZjLWFnZW5kYSAuYWx0MiwgLmZjLWV2ZW50LXRpbWUsIC5hbHQyIGEgewogICAgYmFja2dyb3VuZC1jb2xvcjogbmF2eTsKICAgIGJvcmRlci1jb2xvcjogbmF2eTsKfQoKLmFsdDMsIC5mYy1hZ2VuZGEgLmFsdDMsIC5mYy1ldmVudC10aW1lLCAuYWx0MyBhIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuOwogICAgYm9yZGVyLWNvbG9yOiBncmVlbjsKfQoKLmFsdDQsIC5mYy1hZ2VuZGEgLmFsdDQsIC5mYy1ldmVudC10aW1lLCAuYWx0NCBhIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGZ1Y2hzaWE7CiAgICBib3JkZXItY29sb3I6IGZ1Y2hzaWE7Cn0KCi5hbHQ1LCAuZmMtYWdlbmRhIC5hbHQ1LCAuZmMtZXZlbnQtdGltZSwgLmFsdDUgYSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7CiAgICBib3JkZXItY29sb3I6IHB1cnBsZTsKfQo=",
}

